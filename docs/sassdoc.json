[
  {
    "description": "Prefixes the provided string with the library name if it isn't already\n",
    "commentRange": {
      "start": 148,
      "end": 155
    },
    "context": {
      "type": "function",
      "name": "prefix",
      "code": "\n\t@if (type-of($base) != 'string') {\n\t\t@error 'The prefix function requires a string value.';\n\t}\n\n\t$base: string.to-lower-case($base);\n\n\t@if (string.index($base, $pre) != 1) {\n\t\t$base: #{$pre}#{$base};\n\t}\n\n\t@return $base;\n",
      "line": {
        "start": 156,
        "end": 168
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "prefix(header) // -> sun-header",
        "description": "prefix function"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "base",
        "description": "the string to be prefixed"
      }
    ],
    "return": {
      "type": "String",
      "description": "a prefixed string"
    },
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "pre"
      },
      {
        "type": "variable",
        "name": "pre"
      }
    ],
    "throw": [
      "The prefix function requires a string value."
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Prefixes the provided string with two dashes and the library name if it isn't already\n",
        "context": {
          "type": "function",
          "name": "css-prefix",
          "code": "\n\t@if (type-of($base) != 'string') {\n\t\t@error 'The css-prefix function requires a string value.';\n\t}\n\n\t@while (string.index($base, $dash) == 1) {\n\t\t$base: string.slice($base, 2);\n\t}\n\n\t@return #{$dash}#{$dash}#{prefix($base)};\n",
          "line": {
            "start": 178,
            "end": 188
          }
        }
      },
      {
        "description": "Creates a class selector with the library prefix\n",
        "context": {
          "type": "function",
          "name": "class",
          "code": "\n\t@if (type-of($base) != 'string') {\n\t\t@error 'The class function requires a string value.';\n\t}\n\n\t@return #{$dot}#{prefix($base)};\n",
          "line": {
            "start": 234,
            "end": 240
          }
        }
      },
      {
        "description": "Creates an id selector with the library prefix\n",
        "context": {
          "type": "function",
          "name": "id",
          "code": "\n\t@if (type-of($base) != 'string') {\n\t\t@error 'The id function requires a string value.';\n\t}\n\n\t@if (type-of($op) != 'string') {\n\t\t@error 'The controls function requires a string value for param 2.';\n\t}\n\n\t@if not($op == '=' or $op == '~=' or $op == '|=' or $op == '^=' or $op == '$=' or $op == '*=') {\n\t\t@error 'The controls function requires a valid attribute comparison operator for param 2.';\n\t}\n\n\t@if ($op == '=') {\n\t\t@return #{$hash}#{prefix($base)};\n\t}\n\n\t@return '[id#{$op}#{prefix($base)}]';\n",
          "line": {
            "start": 251,
            "end": 269
          }
        }
      },
      {
        "description": "Creates an id selector with the library prefix\n",
        "context": {
          "type": "function",
          "name": "id",
          "code": "\n\t@if (type-of($base) != 'string') {\n\t\t@error 'The id function requires a string value.';\n\t}\n\n\t@if (type-of($op) != 'string') {\n\t\t@error 'The controls function requires a string value for param 2.';\n\t}\n\n\t@if not($op == '=' or $op == '~=' or $op == '|=' or $op == '^=' or $op == '$=' or $op == '*=') {\n\t\t@error 'The controls function requires a valid attribute comparison operator for param 2.';\n\t}\n\n\t@if ($op == '=') {\n\t\t@return #{$hash}#{prefix($base)};\n\t}\n\n\t@return '[id#{$op}#{prefix($base)}]';\n",
          "line": {
            "start": 251,
            "end": 269
          }
        }
      },
      {
        "description": "Creates an aria-controls selector with the library prefix\n",
        "context": {
          "type": "function",
          "name": "controls",
          "code": "\n\t@if (type-of($id) != 'string') {\n\t\t@error 'The controls function requires a string value for param 1.';\n\t}\n\n\t@if (type-of($op) != 'string') {\n\t\t@error 'The controls function requires a string value for param 2.';\n\t}\n\n\t@if not($op == '=' or $op == '~=' or $op == '|=' or $op == '^=' or $op == '$=' or $op == '*=') {\n\t\t@error 'The controls function requires a valid attribute comparison operator for param 2.';\n\t}\n\n\t@return '[aria-controls#{$op}#{prefix($id)}]';\n",
          "line": {
            "start": 280,
            "end": 294
          }
        }
      }
    ]
  },
  {
    "description": "Prefixes the provided string with two dashes and the library name if it isn't already\n",
    "commentRange": {
      "start": 170,
      "end": 177
    },
    "context": {
      "type": "function",
      "name": "css-prefix",
      "code": "\n\t@if (type-of($base) != 'string') {\n\t\t@error 'The css-prefix function requires a string value.';\n\t}\n\n\t@while (string.index($base, $dash) == 1) {\n\t\t$base: string.slice($base, 2);\n\t}\n\n\t@return #{$dash}#{$dash}#{prefix($base)};\n",
      "line": {
        "start": 178,
        "end": 188
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "css-prefix(background) // -> --sun-background",
        "description": "css-prefix function"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "base",
        "description": "the string to be prefixed"
      }
    ],
    "return": {
      "type": "String",
      "description": "a prefixed string"
    },
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "prefix"
      },
      {
        "type": "variable",
        "name": "dash"
      },
      {
        "type": "variable",
        "name": "dash"
      },
      {
        "type": "variable",
        "name": "dash"
      }
    ],
    "throw": [
      "The css-prefix function requires a string value."
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Creates a CSS-var call for the prefixed `$base`\n",
        "context": {
          "type": "function",
          "name": "css-var",
          "code": "\n\t@if (type-of($base) != 'string') {\n\t\t@error 'The css-var function requires a string value.';\n\t}\n\n\t@if (string.index($base, '--') != 1) {\n\t\t$base: css-prefix($base);\n\t}\n\n\t@return var(#{$base});\n",
          "line": {
            "start": 198,
            "end": 208
          }
        }
      },
      {
        "description": "Creates a prefixed CSS var definition\n",
        "context": {
          "type": "mixin",
          "name": "css-var",
          "code": "\n\t@if (type-of($key) != 'string') {\n\t\t@error 'The css-var mixin requires a string for the $key argument.';\n\t}\n\n\t@if (string.index($key, '--') != 1) {\n\t\t$key: css-prefix($key);\n\t}\n\n\t#{$key}: #{$val};\n",
          "line": {
            "start": 460,
            "end": 470
          }
        }
      }
    ]
  },
  {
    "description": "Creates a CSS-var call for the prefixed `$base`\n",
    "commentRange": {
      "start": 190,
      "end": 197
    },
    "context": {
      "type": "function",
      "name": "css-var",
      "code": "\n\t@if (type-of($base) != 'string') {\n\t\t@error 'The css-var function requires a string value.';\n\t}\n\n\t@if (string.index($base, '--') != 1) {\n\t\t$base: css-prefix($base);\n\t}\n\n\t@return var(#{$base});\n",
      "line": {
        "start": 198,
        "end": 208
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "css-var(background) // -> var(--sun-background)",
        "description": "css-var function"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "base",
        "description": "the CSS-var to create a call for"
      }
    ],
    "return": {
      "type": "String",
      "description": "a CSS-var call"
    },
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "css-prefix"
      }
    ],
    "throw": [
      "The css-var function requires a string value."
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Creates a prefixed CSS var reference\n",
        "context": {
          "type": "mixin",
          "name": "css-var-ref",
          "code": "\n\t@if (type-of($key1) != 'string' or type-of($key2) != 'string') {\n\t\t@error 'The css-var-ref mixin requires string values for both parameters.';\n\t}\n\n\t@include css-var($key1, css-var($key2));\n",
          "line": {
            "start": 481,
            "end": 487
          }
        }
      }
    ]
  },
  {
    "description": "Negates a provided CSS-selector\n",
    "commentRange": {
      "start": 210,
      "end": 217
    },
    "context": {
      "type": "function",
      "name": "neg",
      "code": "\n\t@if (type-of($base) != 'string') {\n\t\t@error 'The neg function requires a string value.';\n\t}\n\n\t@return ':not(#{$base})';\n",
      "line": {
        "start": 218,
        "end": 224
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "neg(.sun-open) // -> :not(.sun-open)",
        "description": "neg function"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "base",
        "description": "the CSS-selector to negate"
      }
    ],
    "return": {
      "type": "String",
      "description": "a negated CSS-selector"
    },
    "access": "public",
    "require": [],
    "throw": [
      "The neg function requires a string value."
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Creates a class selector with the library prefix\n",
    "commentRange": {
      "start": 226,
      "end": 233
    },
    "context": {
      "type": "function",
      "name": "class",
      "code": "\n\t@if (type-of($base) != 'string') {\n\t\t@error 'The class function requires a string value.';\n\t}\n\n\t@return #{$dot}#{prefix($base)};\n",
      "line": {
        "start": 234,
        "end": 240
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "class(open) // -> .sun-open",
        "description": "class function"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "base",
        "description": "the name of the class"
      }
    ],
    "return": {
      "type": "String",
      "description": "a class selector"
    },
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "prefix"
      },
      {
        "type": "variable",
        "name": "dot"
      }
    ],
    "throw": [
      "The class function requires a string value."
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Generates flex utility classes\n",
        "context": {
          "type": "mixin",
          "name": "flex-util",
          "code": "\n\t& {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: flex-start;\n\t\tflex-wrap: wrap;\n\n\t\t&#{class(center)} {\n\t\t\tjustify-content: center;\n\t\t}\n\n\t\t&#{class(end)} {\n\t\t\tjustify-content: flex-end;\n\t\t}\n\n\t\t&#{class(between)} {\n\t\t\tjustify-content: space-between;\n\t\t}\n\n\t\t&#{class(around)} {\n\t\t\tjustify-content: space-around;\n\t\t}\n\n\t\t&#{class(even)} {\n\t\t\tjustify-content: space-evenly;\n\t\t}\n\t}\n",
          "line": {
            "start": 928,
            "end": 955
          }
        }
      },
      {
        "description": "Generates flex utility classes\n",
        "context": {
          "type": "mixin",
          "name": "flex-util",
          "code": "\n\t& {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: flex-start;\n\t\tflex-wrap: wrap;\n\n\t\t&#{class(center)} {\n\t\t\tjustify-content: center;\n\t\t}\n\n\t\t&#{class(end)} {\n\t\t\tjustify-content: flex-end;\n\t\t}\n\n\t\t&#{class(between)} {\n\t\t\tjustify-content: space-between;\n\t\t}\n\n\t\t&#{class(around)} {\n\t\t\tjustify-content: space-around;\n\t\t}\n\n\t\t&#{class(even)} {\n\t\t\tjustify-content: space-evenly;\n\t\t}\n\t}\n",
          "line": {
            "start": 928,
            "end": 955
          }
        }
      },
      {
        "description": "Generates flex utility classes\n",
        "context": {
          "type": "mixin",
          "name": "flex-util",
          "code": "\n\t& {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: flex-start;\n\t\tflex-wrap: wrap;\n\n\t\t&#{class(center)} {\n\t\t\tjustify-content: center;\n\t\t}\n\n\t\t&#{class(end)} {\n\t\t\tjustify-content: flex-end;\n\t\t}\n\n\t\t&#{class(between)} {\n\t\t\tjustify-content: space-between;\n\t\t}\n\n\t\t&#{class(around)} {\n\t\t\tjustify-content: space-around;\n\t\t}\n\n\t\t&#{class(even)} {\n\t\t\tjustify-content: space-evenly;\n\t\t}\n\t}\n",
          "line": {
            "start": 928,
            "end": 955
          }
        }
      },
      {
        "description": "Generates flex utility classes\n",
        "context": {
          "type": "mixin",
          "name": "flex-util",
          "code": "\n\t& {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: flex-start;\n\t\tflex-wrap: wrap;\n\n\t\t&#{class(center)} {\n\t\t\tjustify-content: center;\n\t\t}\n\n\t\t&#{class(end)} {\n\t\t\tjustify-content: flex-end;\n\t\t}\n\n\t\t&#{class(between)} {\n\t\t\tjustify-content: space-between;\n\t\t}\n\n\t\t&#{class(around)} {\n\t\t\tjustify-content: space-around;\n\t\t}\n\n\t\t&#{class(even)} {\n\t\t\tjustify-content: space-evenly;\n\t\t}\n\t}\n",
          "line": {
            "start": 928,
            "end": 955
          }
        }
      },
      {
        "description": "Generates flex utility classes\n",
        "context": {
          "type": "mixin",
          "name": "flex-util",
          "code": "\n\t& {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: flex-start;\n\t\tflex-wrap: wrap;\n\n\t\t&#{class(center)} {\n\t\t\tjustify-content: center;\n\t\t}\n\n\t\t&#{class(end)} {\n\t\t\tjustify-content: flex-end;\n\t\t}\n\n\t\t&#{class(between)} {\n\t\t\tjustify-content: space-between;\n\t\t}\n\n\t\t&#{class(around)} {\n\t\t\tjustify-content: space-around;\n\t\t}\n\n\t\t&#{class(even)} {\n\t\t\tjustify-content: space-evenly;\n\t\t}\n\t}\n",
          "line": {
            "start": 928,
            "end": 955
          }
        }
      },
      {
        "description": "Selector for all headers\n",
        "context": {
          "type": "mixin",
          "name": "headers",
          "code": "\n\t@for $i from 1 through 6 {\n\t\th#{$i},\n\t\t#{class(h#{$i})\n\t}\n\n\t\t{\n\t\t@content;\n\t}\n}\n",
          "line": {
            "start": 961,
            "end": 971
          }
        }
      },
      {
        "description": "Grid mixins\n",
        "context": {
          "type": "mixin",
          "name": "grid-2",
          "code": "\n\t@include break(sm) {\n\t\tgrid-template-columns: repeat(2, 1fr);\n\t\t\n\t\t& > :last-child:nth-child(odd) {\n\t\t\t#{class(card)} {\n\t\t\t\tgrid-column: span 2;\n\t\t\t\twidth: 50%;\n\t\t\t\tmargin-left: auto;\n\t\t\t\tmargin-right: auto;\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 5,
            "end": 18
          }
        }
      },
      {
        "description": "TODO: Document this\n",
        "context": {
          "type": "mixin",
          "name": "states",
          "code": "\n\t@each $state in $states {\n\t\t@if (type-of($state) != 'string') {\n\t\t\t@error 'The states mixin requires a string for each state argument.';\n\t\t}\n\t}\n\n\t@if (index($states, 'hover') != null) {\n\t\t&:hover {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'focus') != null) {\n\t\t&:focus-visible {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'active') != null) {\n\n\t\t&:active,\n\t\t&#{class(active)} {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'visited') != null) {\n\t\t&:visited {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'disabled') != null) {\n\t\t&:disabled {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'expanded') != null) {\n\t\t&#{expanded(true)} {\n\t\t\t@content;\n\t\t}\n\t}\n",
          "line": {
            "start": 878,
            "end": 922
          }
        }
      },
      {
        "description": "Mixins\nRegister an animation\n",
        "context": {
          "type": "mixin",
          "name": "animation",
          "code": "\n\t$animations: map-merge($animations, (&: map-merge(map.get($animations, &), $animation)));\n\t$this: map.get($animations, &);\n\t$animation: '';\n\n\t& {\n\t\t@each $item in $this {\n\t\t\t@if (list.index($this, $item) != 1) {\n\t\t\t\t$animation: #{$animation},\n\t\t\t\t;\n\t\t\t}\n\n\t\t\t$animation: #{$animation}#{$item};\n\t\t}\n\n\t\tanimation: $animation;\n\n\t\t@each $name,\n\t\t$items in $animations {\n\t\t\t&#{class($name)} {\n\t\t\t\tanimation: $animation;\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 1005,
            "end": 1029
          }
        }
      }
    ]
  },
  {
    "description": "Creates an id selector with the library prefix\n",
    "commentRange": {
      "start": 242,
      "end": 250
    },
    "context": {
      "type": "function",
      "name": "id",
      "code": "\n\t@if (type-of($base) != 'string') {\n\t\t@error 'The id function requires a string value.';\n\t}\n\n\t@if (type-of($op) != 'string') {\n\t\t@error 'The controls function requires a string value for param 2.';\n\t}\n\n\t@if not($op == '=' or $op == '~=' or $op == '|=' or $op == '^=' or $op == '$=' or $op == '*=') {\n\t\t@error 'The controls function requires a valid attribute comparison operator for param 2.';\n\t}\n\n\t@if ($op == '=') {\n\t\t@return #{$hash}#{prefix($base)};\n\t}\n\n\t@return '[id#{$op}#{prefix($base)}]';\n",
      "line": {
        "start": 251,
        "end": 269
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "id(header) // -> #sun-header",
        "description": "id function"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "base",
        "description": "the name of the id"
      },
      {
        "type": "String",
        "name": "op",
        "description": "the comparison operator"
      }
    ],
    "return": {
      "type": "String",
      "description": "an id selector"
    },
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "prefix"
      },
      {
        "type": "function",
        "name": "prefix"
      },
      {
        "type": "variable",
        "name": "hash"
      }
    ],
    "throw": [
      "The id function requires a string value.",
      "The controls function requires a string value for param 2.",
      "The controls function requires a valid attribute comparison operator for param 2."
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Creates an aria-controls selector with the library prefix\n",
    "commentRange": {
      "start": 271,
      "end": 279
    },
    "context": {
      "type": "function",
      "name": "controls",
      "code": "\n\t@if (type-of($id) != 'string') {\n\t\t@error 'The controls function requires a string value for param 1.';\n\t}\n\n\t@if (type-of($op) != 'string') {\n\t\t@error 'The controls function requires a string value for param 2.';\n\t}\n\n\t@if not($op == '=' or $op == '~=' or $op == '|=' or $op == '^=' or $op == '$=' or $op == '*=') {\n\t\t@error 'The controls function requires a valid attribute comparison operator for param 2.';\n\t}\n\n\t@return '[aria-controls#{$op}#{prefix($id)}]';\n",
      "line": {
        "start": 280,
        "end": 294
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "controls(header) // -> [aria-controls=sun-header]",
        "description": "controls function"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "id",
        "description": "the id of the controlled element"
      },
      {
        "type": "String",
        "name": "op",
        "description": "the comparison operator"
      }
    ],
    "return": {
      "type": "String",
      "description": "an aria-controls selector"
    },
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "prefix"
      }
    ],
    "throw": [
      "The controls function requires a string value for param 1.",
      "The controls function requires a string value for param 2.",
      "The controls function requires a valid attribute comparison operator for param 2."
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Creates an aria-expanded selector\n",
    "commentRange": {
      "start": 296,
      "end": 303
    },
    "context": {
      "type": "function",
      "name": "expanded",
      "code": "\n\t@if (type-of($bool) == 'string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool == 'true' or $bool == 'false') {\n\t\t\t@error 'The expanded function requires a boolean value.';\n\t\t}\n\t}\n\n\t@else if (type-of($bool) != 'bool') {\n\t\t@error 'The expanded function requires a boolean value.';\n\t}\n\n\t@return '[aria-expanded=#{$bool}]';\n",
      "line": {
        "start": 304,
        "end": 318
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "expanded(true) // -> [aria-expanded=true]",
        "description": "expanded function"
      }
    ],
    "parameter": [
      {
        "type": "Bool",
        "name": "bool",
        "description": "the value of the selector"
      }
    ],
    "return": {
      "type": "String",
      "description": "an aria-expanded selector"
    },
    "access": "public",
    "require": [],
    "throw": [
      "The expanded function requires a boolean value."
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "TODO: Document this\n",
        "context": {
          "type": "mixin",
          "name": "states",
          "code": "\n\t@each $state in $states {\n\t\t@if (type-of($state) != 'string') {\n\t\t\t@error 'The states mixin requires a string for each state argument.';\n\t\t}\n\t}\n\n\t@if (index($states, 'hover') != null) {\n\t\t&:hover {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'focus') != null) {\n\t\t&:focus-visible {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'active') != null) {\n\n\t\t&:active,\n\t\t&#{class(active)} {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'visited') != null) {\n\t\t&:visited {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'disabled') != null) {\n\t\t&:disabled {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'expanded') != null) {\n\t\t&#{expanded(true)} {\n\t\t\t@content;\n\t\t}\n\t}\n",
          "line": {
            "start": 878,
            "end": 922
          }
        }
      }
    ]
  },
  {
    "description": "Creates an aria-hidden selector\n",
    "commentRange": {
      "start": 320,
      "end": 327
    },
    "context": {
      "type": "function",
      "name": "hidden",
      "code": "\n\t@if (type-of($bool) == 'string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool == 'true' or $bool == 'false') {\n\t\t\t@error 'The hidden function requires a boolean value. Received: #{$bool}';\n\t\t}\n\t}\n\n\t@else if (type-of($bool) !='bool') {\n\t\t@error 'The hidden function requires a boolean value. Received: #{$bool}';\n\t}\n\n\t@return '[aria-hidden=#{$bool}]';\n",
      "line": {
        "start": 328,
        "end": 342
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "hidden(true) // -> [aria-hidden=true]",
        "description": "hidden function"
      }
    ],
    "parameter": [
      {
        "type": "Bool",
        "name": "bool",
        "description": "the value of the selector"
      }
    ],
    "return": {
      "type": "String",
      "description": "an aria-hidden selector"
    },
    "access": "public",
    "require": [],
    "throw": [
      "The hidden function requires a boolean value. Received: #{$bool}"
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Converts a number to ms\n",
    "commentRange": {
      "start": 344,
      "end": 351
    },
    "context": {
      "type": "function",
      "name": "ms",
      "code": "\n\t@if (type-of($val) != 'number') {\n\t\t@error 'The ms function requires a number value.';\n\t}\n\n\t@return $val * 1ms;\n",
      "line": {
        "start": 352,
        "end": 358
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "ms(100) // -> 100ms",
        "description": "ms function"
      }
    ],
    "parameter": [
      {
        "type": "Number",
        "name": "val",
        "description": "the number of ms to return"
      }
    ],
    "return": {
      "type": "Number",
      "description": "the number as ms"
    },
    "access": "public",
    "require": [],
    "throw": [
      "The ms function requires a number value."
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Returns the requested delay value as ms\n",
        "context": {
          "type": "function",
          "name": "delay",
          "code": "\n\t@if not(map-has-key($delay, $key)) {\n\t\t@error 'The delay function requires one of the following values: #{map-keys($delay)}';\n\t}\n\n\t@return ms(map-get($delay, $key));\n",
          "line": {
            "start": 427,
            "end": 433
          }
        }
      }
    ]
  },
  {
    "description": "Converts a number to px\n",
    "commentRange": {
      "start": 360,
      "end": 367
    },
    "context": {
      "type": "function",
      "name": "px",
      "code": "\n\t@if (type-of($val) != 'number') {\n\t\t@error 'The px function requires a number value.';\n\t}\n\n\t@return $val * 1px;\n",
      "line": {
        "start": 368,
        "end": 374
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "px(100) // -> 100px",
        "description": "px function"
      }
    ],
    "parameter": [
      {
        "type": "Number",
        "name": "val",
        "description": "the number of px to return"
      }
    ],
    "return": {
      "type": "Number",
      "description": "the number as px"
    },
    "access": "public",
    "require": [],
    "throw": [
      "The px function requires a number value."
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Returns the requested breakpoint value as px\n",
        "context": {
          "type": "function",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $key)) {\n\t\t@error 'The break function requires one of the following values: #{map-keys($break)}';\n\t}\n\n\t@return px(map-get($break, $key));\n",
          "line": {
            "start": 443,
            "end": 449
          }
        }
      }
    ]
  },
  {
    "description": "Removes the unit from the given value\n",
    "commentRange": {
      "start": 376,
      "end": 383
    },
    "context": {
      "type": "function",
      "name": "strip-unit",
      "code": "\n\t@if (type-of($val) != 'number') {\n\t\t@error 'The strip-unit function requires a number value.';\n\t}\n\n\t@return math.div($val, $val * 0 + 1);\n",
      "line": {
        "start": 384,
        "end": 390
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "strip-unit(100px) // -> 100",
        "description": "strip-unit function"
      }
    ],
    "parameter": [
      {
        "type": "Number",
        "name": "val",
        "description": "the value to strip"
      }
    ],
    "return": {
      "type": "Number",
      "description": "the number without units"
    },
    "access": "public",
    "require": [],
    "throw": [
      "The strip-unit function requires a number value."
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Returns the percentage of the given values\n",
        "context": {
          "type": "function",
          "name": "percent",
          "code": "\n\t@if (type-of($dividend) != 'number' or type-of($divisor) != 'number' or type-of($padding) != 'number') {\n\t\t@error 'The percent function requires number parameters.';\n\t}\n\n\t@if ($divisor == 0) {\n\t\t@error 'The percent function requires a non-zero value for param 2.';\n\t}\n\n\t@if (strip-unit($padding) != 0) {\n\t\t@return #{calc((($dividend * 100%) - $padding) / $divisor)}#{'%'};\n\t}\n\n\t@return math.div($dividend * 100%, $divisor);\n",
          "line": {
            "start": 403,
            "end": 417
          }
        }
      },
      {
        "description": "Generates a property with a fluid value between specified screen sizes\n",
        "context": {
          "type": "mixin",
          "name": "fluid",
          "code": "\n\t$u1: unit($min-vw);\n\t$u2: unit($max-vw);\n\t$u3: unit($min-size);\n\t$u4: unit($max-size);\n\n\t@if (type-of($prop) !='string') {\n\t\t@error 'The fluid mixin requires a string for the $prop argument.';\n\t}\n\n\t@if not(type-of($u1) == 'string' and type-of($u2) == 'string' and type-of($u3) == 'string' and type-of($u4) == 'string') {\n\t\t@error 'The fluid mixin requires numbers with units for the width and size arguments.';\n\t}\n\n\t@if not($u1 == $u2 and $u1 == $u3 and $u1 == $u4) {\n\t\t@error 'The fluid mixin requires width and size arguments with the same units.';\n\t}\n\n\t// See if you can get rid of this wrapping & selector\n\t& {\n\t\t#{$prop}: $min-size;\n\n\t\t@media (min-width: $min-vw) {\n\t\t\t#{$prop}: calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));\n\t\t}\n\n\t\t@media (min-width: $max-vw) {\n\t\t\t#{$prop}: $max-size;\n\t\t}\n\t}\n",
          "line": {
            "start": 747,
            "end": 777
          }
        }
      },
      {
        "description": "Generates a property with a fluid value between specified screen sizes\n",
        "context": {
          "type": "mixin",
          "name": "fluid",
          "code": "\n\t$u1: unit($min-vw);\n\t$u2: unit($max-vw);\n\t$u3: unit($min-size);\n\t$u4: unit($max-size);\n\n\t@if (type-of($prop) !='string') {\n\t\t@error 'The fluid mixin requires a string for the $prop argument.';\n\t}\n\n\t@if not(type-of($u1) == 'string' and type-of($u2) == 'string' and type-of($u3) == 'string' and type-of($u4) == 'string') {\n\t\t@error 'The fluid mixin requires numbers with units for the width and size arguments.';\n\t}\n\n\t@if not($u1 == $u2 and $u1 == $u3 and $u1 == $u4) {\n\t\t@error 'The fluid mixin requires width and size arguments with the same units.';\n\t}\n\n\t// See if you can get rid of this wrapping & selector\n\t& {\n\t\t#{$prop}: $min-size;\n\n\t\t@media (min-width: $min-vw) {\n\t\t\t#{$prop}: calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));\n\t\t}\n\n\t\t@media (min-width: $max-vw) {\n\t\t\t#{$prop}: $max-size;\n\t\t}\n\t}\n",
          "line": {
            "start": 747,
            "end": 777
          }
        }
      }
    ]
  },
  {
    "description": "Returns the percentage of the given values\n",
    "commentRange": {
      "start": 392,
      "end": 402
    },
    "context": {
      "type": "function",
      "name": "percent",
      "code": "\n\t@if (type-of($dividend) != 'number' or type-of($divisor) != 'number' or type-of($padding) != 'number') {\n\t\t@error 'The percent function requires number parameters.';\n\t}\n\n\t@if ($divisor == 0) {\n\t\t@error 'The percent function requires a non-zero value for param 2.';\n\t}\n\n\t@if (strip-unit($padding) != 0) {\n\t\t@return #{calc((($dividend * 100%) - $padding) / $divisor)}#{'%'};\n\t}\n\n\t@return math.div($dividend * 100%, $divisor);\n",
      "line": {
        "start": 403,
        "end": 417
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "percent(100, 200) // -> 50%",
        "description": "percent function"
      }
    ],
    "parameter": [
      {
        "type": "Number",
        "name": "dividend",
        "description": "the value that will be devided"
      },
      {
        "type": "Number",
        "name": "divisor",
        "description": "the value that will devided by"
      }
    ],
    "return": {
      "type": "Number",
      "description": "the percentage of the given values"
    },
    "throw": [
      "The percent function requires number parameters.",
      "The percent function requires a non-zero value for param 2."
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "strip-unit"
      }
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Returns the requested delay value as ms\n",
    "commentRange": {
      "start": 419,
      "end": 426
    },
    "context": {
      "type": "function",
      "name": "delay",
      "code": "\n\t@if not(map-has-key($delay, $key)) {\n\t\t@error 'The delay function requires one of the following values: #{map-keys($delay)}';\n\t}\n\n\t@return ms(map-get($delay, $key));\n",
      "line": {
        "start": 427,
        "end": 433
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "delay(default) // -> 300ms",
        "description": "delay function"
      }
    ],
    "parameter": [
      {
        "type": "Number",
        "name": "key",
        "description": "the key of the delay to use"
      }
    ],
    "return": {
      "type": "Number",
      "description": "the delay value as ms"
    },
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "ms"
      },
      {
        "type": "variable",
        "name": "delay"
      },
      {
        "type": "variable",
        "name": "delay"
      },
      {
        "type": "variable",
        "name": "delay"
      }
    ],
    "throw": [
      "The delay function requires one of the following values: #{map-keys($delay)}"
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Returns the requested breakpoint value as px\n",
    "commentRange": {
      "start": 435,
      "end": 442
    },
    "context": {
      "type": "function",
      "name": "break",
      "code": "\n\t@if not(map-has-key($break, $key)) {\n\t\t@error 'The break function requires one of the following values: #{map-keys($break)}';\n\t}\n\n\t@return px(map-get($break, $key));\n",
      "line": {
        "start": 443,
        "end": 449
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "break(md) // -> 1024px",
        "description": "break function"
      }
    ],
    "parameter": [
      {
        "type": "Number",
        "name": "key",
        "description": "the key of the breakpoint to use"
      }
    ],
    "return": {
      "type": "Number",
      "description": "the breakpoint value as px"
    },
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "px"
      },
      {
        "type": "variable",
        "name": "break"
      },
      {
        "type": "variable",
        "name": "break"
      },
      {
        "type": "variable",
        "name": "break"
      }
    ],
    "throw": [
      "The break function requires one of the following values: #{map-keys($break)}"
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Wraps the provided content in a media query\n",
        "context": {
          "type": "mixin",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $min) and (type-of($max) == 'null' or map-has-key($break, $max))) {\n\t\t@error 'The break mixin requires one or two of the following values: #{map-keys($break)}';\n\t}\n\n\t@if (map-has-key($break, $max)) {\n\t\t@media (min-width: break($min)) and (max-width: break($max)) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else {\n\t\t@media (min-width: break($min)) {\n\t\t\t@content;\n\t\t}\n\t}\n",
          "line": {
            "start": 500,
            "end": 516
          }
        }
      },
      {
        "description": "Wraps the provided content in a media query\n",
        "context": {
          "type": "mixin",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $min) and (type-of($max) == 'null' or map-has-key($break, $max))) {\n\t\t@error 'The break mixin requires one or two of the following values: #{map-keys($break)}';\n\t}\n\n\t@if (map-has-key($break, $max)) {\n\t\t@media (min-width: break($min)) and (max-width: break($max)) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else {\n\t\t@media (min-width: break($min)) {\n\t\t\t@content;\n\t\t}\n\t}\n",
          "line": {
            "start": 500,
            "end": 516
          }
        }
      },
      {
        "description": "Wraps the provided content in a media query\n",
        "context": {
          "type": "mixin",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $min) and (type-of($max) == 'null' or map-has-key($break, $max))) {\n\t\t@error 'The break mixin requires one or two of the following values: #{map-keys($break)}';\n\t}\n\n\t@if (map-has-key($break, $max)) {\n\t\t@media (min-width: break($min)) and (max-width: break($max)) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else {\n\t\t@media (min-width: break($min)) {\n\t\t\t@content;\n\t\t}\n\t}\n",
          "line": {
            "start": 500,
            "end": 516
          }
        }
      }
    ]
  },
  {
    "description": "Delay variables\n",
    "commentRange": {
      "start": 101,
      "end": 108
    },
    "context": {
      "type": "variable",
      "name": "delay",
      "value": "(\n\tinstant: $delay-base + $delay-step * 0,\n\tfast: $delay-base + $delay-step * 1,\n\tmed-fast: $delay-base + $delay-step * 2,\n\tdefault: $delay-base + $delay-step * 3,\n\tmed-slow: $delay-base + $delay-step * 4,\n\tslow: $delay-base + $delay-step * 5\n)",
      "scope": "default",
      "line": {
        "start": 109,
        "end": 116
      }
    },
    "group": [
      "maps"
    ],
    "property": [
      {
        "type": "Number",
        "name": "$delay.instant",
        "default": "0",
        "description": "Instant: the quickest delay; close or equal to 0"
      },
      {
        "type": "Number",
        "name": "$delay.fast",
        "default": "100",
        "description": "Fast: delays that happen quickly"
      },
      {
        "type": "Number",
        "name": "$delay.med-fast",
        "default": "200",
        "description": "Med-Fast: delays that happen faster"
      },
      {
        "type": "Number",
        "name": "$delay.default",
        "default": "300",
        "description": "Default: delays that are average"
      },
      {
        "type": "Number",
        "name": "$delay.med-slow",
        "default": "400",
        "description": "Med-Slow: delays that happen slower"
      },
      {
        "type": "Number",
        "name": "$delay.slow",
        "default": "500",
        "description": "Slow: delays that happen slowly"
      }
    ],
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Returns the requested delay value as ms\n",
        "context": {
          "type": "function",
          "name": "delay",
          "code": "\n\t@if not(map-has-key($delay, $key)) {\n\t\t@error 'The delay function requires one of the following values: #{map-keys($delay)}';\n\t}\n\n\t@return ms(map-get($delay, $key));\n",
          "line": {
            "start": 427,
            "end": 433
          }
        }
      },
      {
        "description": "Returns the requested delay value as ms\n",
        "context": {
          "type": "function",
          "name": "delay",
          "code": "\n\t@if not(map-has-key($delay, $key)) {\n\t\t@error 'The delay function requires one of the following values: #{map-keys($delay)}';\n\t}\n\n\t@return ms(map-get($delay, $key));\n",
          "line": {
            "start": 427,
            "end": 433
          }
        }
      },
      {
        "description": "Returns the requested delay value as ms\n",
        "context": {
          "type": "function",
          "name": "delay",
          "code": "\n\t@if not(map-has-key($delay, $key)) {\n\t\t@error 'The delay function requires one of the following values: #{map-keys($delay)}';\n\t}\n\n\t@return ms(map-get($delay, $key));\n",
          "line": {
            "start": 427,
            "end": 433
          }
        }
      }
    ]
  },
  {
    "description": "Breakpoint variables\n",
    "commentRange": {
      "start": 118,
      "end": 124
    },
    "context": {
      "type": "variable",
      "name": "break",
      "value": "(\n\txs: 480,\n\tsm: 768,\n\tmd: 1024,\n\tlg: 1200,\n\txl: 1440\n)",
      "scope": "default",
      "line": {
        "start": 125,
        "end": 131
      }
    },
    "group": [
      "maps"
    ],
    "property": [
      {
        "type": "Number",
        "name": "$break.xs",
        "default": "480",
        "description": "Extra-Small: mobile devices"
      },
      {
        "type": "Number",
        "name": "$break.sm",
        "default": "768",
        "description": "Small: small tablets, landscape mobiles"
      },
      {
        "type": "Number",
        "name": "$break.md",
        "default": "1024",
        "description": "Medium: small desktops, large tablets"
      },
      {
        "type": "Number",
        "name": "$break.lg",
        "default": "1200",
        "description": "Large: large desktops, landscape tablets"
      },
      {
        "type": "Number",
        "name": "$break.xl",
        "default": "1440",
        "description": "Extra-Large: larger desktops"
      }
    ],
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Returns the requested breakpoint value as px\n",
        "context": {
          "type": "function",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $key)) {\n\t\t@error 'The break function requires one of the following values: #{map-keys($break)}';\n\t}\n\n\t@return px(map-get($break, $key));\n",
          "line": {
            "start": 443,
            "end": 449
          }
        }
      },
      {
        "description": "Returns the requested breakpoint value as px\n",
        "context": {
          "type": "function",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $key)) {\n\t\t@error 'The break function requires one of the following values: #{map-keys($break)}';\n\t}\n\n\t@return px(map-get($break, $key));\n",
          "line": {
            "start": 443,
            "end": 449
          }
        }
      },
      {
        "description": "Returns the requested breakpoint value as px\n",
        "context": {
          "type": "function",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $key)) {\n\t\t@error 'The break function requires one of the following values: #{map-keys($break)}';\n\t}\n\n\t@return px(map-get($break, $key));\n",
          "line": {
            "start": 443,
            "end": 449
          }
        }
      },
      {
        "description": "Wraps the provided content in a media query\n",
        "context": {
          "type": "mixin",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $min) and (type-of($max) == 'null' or map-has-key($break, $max))) {\n\t\t@error 'The break mixin requires one or two of the following values: #{map-keys($break)}';\n\t}\n\n\t@if (map-has-key($break, $max)) {\n\t\t@media (min-width: break($min)) and (max-width: break($max)) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else {\n\t\t@media (min-width: break($min)) {\n\t\t\t@content;\n\t\t}\n\t}\n",
          "line": {
            "start": 500,
            "end": 516
          }
        }
      },
      {
        "description": "Wraps the provided content in a media query\n",
        "context": {
          "type": "mixin",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $min) and (type-of($max) == 'null' or map-has-key($break, $max))) {\n\t\t@error 'The break mixin requires one or two of the following values: #{map-keys($break)}';\n\t}\n\n\t@if (map-has-key($break, $max)) {\n\t\t@media (min-width: break($min)) and (max-width: break($max)) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else {\n\t\t@media (min-width: break($min)) {\n\t\t\t@content;\n\t\t}\n\t}\n",
          "line": {
            "start": 500,
            "end": 516
          }
        }
      },
      {
        "description": "Wraps the provided content in a media query\n",
        "context": {
          "type": "mixin",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $min) and (type-of($max) == 'null' or map-has-key($break, $max))) {\n\t\t@error 'The break mixin requires one or two of the following values: #{map-keys($break)}';\n\t}\n\n\t@if (map-has-key($break, $max)) {\n\t\t@media (min-width: break($min)) and (max-width: break($max)) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else {\n\t\t@media (min-width: break($min)) {\n\t\t\t@content;\n\t\t}\n\t}\n",
          "line": {
            "start": 500,
            "end": 516
          }
        }
      },
      {
        "description": "Wraps the provided content in a media query\n",
        "context": {
          "type": "mixin",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $min) and (type-of($max) == 'null' or map-has-key($break, $max))) {\n\t\t@error 'The break mixin requires one or two of the following values: #{map-keys($break)}';\n\t}\n\n\t@if (map-has-key($break, $max)) {\n\t\t@media (min-width: break($min)) and (max-width: break($max)) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else {\n\t\t@media (min-width: break($min)) {\n\t\t\t@content;\n\t\t}\n\t}\n",
          "line": {
            "start": 500,
            "end": 516
          }
        }
      },
      {
        "description": "Creates utility selectors for a given property at each breakpoint\n",
        "context": {
          "type": "mixin",
          "name": "break-util",
          "code": "\n\t@if (type-of($prop) !='string') {\n\t\t@error 'The break-util mixin requires a string for the $prop argument.';\n\t}\n\n\t& {\n\t\t#{$prop}: #{$val};\n\n\t\t@each $key,\n\t\t$width in $break {\n\t\t\t&-#{$key} {\n\t\t\t\t#{$prop}: #{$none};\n\n\t\t\t\t@include break($key) {\n\t\t\t\t\t#{$prop}: #{$val};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t&-to-#{$key} {\n\t\t\t\t#{$prop}: #{$val};\n\n\t\t\t\t@include break($key) {\n\t\t\t\t\t#{$prop}: #{$none};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 574,
            "end": 601
          }
        }
      }
    ]
  },
  {
    "description": "Creates a prefixed CSS var definition\n",
    "commentRange": {
      "start": 451,
      "end": 459
    },
    "context": {
      "type": "mixin",
      "name": "css-var",
      "code": "\n\t@if (type-of($key) != 'string') {\n\t\t@error 'The css-var mixin requires a string for the $key argument.';\n\t}\n\n\t@if (string.index($key, '--') != 1) {\n\t\t$key: css-prefix($key);\n\t}\n\n\t#{$key}: #{$val};\n",
      "line": {
        "start": 460,
        "end": 470
      }
    },
    "group": [
      "mixins"
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include css-var(bg, black) // -> --sun-bg: black;",
        "description": "css-var mixin"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "key",
        "description": "the key of the CSS var"
      },
      {
        "type": "Any",
        "name": "val",
        "description": "the value of the CSS var"
      }
    ],
    "output": "a prefixed CSS var definition",
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "css-prefix"
      }
    ],
    "throw": [
      "The css-var mixin requires a string for the $key argument."
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Creates a prefixed CSS var reference\n",
        "context": {
          "type": "mixin",
          "name": "css-var-ref",
          "code": "\n\t@if (type-of($key1) != 'string' or type-of($key2) != 'string') {\n\t\t@error 'The css-var-ref mixin requires string values for both parameters.';\n\t}\n\n\t@include css-var($key1, css-var($key2));\n",
          "line": {
            "start": 481,
            "end": 487
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) != 'string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) != 'color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type == lighten or $type == darken or $type == both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) != 'number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha) == 'string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool == 'true' or $bool == 'false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) != 'bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 789,
            "end": 875
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) != 'string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) != 'color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type == lighten or $type == darken or $type == both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) != 'number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha) == 'string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool == 'true' or $bool == 'false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) != 'bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 789,
            "end": 875
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) != 'string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) != 'color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type == lighten or $type == darken or $type == both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) != 'number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha) == 'string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool == 'true' or $bool == 'false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) != 'bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 789,
            "end": 875
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) != 'string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) != 'color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type == lighten or $type == darken or $type == both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) != 'number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha) == 'string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool == 'true' or $bool == 'false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) != 'bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 789,
            "end": 875
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) != 'string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) != 'color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type == lighten or $type == darken or $type == both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) != 'number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha) == 'string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool == 'true' or $bool == 'false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) != 'bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 789,
            "end": 875
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) != 'string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) != 'color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type == lighten or $type == darken or $type == both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) != 'number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha) == 'string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool == 'true' or $bool == 'false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) != 'bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 789,
            "end": 875
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) != 'string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) != 'color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type == lighten or $type == darken or $type == both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) != 'number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha) == 'string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool == 'true' or $bool == 'false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) != 'bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 789,
            "end": 875
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) != 'string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) != 'color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type == lighten or $type == darken or $type == both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) != 'number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha) == 'string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool == 'true' or $bool == 'false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) != 'bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 789,
            "end": 875
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) != 'string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) != 'color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type == lighten or $type == darken or $type == both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) != 'number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha) == 'string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool == 'true' or $bool == 'false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) != 'bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 789,
            "end": 875
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) != 'string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) != 'color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type == lighten or $type == darken or $type == both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) != 'number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha) == 'string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool == 'true' or $bool == 'false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) != 'bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 789,
            "end": 875
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) != 'string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) != 'color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type == lighten or $type == darken or $type == both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) != 'number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha) == 'string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool == 'true' or $bool == 'false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) != 'bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 789,
            "end": 875
          }
        }
      },
      {
        "description": "Light theme\n",
        "context": {
          "type": "mixin",
          "name": "light-theme",
          "code": "\n\t@include css-var(fore, $fore);\n\t@include css-var(back, $back);\n",
          "line": {
            "start": 55,
            "end": 58
          }
        }
      },
      {
        "description": "Light theme\n",
        "context": {
          "type": "mixin",
          "name": "light-theme",
          "code": "\n\t@include css-var(fore, $fore);\n\t@include css-var(back, $back);\n",
          "line": {
            "start": 55,
            "end": 58
          }
        }
      },
      {
        "description": "Dark theme\n",
        "context": {
          "type": "mixin",
          "name": "dark-theme",
          "code": "\n\t@include css-var(fore, $back);\n\t@include css-var(back, $fore);\n",
          "line": {
            "start": 61,
            "end": 64
          }
        }
      },
      {
        "description": "Dark theme\n",
        "context": {
          "type": "mixin",
          "name": "dark-theme",
          "code": "\n\t@include css-var(fore, $back);\n\t@include css-var(back, $fore);\n",
          "line": {
            "start": 61,
            "end": 64
          }
        }
      }
    ]
  },
  {
    "description": "Creates a prefixed CSS var reference\n",
    "commentRange": {
      "start": 472,
      "end": 480
    },
    "context": {
      "type": "mixin",
      "name": "css-var-ref",
      "code": "\n\t@if (type-of($key1) != 'string' or type-of($key2) != 'string') {\n\t\t@error 'The css-var-ref mixin requires string values for both parameters.';\n\t}\n\n\t@include css-var($key1, css-var($key2));\n",
      "line": {
        "start": 481,
        "end": 487
      }
    },
    "group": [
      "mixins"
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include css-var-ref(fill, bg) // -> --sun-fill: var(--sun-bg);",
        "description": "css-var-ref mixin"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "key1",
        "description": "the key of the new CSS var to define"
      },
      {
        "type": "String",
        "name": "key2",
        "description": "the key of the referenced CSS var"
      }
    ],
    "output": "a prefixed CSS var reference",
    "access": "public",
    "require": [
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "function",
        "name": "css-var"
      }
    ],
    "throw": [
      "The css-var-ref mixin requires string values for both parameters."
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Wraps the provided content in a media query\n",
    "commentRange": {
      "start": 489,
      "end": 499
    },
    "context": {
      "type": "mixin",
      "name": "break",
      "code": "\n\t@if not(map-has-key($break, $min) and (type-of($max) == 'null' or map-has-key($break, $max))) {\n\t\t@error 'The break mixin requires one or two of the following values: #{map-keys($break)}';\n\t}\n\n\t@if (map-has-key($break, $max)) {\n\t\t@media (min-width: break($min)) and (max-width: break($max)) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else {\n\t\t@media (min-width: break($min)) {\n\t\t\t@content;\n\t\t}\n\t}\n",
      "line": {
        "start": 500,
        "end": 516
      }
    },
    "group": [
      "mixins"
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include break(md) {    // ->   @media (min-width: 1024px) {\n    display: none;      //          display: none;\n}                       //      }",
        "description": "break mixin"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "min",
        "description": "the key of the breakpoint to use with min-width"
      },
      {
        "type": "String",
        "name": "max",
        "description": "the key of the breakpoint to use with max-width"
      }
    ],
    "output": "the provided content wrapped in a media query",
    "access": "public",
    "content": "",
    "require": [
      {
        "type": "function",
        "name": "break"
      },
      {
        "type": "function",
        "name": "break"
      },
      {
        "type": "function",
        "name": "break"
      },
      {
        "type": "variable",
        "name": "break"
      },
      {
        "type": "variable",
        "name": "break"
      },
      {
        "type": "variable",
        "name": "break"
      },
      {
        "type": "variable",
        "name": "break"
      }
    ],
    "throw": [
      "The break mixin requires one or two of the following values: #{map-keys($break)}"
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Creates utility selectors for a given property at each breakpoint\n",
        "context": {
          "type": "mixin",
          "name": "break-util",
          "code": "\n\t@if (type-of($prop) !='string') {\n\t\t@error 'The break-util mixin requires a string for the $prop argument.';\n\t}\n\n\t& {\n\t\t#{$prop}: #{$val};\n\n\t\t@each $key,\n\t\t$width in $break {\n\t\t\t&-#{$key} {\n\t\t\t\t#{$prop}: #{$none};\n\n\t\t\t\t@include break($key) {\n\t\t\t\t\t#{$prop}: #{$val};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t&-to-#{$key} {\n\t\t\t\t#{$prop}: #{$val};\n\n\t\t\t\t@include break($key) {\n\t\t\t\t\t#{$prop}: #{$none};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 574,
            "end": 601
          }
        }
      },
      {
        "description": "Creates utility selectors for a given property at each breakpoint\n",
        "context": {
          "type": "mixin",
          "name": "break-util",
          "code": "\n\t@if (type-of($prop) !='string') {\n\t\t@error 'The break-util mixin requires a string for the $prop argument.';\n\t}\n\n\t& {\n\t\t#{$prop}: #{$val};\n\n\t\t@each $key,\n\t\t$width in $break {\n\t\t\t&-#{$key} {\n\t\t\t\t#{$prop}: #{$none};\n\n\t\t\t\t@include break($key) {\n\t\t\t\t\t#{$prop}: #{$val};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t&-to-#{$key} {\n\t\t\t\t#{$prop}: #{$val};\n\n\t\t\t\t@include break($key) {\n\t\t\t\t\t#{$prop}: #{$none};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 574,
            "end": 601
          }
        }
      },
      {
        "description": "Grid mixins\n",
        "context": {
          "type": "mixin",
          "name": "grid-2",
          "code": "\n\t@include break(sm) {\n\t\tgrid-template-columns: repeat(2, 1fr);\n\t\t\n\t\t& > :last-child:nth-child(odd) {\n\t\t\t#{class(card)} {\n\t\t\t\tgrid-column: span 2;\n\t\t\t\twidth: 50%;\n\t\t\t\tmargin-left: auto;\n\t\t\t\tmargin-right: auto;\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 5,
            "end": 18
          }
        }
      },
      {
        "description": "Border Mixin\n",
        "context": {
          "type": "mixin",
          "name": "mint-border",
          "code": "\n\tpadding: math.div($texture-padding, 2) + $texture-border-width;\n\tborder-image-source: url($texture-border-image);\n\tborder-image-slice: $texture-border-slice;\n\tborder-image-repeat: #{$texture-border-repeat};\n\tborder-image-width: $texture-border-width;\n\tborder-style: $texture-border-type;\n\n    @include break(sm) {\n        padding: $texture-padding + $texture-border-width;\n    }\n",
          "line": {
            "start": 56,
            "end": 67
          }
        }
      }
    ]
  },
  {
    "description": "Creates utility selectors for a given property at each breakpoint\n",
    "commentRange": {
      "start": 536,
      "end": 573
    },
    "context": {
      "type": "mixin",
      "name": "break-util",
      "code": "\n\t@if (type-of($prop) !='string') {\n\t\t@error 'The break-util mixin requires a string for the $prop argument.';\n\t}\n\n\t& {\n\t\t#{$prop}: #{$val};\n\n\t\t@each $key,\n\t\t$width in $break {\n\t\t\t&-#{$key} {\n\t\t\t\t#{$prop}: #{$none};\n\n\t\t\t\t@include break($key) {\n\t\t\t\t\t#{$prop}: #{$val};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t&-to-#{$key} {\n\t\t\t\t#{$prop}: #{$val};\n\n\t\t\t\t@include break($key) {\n\t\t\t\t\t#{$prop}: #{$none};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n",
      "line": {
        "start": 574,
        "end": 601
      }
    },
    "group": [
      "mixins"
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include break-util(display, flex);     // ->   & {\n                                        //          display: flex;\n                                        //\n                                        //          &-xs {\n                                        //              display: none;\n                                        //              @include break(xs) {\n                                        //                  display: flex;\n                                        //              }\n                                        //          }\n                                        //          &-to-xs {\n                                        //              display: flex;\n                                        //              @include break(xs) {\n                                        //                  display: none;\n                                        //              }\n                                        //          }\n                                        //          ...\n                                        //          &-xl {\n                                        //              display: none;\n                                        //              @include break(xl) {\n                                        //                  display: flex;\n                                        //              }\n                                        //          }\n                                        //          &-to-xl {\n                                        //              display: flex;\n                                        //              @include break(xl) {\n                                        //                  display: none;\n                                        //              }\n                                        //          }\n                                        //      }",
        "description": "break-util mixin"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "prop",
        "description": "the property to toggle"
      },
      {
        "type": "Any",
        "name": "val",
        "description": "the active value of the property"
      },
      {
        "type": "Any",
        "name": "none",
        "description": "the inactive value of the property"
      }
    ],
    "output": "utility selectors for the given property at each breakpoint",
    "access": "public",
    "require": [
      {
        "type": "mixin",
        "name": "break"
      },
      {
        "type": "mixin",
        "name": "break"
      },
      {
        "type": "variable",
        "name": "break"
      }
    ],
    "throw": [
      "The break-util mixin requires a string for the $prop argument."
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Creates utility selectors for a box model property\n",
    "commentRange": {
      "start": 603,
      "end": 608
    },
    "context": {
      "type": "mixin",
      "name": "box-util",
      "code": "\n\t@if (type-of($prop) != 'string') {\n\t\t@error 'The box-util mixin requires a string for the $prop argument.';\n\t}\n\n\t&-auto {\n\t\t#{$prop}-left: auto;\n\t\t#{$prop}-right: auto;\n\n\t\t&-v {\n\t\t\t#{$prop}: $val auto;\n\n\t\t\t@for $i from 0 through 6 {\n\t\t\t\t&#{$i} {\n\t\t\t\t\t#{$prop}: $val * $i auto;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t&-t {\n\t\t\t#{$prop}-top: $val;\n\t\t\t#{$prop}-left: auto;\n\t\t\t#{$prop}-right: auto;\n\n\t\t\t@for $i from 0 through 6 {\n\t\t\t\t&#{$i} {\n\t\t\t\t\t#{$prop}-top: $val * $i;\n\t\t\t\t\t#{$prop}-left: auto;\n\t\t\t\t\t#{$prop}-right: auto;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t&-b {\n\t\t\t#{$prop}-bottom: $val;\n\t\t\t#{$prop}-left: auto;\n\t\t\t#{$prop}-right: auto;\n\n\t\t\t@for $i from 0 through 6 {\n\t\t\t\t&#{$i} {\n\t\t\t\t\t#{$prop}-bottom: $val * $i;\n\t\t\t\t\t#{$prop}-left: auto;\n\t\t\t\t\t#{$prop}-right: auto;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t&-v {\n\t\t#{$prop}-top: $val;\n\t\t#{$prop}-bottom: $val;\n\n\t\t@for $i from 0 through 6 {\n\t\t\t&#{$i} {\n\t\t\t\t#{$prop}-top: $val * $i;\n\t\t\t\t#{$prop}-bottom: $val * $i;\n\t\t\t}\n\t\t}\n\t}\n\n\t&-t {\n\t\t#{$prop}-top: $val;\n\n\t\t@for $i from 0 through 6 {\n\t\t\t&#{$i} {\n\t\t\t\t#{$prop}-top: $val * $i;\n\t\t\t}\n\t\t}\n\n\t\t&#{50} {\n\t\t\t#{$prop}-top: 50vh;\n\t\t}\n\t}\n\n\t&-b {\n\t\t#{$prop}-bottom: $val;\n\n\t\t@for $i from 0 through 6 {\n\t\t\t&#{$i} {\n\t\t\t\t#{$prop}-bottom: $val * $i;\n\t\t\t}\n\t\t}\n\t}\n\n\t&-h {\n\t\t#{$prop}-left: $val;\n\t\t#{$prop}-right: $val;\n\n\t\t@for $i from 0 through 6 {\n\t\t\t&#{$i} {\n\t\t\t\t#{$prop}-left: $val * $i;\n\t\t\t\t#{$prop}-right: $val * $i;\n\t\t\t}\n\t\t}\n\t}\n\n\t&-l {\n\t\t#{$prop}-left: $val;\n\n\t\t@for $i from 0 through 6 {\n\t\t\t&#{$i} {\n\t\t\t\t#{$prop}-left: $val * $i;\n\t\t\t}\n\t\t}\n\t}\n\n\t&-r {\n\t\t#{$prop}-right: $val;\n\n\t\t@for $i from 0 through 6 {\n\t\t\t&#{$i} {\n\t\t\t\t#{$prop}-right: $val * $i;\n\t\t\t}\n\t\t}\n\t}\n",
      "line": {
        "start": 609,
        "end": 724
      }
    },
    "group": [
      "mixins"
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include box-util(margin, 1rem, 0);    // ->   & {",
        "description": "box-util mixin"
      }
    ],
    "access": "public",
    "require": [],
    "throw": [
      "The box-util mixin requires a string for the $prop argument."
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Generates a property with a fluid value between specified screen sizes\n",
    "commentRange": {
      "start": 727,
      "end": 746
    },
    "context": {
      "type": "mixin",
      "name": "fluid",
      "code": "\n\t$u1: unit($min-vw);\n\t$u2: unit($max-vw);\n\t$u3: unit($min-size);\n\t$u4: unit($max-size);\n\n\t@if (type-of($prop) !='string') {\n\t\t@error 'The fluid mixin requires a string for the $prop argument.';\n\t}\n\n\t@if not(type-of($u1) == 'string' and type-of($u2) == 'string' and type-of($u3) == 'string' and type-of($u4) == 'string') {\n\t\t@error 'The fluid mixin requires numbers with units for the width and size arguments.';\n\t}\n\n\t@if not($u1 == $u2 and $u1 == $u3 and $u1 == $u4) {\n\t\t@error 'The fluid mixin requires width and size arguments with the same units.';\n\t}\n\n\t// See if you can get rid of this wrapping & selector\n\t& {\n\t\t#{$prop}: $min-size;\n\n\t\t@media (min-width: $min-vw) {\n\t\t\t#{$prop}: calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));\n\t\t}\n\n\t\t@media (min-width: $max-vw) {\n\t\t\t#{$prop}: $max-size;\n\t\t}\n\t}\n",
      "line": {
        "start": 747,
        "end": 777
      }
    },
    "group": [
      "mixins"
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include fluid(font-size, 480px, 1024px, 18px, 16px);   // ->   & {\n                                                        //          font-size: 16px;\n                                                        //          @media (min-width: 480px) {\n                                                        //              font-size: calc(16px + 2 * ((100vw - 480px) / 544));\n                                                        //          }\n                                                        //          @media (min-width: 1024px) {\n                                                        //              font-size: 18px;\n                                                        //          }\n                                                        //      }",
        "description": "fluid mixin"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "prop",
        "description": "the property whose value will be fluid"
      },
      {
        "type": "String",
        "name": "min-vw",
        "description": "the minimum screen width of the fluid property"
      },
      {
        "type": "String",
        "name": "max-vw",
        "description": "the maximum screen width of the fluid property"
      },
      {
        "type": "String",
        "name": "min-size",
        "description": "the minimum value of the fluid property"
      },
      {
        "type": "String",
        "name": "max-size",
        "description": "the maximum value of the fluid property"
      }
    ],
    "output": "the definitions for the property at different screen sizes",
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "strip-unit"
      },
      {
        "type": "function",
        "name": "strip-unit"
      }
    ],
    "throw": [
      "The fluid mixin requires a string for the $prop argument.",
      "The fluid mixin requires numbers with units for the width and size arguments.",
      "The fluid mixin requires width and size arguments with the same units."
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Generates css varibles for lighter, darker, or both variations\n",
    "commentRange": {
      "start": 779,
      "end": 788
    },
    "context": {
      "type": "mixin",
      "name": "shades",
      "code": "\n\t@if (type-of($name) != 'string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) != 'color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type == lighten or $type == darken or $type == both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) != 'number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha) == 'string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool == 'true' or $bool == 'false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) != 'bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}';\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type == lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type == both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light + 1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
      "line": {
        "start": 789,
        "end": 875
      }
    },
    "group": [
      "mixins"
    ],
    "parameter": [
      {
        "type": "String",
        "name": "name",
        "description": "the name of the color"
      },
      {
        "type": "Color",
        "name": "color",
        "description": "the color to generate variations for"
      },
      {
        "type": "String",
        "name": "type",
        "description": "the type of variation to generate"
      },
      {
        "type": "Number",
        "name": "number",
        "description": "the number of variations to generate"
      },
      {
        "type": "String",
        "name": "amount",
        "description": "the amount to vary the color by"
      },
      {
        "type": "Boolean",
        "name": "alpha",
        "description": "whether to generate alpha variations"
      }
    ],
    "output": "css variables for different shades of the source color",
    "access": "public",
    "require": [
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      }
    ],
    "throw": [
      "The shades mixin requires a string for the $name argument.",
      "The shades mixin requires a color for the $color argument.",
      "The shades mixin requires a string of ",
      "The shades mixin requires a number for the $number argument.",
      "The shades mixin requires a boolean value for the $alpha argument. Received: #{$bool}"
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Generates flex utility classes\n",
    "commentRange": {
      "start": 924,
      "end": 927
    },
    "context": {
      "type": "mixin",
      "name": "flex-util",
      "code": "\n\t& {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: flex-start;\n\t\tflex-wrap: wrap;\n\n\t\t&#{class(center)} {\n\t\t\tjustify-content: center;\n\t\t}\n\n\t\t&#{class(end)} {\n\t\t\tjustify-content: flex-end;\n\t\t}\n\n\t\t&#{class(between)} {\n\t\t\tjustify-content: space-between;\n\t\t}\n\n\t\t&#{class(around)} {\n\t\t\tjustify-content: space-around;\n\t\t}\n\n\t\t&#{class(even)} {\n\t\t\tjustify-content: space-evenly;\n\t\t}\n\t}\n",
      "line": {
        "start": 928,
        "end": 955
      }
    },
    "group": [
      "mixins"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "function",
        "name": "class"
      }
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Selector for all headers\n",
    "commentRange": {
      "start": 957,
      "end": 960
    },
    "context": {
      "type": "mixin",
      "name": "headers",
      "code": "\n\t@for $i from 1 through 6 {\n\t\th#{$i},\n\t\t#{class(h#{$i})\n\t}\n\n\t\t{\n\t\t@content;\n\t}\n}\n",
      "line": {
        "start": 961,
        "end": 971
      }
    },
    "group": [
      "mixins"
    ],
    "access": "public",
    "content": "",
    "require": [
      {
        "type": "function",
        "name": "class"
      }
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Background clip text\n",
    "commentRange": {
      "start": 974,
      "end": 977
    },
    "context": {
      "type": "mixin",
      "name": "background-clip",
      "code": "\n\tcolor: $color;\n\n\t@supports (-webkit-background-clip: text) and (-webkit-text-fill-color: transparent) {\n\t\tbackground: $color;\n\t\t@content;\n\t\tbackground-clip: text;\n\t\t-webkit-background-clip: text;\n\t\t-webkit-text-fill-color: transparent;\n\t}\n",
      "line": {
        "start": 978,
        "end": 988
      }
    },
    "group": [
      "mixins"
    ],
    "access": "public",
    "content": "",
    "require": [],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Background Styles\n",
    "commentRange": {
      "start": 10,
      "end": 10
    },
    "context": {
      "type": "css",
      "name": "#{class(bg)}",
      "value": "display: block;\n\topacity: 0;\n\theight: 0;\n\twidth: 0;\n\tz-index: -1;\n\ttransform: none !important;",
      "line": {
        "start": 11,
        "end": 39
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_backgrounds.scss",
      "name": "_backgrounds.scss"
    }
  },
  {
    "description": "All buttons\n",
    "commentRange": {
      "start": 10,
      "end": 10
    },
    "context": {
      "type": "css",
      "name": "#{class(btn)},\n#{class(btn-group)},\n#{class(btn-icon)},\n#{class(pill)}",
      "value": "flex-shrink: 0;",
      "line": {
        "start": 14,
        "end": 244
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_buttons.scss",
      "name": "_buttons.scss"
    }
  },
  {
    "description": "Fix for browsers injecting their own tel links\n",
    "commentRange": {
      "start": 89,
      "end": 89
    },
    "context": {
      "type": "css",
      "name": "a",
      "value": "color: inherit;\n\t\n\t\t&:hover {\n\t\t\tcolor: inherit;\n\t\t}\n\t\n\t\ti {\n\t\t\tdisplay: none;\n\t\t}",
      "line": {
        "start": 90,
        "end": 244
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_buttons.scss",
      "name": "_buttons.scss"
    }
  },
  {
    "description": "Default buttons\n",
    "commentRange": {
      "start": 103,
      "end": 103
    },
    "context": {
      "type": "css",
      "name": "#{class(btn)}",
      "value": "padding: $btn-padding-v $btn-padding-h + $btn-padding-adjust;\n\n\t/// Icon buttons\n\t&-icon {\n\t\tdisplay: block;\n\t\ttext-align: center;\n\t\tbackground: none;\n\t\tborder: none;\n\n\t\t@include states(hover, focus, active) {\n\t\t\ti {\n\t\t\t\tcolor: css-var($btn-back-alt-hover);\n\t\t\t}\n\t\t}\n\n\t\t@include break(xs) {\n\t\t\tdisplay: inline-block;\n\t\t}\n\n\t\t&#{class(lg)} {\n\t\t\ti {\n\t\t\t\tfont-size: 4rem;\n\t\t\t}\n\t\t}\n\n\t\ti {\n\t\t\tmargin: 0 !important;\n\t\t\tcolor: css-var($btn-border);\n\t\t\tfont-size: 1.5rem;\n\n\t\t\t&::before {\n\t\t\t\ttransition: color css-var(delay-default);\n\t\t\t}\n\t\t}\n\t}\n\n\t/// Button groups\n\t&-group {\n\t\tdisplay: flex;\n\t\twidth: fit-content;\n\t\tmargin: auto;\n\t\tpadding: 0;\n\t\ttransition: all css-var(delay-default);\n\n\t\tbutton {\n\t\t\twidth: 100%;\n\t\t\tborder: none;\n\t\t\tcolor: inherit;\n\t\t\tbackground: transparent;\n\n\t\t\t&:first-child {\n\t\t\t\tpadding: $btn-padding-v 0 $btn-padding-v $btn-padding-h;\n\t\t\t\tborder-top-left-radius: $pill-radius;\n\t\t\t\tborder-bottom-left-radius: $pill-radius;\n\t\t\t}\n\n\t\t\t&:last-child {\n\t\t\t\tpadding: $btn-padding-v $btn-padding-h $btn-padding-v 0;\n\t\t\t\tborder-top-right-radius: $pill-radius;\n\t\t\t\tborder-bottom-right-radius: $pill-radius;\n\t\t\t}\n\n\t\t\t&[disabled] {\n\t\t\t\tpointer-events: none;\n\t\t\t}\n\n\t\t\t@include states(hover, focus, active) {\n\t\t\t\tbackground: css-var(brand-5);\n\t\t\t}\n\t\t}\n\t}",
      "line": {
        "start": 104,
        "end": 244
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_buttons.scss",
      "name": "_buttons.scss"
    }
  },
  {
    "description": "Icon buttons\n",
    "commentRange": {
      "start": 107,
      "end": 107
    },
    "context": {
      "type": "css",
      "name": "&-icon",
      "value": "display: block;\n\t\ttext-align: center;\n\t\tbackground: none;\n\t\tborder: none;\n\n\t\t@include states(hover, focus, active) {\n\t\t\ti {\n\t\t\t\tcolor: css-var($btn-back-alt-hover);\n\t\t\t}\n\t\t}\n\n\t\t@include break(xs) {\n\t\t\tdisplay: inline-block;\n\t\t}\n\n\t\t&#{class(lg)} {\n\t\t\ti {\n\t\t\t\tfont-size: 4rem;\n\t\t\t}\n\t\t}\n\n\t\ti {\n\t\t\tmargin: 0 !important;\n\t\t\tcolor: css-var($btn-border);\n\t\t\tfont-size: 1.5rem;\n\n\t\t\t&::before {\n\t\t\t\ttransition: color css-var(delay-default);\n\t\t\t}\n\t\t}",
      "line": {
        "start": 108,
        "end": 244
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_buttons.scss",
      "name": "_buttons.scss"
    }
  },
  {
    "description": "Button groups\n",
    "commentRange": {
      "start": 141,
      "end": 141
    },
    "context": {
      "type": "css",
      "name": "&-group",
      "value": "display: flex;\n\t\twidth: fit-content;\n\t\tmargin: auto;\n\t\tpadding: 0;\n\t\ttransition: all css-var(delay-default);\n\n\t\tbutton {\n\t\t\twidth: 100%;\n\t\t\tborder: none;\n\t\t\tcolor: inherit;\n\t\t\tbackground: transparent;\n\n\t\t\t&:first-child {\n\t\t\t\tpadding: $btn-padding-v 0 $btn-padding-v $btn-padding-h;\n\t\t\t\tborder-top-left-radius: $pill-radius;\n\t\t\t\tborder-bottom-left-radius: $pill-radius;\n\t\t\t}\n\n\t\t\t&:last-child {\n\t\t\t\tpadding: $btn-padding-v $btn-padding-h $btn-padding-v 0;\n\t\t\t\tborder-top-right-radius: $pill-radius;\n\t\t\t\tborder-bottom-right-radius: $pill-radius;\n\t\t\t}\n\n\t\t\t&[disabled] {\n\t\t\t\tpointer-events: none;\n\t\t\t}\n\n\t\t\t@include states(hover, focus, active) {\n\t\t\t\tbackground: css-var(brand-5);\n\t\t\t}\n\t\t}",
      "line": {
        "start": 142,
        "end": 244
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_buttons.scss",
      "name": "_buttons.scss"
    }
  },
  {
    "description": "Select button\n",
    "commentRange": {
      "start": 178,
      "end": 178
    },
    "context": {
      "type": "css",
      "name": "#{class(select)}",
      "value": "@extend #{class(btn)};",
      "line": {
        "start": 179,
        "end": 244
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_buttons.scss",
      "name": "_buttons.scss"
    }
  },
  {
    "description": "Pill buttons\n",
    "commentRange": {
      "start": 183,
      "end": 183
    },
    "context": {
      "type": "css",
      "name": "#{class(pill)}",
      "value": "padding: 0 $btn-padding-adjust;\n    line-height: 2;",
      "line": {
        "start": 184,
        "end": 244
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_buttons.scss",
      "name": "_buttons.scss"
    }
  },
  {
    "description": "A list of buttons\n",
    "commentRange": {
      "start": 202,
      "end": 202
    },
    "context": {
      "type": "css",
      "name": "#{class(buttons)}",
      "value": "display: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tflex-wrap: wrap;\n\tgap: 1rem;\n\n\t@include break(xs) {\n\t\tjustify-content: flex-start;\n\t}\n\n    & > * {\n        width: 100%;\n\n        #{class(btn)}, #{class(pill)} {\n            display: block;\n        }\n\n        @include break(xs) {\n            width: auto;\n        }\n    }\n\n    #{class(buttons)} {\n        #{class(pill)} {\n            width: 100%;\n        }\n    }",
      "line": {
        "start": 203,
        "end": 244
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_buttons.scss",
      "name": "_buttons.scss"
    }
  },
  {
    "description": "Card Styles\n",
    "commentRange": {
      "start": 11,
      "end": 11
    },
    "context": {
      "type": "css",
      "name": "#{class(card)}",
      "value": "display: flex;\n\tflex-direction: column;\n\theight: 100%;\n\tmax-width: 100%;\n\tmargin: 0;\n\tborder-radius: $card-radius;\n\tbox-shadow: $card-shadow-size #{css-var($card-shadow-color)};\n\toverflow: hidden;\n\n\t@include break(sm) {\n\t\tflex-direction: row;\n\n\t\t&#{class(reverse)} {\n\t\t\tflex-direction: row-reverse;\n\t\t}\n\t}\n\n\t&#{class(center)} {\n\t\t\n\t\t@mixin title {\n\t\t\t#{class(title)} {\n\t\t\t\tjustify-content: center;\n\t\t\t\ttext-align: center;\n\n\t\t\t\t& > div {\n\t\t\t\t\twidth: auto;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@mixin content {\n\t\t\t#{class(content)} {\n\t\t\t\t& > * {\n\t\t\t\t\ttext-align: center;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t@mixin buttons {\n\t\t\t#{class(buttons)} {\n\t\t\t\tjustify-content: center;\n\t\t\t}\n\t\t}\n\n\t\t@include title;\n\t\t@include content;\n\t\t@include buttons;\n\n\t\t&-title {\n\t\t\t@include title;\n\t\t}\n\n\t\t&-content {\n\t\t\t@include content;\n\t\t}\n\n\t\t&-btns {\n\t\t\t@include buttons;\n\t\t}\n\t}\n\n\t&#{class(stagger)} {\n\t\tposition: relative;\n\t\twidth: 100%;\n\n\t\t@include break(sm) {\n\t\t\tflex-direction: row;\n\t\t\tborder-radius: 0;\n\t\t\tbox-shadow: none;\n\t\t\toverflow: visible;\n\n\t\t\t& > #{class(image)},\n\t\t\t& > #{prefix(image-widget)} #{class(image)} {\n\t\t\t\twidth: calc(50% + $card-padding);\n\t\t\t\theight: fit-content;\n\t\t\t\tmargin-right: $card-padding * -2;\n\t\t\t\tborder-radius: $card-radius;\n\t\t\t\tbox-shadow: $card-shadow-size #{css-var($card-shadow-color)};\n\n\t\t\t\timg {\n\t\t\t\t\theight: 100%;\n\t\t\t\t\tobject-fit: cover;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t& > #{class(content)} {\n\t\t\t\twidth: calc(50% + $card-padding);\n\t\t\t\theight: fit-content;\n\t\t\t\tmargin-top: $card-padding * 2;\n\t\t\t\tborder-radius: $card-radius;\n\t\t\t\tbox-shadow: $card-shadow-size #{css-var($card-shadow-color)};\n\t\t\t}\n\t\t}\n\n\t\t&#{class(reverse)} {\n\t\t\t@include break(sm) {\n\t\t\t\tflex-direction: row-reverse;\n\n\t\t\t\t& > #{class(image)},\n\t\t\t\t& > #{prefix(image-widget)} #{class(image)} {\n\t\t\t\t\tmargin-right: 0;\n\t\t\t\t\tmargin-left: $card-padding * -2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t& > #{class(image)}:only-child,\n\t& > #{prefix(image-widget)}:only-child #{class(image)} {\n\t\twidth: 100%;\n\t}\n\n\t& > #{class(image)},\n\t& > #{prefix(image-widget)} #{class(image)} {\n\t\toverflow: hidden;\n\n\t\t@include break(sm) {\n\t\t\twidth: 50%;\n\t\t}\n\n\t\t&+#{class(content)} {\n\t\t\t@include break(sm) {\n\t\t\t\twidth: 50%;\n\t\t\t}\n\t\t}\n\t}\n\n\t#{class(content)} {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tgap: math.div($grid-gap, 2);\n\t\tposition: relative;\n\t\tpadding: $card-padding;\n\t\tbackground: css-var($card-bg-color);\n\t\twidth: 100%;\n\t\toverflow: hidden;\n\n\t\t& > * {\n\t\t\tmargin-top: 0;\n\t\t\tmargin-bottom: 0;\n\t\t}\n\t}\n\n\t#{class(title)} {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\theight: fit-content;\n\t\tgap: $card-padding;\n\t\ttext-align: center;\n\n\t\t@include break(xs) {\n\t\t\tflex-direction: row;\n\t\t\ttext-align: left;\n\t\t}\n\n\t\t&:only-child {\n\t\t\theight: 100%;\n\t\t}\n\n\t\t& > #{class(image)},\n\t\t& > #{prefix(image-widget)} #{class(image)} {\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tmax-width: $card-logo-size;\n\t\t\tmax-height: $card-logo-size;\n\n\t\t\t&#{class(large)} {\n\t\t\t\tmax-width: $card-logo-size * 2;\n\t\t\t\tmax-height: $card-logo-size * 2;\n\t\t\t}\n\n\t\t\timg {\n\t\t\t\tdisplay: block;\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 100%;\n\t\t\t\tobject-fit: contain;\n\t\t\t}\n\t\t}\n\n\t\ti {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\t\t\tmin-width: $card-logo-size;\n\t\t\tmax-width: $card-logo-size;\n\t\t\tmargin: 0;\n\t\t\tfont-size: calc($card-logo-size - 1rem);\n\t\t}\n\n\t\t& > div {\n\t\t\twidth: 100%;\n\n\t\t\t& > * {\n\t\t\t\tmargin: 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t#{class(date)} {\n\t\ttext-align: center;\n\n\t\t@include break(xs) {\n\t\t\ttext-align: left;\n\t\t}\n\t}",
      "line": {
        "start": 12,
        "end": 260
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_cards.scss",
      "name": "_cards.scss"
    }
  },
  {
    "description": "Embed Styles\n",
    "commentRange": {
      "start": 10,
      "end": 10
    },
    "context": {
      "type": "css",
      "name": "#{class(embed)}",
      "value": "&-bg {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: flex-end;\n\t\tjustify-content: center;\n\t\tgap: 2rem;\n\t\tposition: relative;\n\n\t\t@include break(lg) {\n\t\t\tflex-direction: row;\n\t\t\tmin-height: 100vh;\n\t\t\tmargin-bottom: 15%;\n\t\t}\n\n\t\t& > section {\n\t\t\t@include break(lg) {\n\t\t\t\tmargin-bottom: -15%;\n\t\t\t}\n\t\t}\n\n\t\tiframe, video {\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tobject-fit: cover;\n\t\t\tpointer-events: none;\n\n\t\t\t@include break(lg) {\n\t\t\t\tposition: absolute;\n\t\t\t\tleft: -1rem;\n\t\t\t\twidth: 100vw;\n\t\t\t\tborder: none;\n\t\t\t\tpadding: 0;\n\t\t\t}\n\n\t\t\t& + * {\n\t\t\t\t#{class(grid)} {\n\t\t\t\t\t@include break(lg) {\n\t\t\t\t\t\tmargin-bottom: -15%;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t&#{class(overflow)} {\n\t\t\toverflow: hidden;\n\t\t\tmargin-bottom: 0;\n\n\t\t\t& > section {\n\t\t\t\t@include break(lg) {\n\t\t\t\t\tmargin-bottom: 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tiframe, video {\n\t\t\t\ttop: -10%;\n\t\t\t\tleft: -10%;\n\t\t\t\twidth: 120%;\n\t\t\t\theight: 120%;\n\t\t\t}\n\t\t}\n\t}",
      "line": {
        "start": 11,
        "end": 76
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_embed.scss",
      "name": "_embed.scss"
    }
  },
  {
    "description": "Footer Styles\n",
    "commentRange": {
      "start": 10,
      "end": 10
    },
    "context": {
      "type": "css",
      "name": "app-footer",
      "value": "display: flex;\n    flex-direction: column;\n\n    &::before {\n        content: '';\n        display: flex;\n        flex-grow: 1;\n        height: 100%;\n        background: css-var(trans);\n    }",
      "line": {
        "start": 11,
        "end": 147
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_footer.scss",
      "name": "_footer.scss"
    }
  },
  {
    "description": "Footer styles\n",
    "commentRange": {
      "start": 24,
      "end": 24
    },
    "context": {
      "type": "css",
      "name": "#{class(footer)}",
      "value": "display: flex;\n\tflex-direction: column;\n\tmax-width: 100%;\n    background: css-var($footer-back);\n\ttransition: transform 300ms;\n\tz-index: 999;\n\toverflow: hidden;\n\n    @if ($footer-shadow) {\n        box-shadow: $footer-shadow css-var($footer-back);\n    }\n\n\t&#{class(hide)} {\n\t\tdisplay: flex;\n\t\ttransform: translateY(100%);\n\t}\n\n\t* {\n\t\tmax-width: 100%;\n\t}\n\n\tp {\n\t\tmargin: 0;\n\t}\n\n\t&-content {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tflex-wrap: wrap;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\n\t\t@include break(sm) {\n\t\t\tflex-direction: row;\n\t\t\talign-items: flex-start;\n\t\t}\n\n\t\t&>p {\n\t\t\tmargin: 0 auto;\n\t\t\ttext-align: center;\n\n\t\t\ta {\n\t\t\t\tdisplay: block;\n\t\t\t}\n\t\t}\n\n\t\t[label=\"Footer\"] {\n\t\t\twidth: 100%;\n\t\t\tmargin: auto;\n\n\t\t\t@include break(sm) {\n\t\t\t\twidth: auto;\n\t\t\t}\n\n\t\t\t&>ul {\n\t\t\t\tflex-direction: column;\n\t\t\t\tflex-wrap: wrap;\n\t\t\t\tjustify-content: space-around;\n\t\t\t\ttext-align: center;\n\n\t\t\t\t@include break(xs) {\n\t\t\t\t\tflex-direction: row;\n\t\t\t\t}\n\n\t\t\t\t&>ul {\n\t\t\t\t\tli:last-child {\n\t\t\t\t\t\t#{class(pill)} {\n\t\t\t\t\t\t\tmargin-bottom: 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t#{class(pill)} {\n\t\t\t\tmargin-bottom: 0.5rem;\n\t\t\t}\n\t\t}\n\t}\n\n\t&-heel {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\t\tpadding: 0.4rem 1rem;\n        color: css-var($footer-heel-fore);\n\t\tbackground: css-var($footer-heel-back);\n\t\ttext-align: center;\n\n\t\t@include break(sm) {\n\t\t\tflex-direction: row;\n\t\t}\n\t}\n\n\t&-message {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tflex-wrap: wrap;\n\n\t\t@include break(xs) {\n\t\t\tflex-wrap: nowrap;\n\t\t}\n\n\t\t&>#{class(pill)} {\n\t\t\tmargin: 0 0.25rem;\n\t\t}\n\n\t\t&>* {\n\t\t\tmargin: 0 0.5rem;\n\n\t\t\t&:first-child {\n\t\t\t\tmargin-left: 0;\n\t\t\t}\n\n\t\t\t&:last-child {\n\t\t\t\tmargin-right: 0;\n\t\t\t}\n\t\t}\n\t}",
      "line": {
        "start": 25,
        "end": 147
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_footer.scss",
      "name": "_footer.scss"
    }
  },
  {
    "description": "CSS Variables\n",
    "commentRange": {
      "start": 11,
      "end": 11
    },
    "context": {
      "type": "css",
      "name": ":root",
      "value": "@include css-var(header-height, $header-height);\n\t@include css-var-ref(header-back, $header-back);\n\t@include css-var-ref(header-fore, $header-fore);",
      "line": {
        "start": 12,
        "end": 513
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_header.scss",
      "name": "_header.scss"
    }
  },
  {
    "description": "Header Styles\n",
    "commentRange": {
      "start": 18,
      "end": 18
    },
    "context": {
      "type": "css",
      "name": "#{id(header)}",
      "value": "position: relative;\n\twidth: 100%;\n\tcolor: css-var(header-fore);\n\tbackground-color: css-var(header-back);\n\tz-index: 10000;\n\theight: css-var(header-height);\n\n\t&#{class(right)} {\n\t\t#{id(wrapper)} {\n\t\t\ttop: css-var(header-height);\n\t\t\tright: -100%;\n\t\t\tleft: unset;\n\n\t\t\t&#{class(open)} {\n\t\t\t\tright: 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t&#{class(bottom)} {\n\t\t#{id(wrapper)} {\n\t\t\ttop: unset;\n\t\t\tbottom: -100%;\n\n\t\t\t&#{class(open)} {\n\t\t\t\ttop: unset;\n\t\t\t\tbottom: 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t&#{class(left)} {\n\t\t#{id(wrapper)} {\n\t\t\ttop: css-var(header-height);\n\t\t\tleft: -100%;\n\n\t\t\t&#{class(open)} {\n\t\t\t\tleft: 0;\n\t\t\t}\n\t\t}\n\t}\n\n\t&#{class(expand)} {\n\t\t@include break($header-break) {\n\t\t\t#{class(buttons)} {\n\t\t\t\twidth: auto;\n\n\t\t\t\t#{controls(wrapper)} {\n\t\t\t\t\tdisplay: none;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t#{id(wrapper)} {\n\t\t\t\tposition: static;\n\t\t\t\tdisplay: flex !important;\n\t\t\t\theight: 100%;\n\t\t\t\tpadding: 0;\n\t\t\t\tz-index: 0;\n\n\t\t\t\t&,\n\t\t\t\t& nav {\n\t\t\t\t\theight: $header-height;\n\t\t\t\t\tbackground: css-var(glow-0) !important;\n\t\t\t\t\toverflow: visible;\n\t\t\t\t}\n\n\t\t\t\tnav {\n\t\t\t\t\tborder: none;\n\n\t\t\t\t\t&::before {\n\t\t\t\t\t\tdisplay: none;\n\t\t\t\t\t}\n\n\t\t\t\t\t&>ul {\n\t\t\t\t\t\tflex-direction: row;\n\t\t\t\t\t\tjustify-content: flex-end;\n\t\t\t\t\t\tflex-wrap: nowrap;\n\t\t\t\t\t\toverflow: visible;\n\n\t\t\t\t\t\t&>li {\n\t\t\t\t\t\t\tposition: relative;\n\t\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\t\tmax-width: 200px;\n\t\t\t\t\t\t\ttext-align: center;\n\n\t\t\t\t\t\t\tbutton,\n\t\t\t\t\t\t\tul {\n\t\t\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\t\t\tmax-width: 200px;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbutton {\n\t\t\t\t\t\t\t\tfont-size: 1.5rem;\n\n\t\t\t\t\t\t\t\t$arrow-size: 1rem;\n\t\t\t\t\t\t\t\t$arrow-margin: 1rem;\n\t\t\t\t\t\t\t\tpadding-right: $arrow-margin + $arrow-size;\n\n\t\t\t\t\t\t\t\t&::after {\n\t\t\t\t\t\t\t\t\tcontent: '\\f054';\n\t\t\t\t\t\t\t\t\tfont-family: 'Font Awesome 6 Pro';\n\t\t\t\t\t\t\t\t\tfont-weight: 900;\n\t\t\t\t\t\t\t\t\tfont-size: $arrow-size;\n\t\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\t\ttop: 50%;\n\t\t\t\t\t\t\t\t\ttransform: translateY(-50%);\n\t\t\t\t\t\t\t\t\tmargin-left: $arrow-margin;\n\t\t\t\t\t\t\t\t\ttransition: transform css-var(delay-default);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t@include states(hover, focus, expanded) {\n\t\t\t\t\t\t\t\t\t&::after {\n\t\t\t\t\t\t\t\t\t\ttransform: translateY(-50%) rotate(90deg);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tul {\n\t\t\t\t\t\t\t\tposition: absolute;\n\t\t\t\t\t\t\t\ttop: 100%;\n\t\t\t\t\t\t\t\tleft: 50%;\n\t\t\t\t\t\t\t\ttransform: translateX(-50%);\n\t\t\t\t\t\t\t\tbackground-color: css-var($header-back);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ta {\n\t\t\t\t\tfont-size: 1.25rem;\n\t\t\t\t}\n\n\t\t\t\ta, button {\n\t\t\t\t\tmargin: 0.25rem 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t&#{class(spread)} {\n\t\t@include break-max($header-break) {\n\t\t\t#{id(wrapper)} {\n\t\t\t\t#{$has-controls} {\n\t\t\t\t\tdisplay: none;\n\t\n\t\t\t\t\t&+ul {\n\t\t\t\t\t\tdisplay: flex !important;\n\t\t\t\t\t\theight: auto !important;\n\t\t\t\t\t\tmargin-bottom: 3rem !important;\n\n\t\t\t\t\t\t&>li:first-child {\n\t\t\t\t\t\t\tfont-size: 1.5em;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t&#{neg(class(expand))} {\n\t\t\t#{id(wrapper)} {\n\t\t\t\t#{$has-controls} {\n\t\t\t\t\tdisplay: none;\n\t\n\t\t\t\t\t&+ul {\n\t\t\t\t\t\tdisplay: flex !important;\n\t\t\t\t\t\theight: auto !important;\n\t\t\t\t\t\tmargin-bottom: 3rem;\n\n\t\t\t\t\t\t&>li:first-child {\n\t\t\t\t\t\t\tfont-size: 1.5em;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t&#{class(tray)} {\n\t\t#{id(wrapper)} {\n\t\t\tgap: 1.5rem;\n\t\t\tfont-size: 0.5em;\n\n\t\t\t@include break(sm) {\n\t\t\t\tmax-width: 512px;\n\t\t\t}\n\n\t\t\ta, button {\n\t\t\t\tpadding: 0.75rem;\n\t\t\t\tmargin: 0.25rem 0;\n\t\t\t\tline-height: 1;\n\t\t\t\tfont-size: 4em;\n\t\t\t}\n\n\t\t\tnav {\n\t\t\t\t&>ul {\n\t\t\t\t\tflex-direction: column;\n\t\t\t\t\tflex-wrap: nowrap;\n\t\t\t\t\tjustify-content: flex-start;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tli {\n\t\t\t\t\twidth: 100%;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t&#{neg(class(border))} {\n\t\t&::before {\n\t\t\tcontent: '';\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\twidth: 100%;\n\t\t\tbackground: css-var(header-back);\n\t\t}\n\t}\n\n\t&::before {\n\t\theight: css-var(header-height);\n\t\tz-index: -1;\n\t}\n\n\tnav {\n\t\t&>ul {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t}\n\t}\n\n\tul {\n\t\tlist-style: none;\n\t\tmargin-top: 0;\n\t\tmargin-bottom: 1rem;\n\t\tpadding-left: 0;\n\t}\n\n\ta,\n\tbutton {\n\t\twidth: 100%;\n\t\tmargin: 0;\n\t\tborder: 0;\n\t\tcolor: css-var($header-link-fore);\n\t\tbackground: css-var(trans);\n\t\ttransition-property: color, background;\n\t\ttransition-duration: css-var(delay-default);\n\n\t\t@include states(hover) {\n\t\t\tcolor: css-var($header-link-fore-hover);\n\t\t}\n\t}\n\n\th1 {\n\t\tdisplay: flex;\n\t\twhite-space: nowrap;\n\t\talign-items: center;\n\t\tgap: 1rem;\n\t\tmargin: 0;\n\t}\n\n\t#{id(navbar)} {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: space-between;\n\t\theight: 100%;\n\t}\n\n\t#{class(logo)} {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\twidth: auto;\n\t\ttext-decoration: none;\n\n\t\timg {\n\t\t\tmax-height: css-var(header-height);\n\t\t\twidth: auto;\n\t\t}\n\t}\n\n\t#{controls(wrapper)} {\n\t\tdisplay: inline-block;\n\t\tposition: relative;\n\t\tpadding: $menu-btn-padding;\n\t\twidth: $menu-bar-width + $menu-btn-padding * 2;\n\t\theight: $menu-btn-height + $menu-btn-padding * 2;\n\t\tborder-radius: $border-radius;\n\t\tbackground: css-var($menu-btn-color);\n\t\tbox-shadow: $menu-btn-shadow-size css-var($menu-btn-shadow-color);\n\t\tz-index: 1000;\n\n\t\t@include states(hover) {\n\t\t\tbackground: css-var($header-link-back-hover);\n\n\t\t\t#{class(menu-icon)} {\n\n\t\t\t\t&,\n\t\t\t\t&::before,\n\t\t\t\t&::after {\n\t\t\t\t\tbackground-color: css-var($header-link-fore-hover);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t#{class(menu-icon)} {\n\t\t\ttop: 50%;\n\t\t\tleft: 50%;\n\t\t\ttransform: translate(-50%, -50%);\n\n\t\t\t&,\n\t\t\t&::before,\n\t\t\t&::after {\n\t\t\t\tcontent: '';\n\t\t\t\tdisplay: block;\n\t\t\t\tposition: absolute;\n\t\t\t\tleft: 50%;\n\t\t\t\theight: $menu-bar-height;\n\t\t\t\twidth: $menu-bar-width;\n\t\t\t\tbackground-color: css-var($menu-bar-color);\n\t\t\t\ttransition: delay(default);\n\t\t\t}\n\n\t\t\t&::before {\n\t\t\t\ttransform: translate(-50%, -200%);\n\t\t\t}\n\n\t\t\t&::after {\n\t\t\t\ttransform: translate(-50%, 200%);\n\t\t\t}\n\t\t}\n\n\t\t&#{expanded(true)} {\n\t\t\t#{class(menu-icon)} {\n\t\t\t\tbackground: transparent;\n\n\t\t\t\t&::before {\n\t\t\t\t\ttransform: translate(-50%, 0) rotate(45deg);\n\t\t\t\t}\n\n\t\t\t\t&::after {\n\t\t\t\t\ttransform: translate(-50%, 0) rotate(-45deg);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#{id(wrapper)} {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tposition: fixed;\n\t\ttop: -100%;\n\t\tleft: 0;\n\t\twidth: 100%;\n\t\theight: calc(100vh - css-var(header-height));\n\t\theight: calc(100dvh - css-var(header-height));\n\t\tz-index: -2;\n\t\tbackground: css-var(header-back);\n\t\ttransition-duration: css-var(delay-default);\n\t\ttransition-property: top, right, bottom, left;\n\t\toverflow: auto;\n\n\t\t&#{class(open)} {\n\t\t\ttop: css-var(header-height);\n\t\t}\n\n\t\tnav {\n\t\t\theight: calc(100vh - css-var(header-height));\n\t\t\theight: calc(100dvh - css-var(header-height));\n\t\t\toverflow: auto;\n\t\t\tbackground: css-var(back);\n\n\t\t\t@include break(xl) {\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\tjustify-content: center;\n\t\t\t}\n\n\t\t\t&> :last-child {\n\t\t\t\tmargin-bottom: 0;\n\t\t\t}\n\n\t\t\t&>ul {\n\t\t\t\theight: 100%;\n\t\t\t\toverflow: auto;\n\n\t\t\t\t@include break(md) {\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tflex-direction: row;\n\t\t\t\t\tflex-wrap: wrap;\n\t\t\t\t\talign-items: center;\n\t\t\t\t\tjustify-content: space-evenly;\n\t\t\t\t\twidth: 100%;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ta {\n\t\t\tdisplay: flex;\n\t\t}\n\n\t\ta,\n\t\tbutton {\n\t\t\t//display: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\t\t\tfont-family: $font-secondary, $font-backups !important;\n\t\t\tfont-size: 3em;\n\t\t\tpadding: 0.5rem;\n\t\t\tmargin: 0.5rem 0;\n\t\t\ttext-align: center;\n\t\t\tborder-radius: $header-link-border-radius;\n\n\t\t\t@include break(xs) {\n\t\t\t\tpadding: 1rem 1.5rem;\n\n\t\t\t\ti {\n\t\t\t\t\tfont-size: 0.5em;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t@include states(hover, focus) {\n\t\t\t\tbackground-color: css-var($header-link-back-hover);\n\t\t\t\tcolor: css-var($header-link-fore-hover);\n\t\t\t}\n\n\t\t\t@include states(active) {\n\t\t\t\ttext-decoration: underline;\n\t\t\t}\n\t\t}\n\n\t\tul {\n\t\t\tli {\n\t\t\t\t&:last-child {\n\t\t\t\t\tmargin-bottom: 0;\n\n\t\t\t\t\tul {\n\t\t\t\t\t\tmargin-bottom: 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t#{class(buttons)} {\n\t\tflex-wrap: nowrap;\n\t\tflex-shrink: 0;\n\t\tjustify-content: flex-end;\n\t\tmargin-left: auto;\n\n\t\ta,\n\t\tbutton {\n\t\t\t&#{neg(controls(wrapper))} {\n\t\t\t\tdisplay: flex;\n\t\t\t\twidth: auto;\n\t\t\t\tpadding: 0.5rem;\n\t\t\t}\n\t\t}\n\t}\n\n\t#{class(dropdown)} {\n\t\tbackground: css-var(header-back);\n\n\t\tbutton {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\t\t\tmin-width: css-var(header-height);\n\t\t\theight: css-var(header-height);\n\t\t\tpadding: calc(css-var(header-height) / 2);\n\t\t}\n\n\t\tli {\n\t\t\tpadding: calc(css-var(header-height) / 2);\n\t\t\tline-height: 1;\n\t\t\tcursor: pointer;\n\t\t}\n\t}\n\n\t#{$has-controls + neg(controls(wrapper))} {\n\t\t&+ul {\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\theight: 0;\n\t\t\toverflow: hidden;\n\t\t\ttransition: height css-var(delay-default), margin css-var(delay-default);\n\t\t}\n\n\t\t&#{$has-expanded + neg(expanded(true))} {\n\t\t\t&+ul {\n\t\t\t\tmargin: 0;\n\t\t\t}\n\t\t}\n\t}",
      "line": {
        "start": 19,
        "end": 513
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_header.scss",
      "name": "_header.scss"
    }
  },
  {
    "description": "A basic image\n",
    "commentRange": {
      "start": 10,
      "end": 10
    },
    "context": {
      "type": "css",
      "name": "#{class(image)}",
      "value": "/// A placeholder image warning\n    &#{class(error)} {\n        &::after {\n            content: '❌ Image failed to load. This is a placeholder.';\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            width: 100%;\n            padding: 0 $image-shadow-size $image-shadow-size $image-shadow-size;\n            background: css-var($shadow-color);\n            box-shadow: 0 0 $image-shadow-size $image-shadow-size css-var($shadow-color);\n            text-align: center;\n        }\n    }\n\n    img {\n        display: block;\n    }",
      "line": {
        "start": 11,
        "end": 38
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_image.scss",
      "name": "_image.scss"
    }
  },
  {
    "description": "A placeholder image warning\n",
    "commentRange": {
      "start": 13,
      "end": 13
    },
    "context": {
      "type": "css",
      "name": "&#{class(error)}",
      "value": "&::after {\n            content: '❌ Image failed to load. This is a placeholder.';\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            width: 100%;\n            padding: 0 $image-shadow-size $image-shadow-size $image-shadow-size;\n            background: css-var($shadow-color);\n            box-shadow: 0 0 $image-shadow-size $image-shadow-size css-var($shadow-color);\n            text-align: center;\n        }",
      "line": {
        "start": 14,
        "end": 38
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_image.scss",
      "name": "_image.scss"
    }
  },
  {
    "description": "Banner images\n",
    "commentRange": {
      "start": 33,
      "end": 33
    },
    "context": {
      "type": "css",
      "name": "#{class(banner)}",
      "value": "position: relative;\n\twidth: 100%;",
      "line": {
        "start": 34,
        "end": 38
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_image.scss",
      "name": "_image.scss"
    }
  },
  {
    "description": "Recaptcha styles\n",
    "commentRange": {
      "start": 7,
      "end": 7
    },
    "context": {
      "type": "css",
      "name": "/// Hide the badge\n/// Requires this on form:\n/// \n/// This site is protected by reCAPTCHA and the Google\n/// <a href=\"https://policies.google.com/privacy\">Privacy Policy</a> and\n/// <a href=\"https://policies.google.com/terms\">Terms of Service</a> apply.\n.grecaptcha-badge",
      "value": "visibility: hidden;",
      "line": {
        "start": 15,
        "end": 18
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_recaptcha.scss",
      "name": "_recaptcha.scss"
    }
  },
  {
    "description": "Hide the badge\nRequires this on form:\n\nThis site is protected by reCAPTCHA and the Google\n<a href=\"https://policies.google.com/privacy\">Privacy Policy</a> and\n<a href=\"https://policies.google.com/terms\">Terms of Service</a> apply.\n",
    "commentRange": {
      "start": 9,
      "end": 14
    },
    "context": {
      "type": "css",
      "name": ".grecaptcha-badge",
      "value": "visibility: hidden;",
      "line": {
        "start": 15,
        "end": 18
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_recaptcha.scss",
      "name": "_recaptcha.scss"
    }
  },
  {
    "description": "Table\n",
    "commentRange": {
      "start": 10,
      "end": 10
    },
    "context": {
      "type": "css",
      "name": "#{class(table)}",
      "value": "&-wrap {\n\t\tmax-height: 50vh;\n\t\toverflow-y: auto;\n\t}\n\n\t&.mat-mdc-table {\n\t\tthead {\n\t\t\tbackground: css-var(back);\n\t\t}\n\t}\n\n    #{class(actions)} {\n        display: flex;\n        align-items: center;\n        justify-content: flex-end;\n\t\tgap: 1rem;\n    }",
      "line": {
        "start": 11,
        "end": 29
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\components\\_tables.scss",
      "name": "_tables.scss"
    }
  },
  {
    "description": "CSS variables\n",
    "commentRange": {
      "start": 24,
      "end": 24
    },
    "context": {
      "type": "css",
      "name": ":root",
      "value": "@include css-var(delay-instant, delay(instant));\n    @include css-var(delay-fast, delay(fast));\n    @include css-var(delay-med-fast, delay(med-fast));\n    @include css-var(delay-default, delay(default));\n    @include css-var(delay-med-slow, delay(med-slow));\n    @include css-var(delay-slow, delay(slow));",
      "line": {
        "start": 25,
        "end": 80
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\global\\_animations.scss",
      "name": "_animations.scss"
    }
  },
  {
    "description": "Aspect Ratios\n",
    "commentRange": {
      "start": 11,
      "end": 11
    },
    "context": {
      "type": "css",
      "name": "#{class(aspect)}",
      "value": "position: relative;\n\theight: 0;\n\toverflow: hidden;\n\n\t&#{class(spotify)} {\n\t\t&-playlist {\n\t\t\tpadding-top: 152px !important;\n\n\t\t\t@include break(xs) {\n\t\t\t\tpadding-top: 125% !important;\n\t\t\t}\n\n\t\t\t@include break(sm) {\n\t\t\t\tpadding-top: 75% !important;\n\t\t\t}\n\n\t\t\t@include break(md) {\n\t\t\t\tpadding-top: 56.25% !important;\n\t\t\t}\n\t\t}\n\n\t\t&-podcast {\n\t\t\tpadding-top: 352px !important;\n\t\t}\n\t}\n\n\tiframe, video {\n\t\tposition: absolute !important;\n\t\ttop: 50% !important;\n\t\tleft: 50% !important;\n\t\ttransform: translate(-50%, -50%) !important;\n\t\twidth: 100% !important;\n\t\theight: 100% !important;\n\t}",
      "line": {
        "start": 12,
        "end": 55
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\global\\_aspect.scss",
      "name": "_aspect.scss"
    }
  },
  {
    "description": "Flex mixins\n",
    "commentRange": {
      "start": 4,
      "end": 4
    },
    "context": {
      "type": "css",
      "name": "#{class(flex)}",
      "value": "@include flex-util();",
      "line": {
        "start": 5,
        "end": 8
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\global\\_flex.scss",
      "name": "_flex.scss"
    }
  },
  {
    "description": "Global styles\n",
    "commentRange": {
      "start": 4,
      "end": 4
    },
    "context": {
      "type": "css",
      "name": "*",
      "value": "&,\n\t&::before,\n\t&::after {\n\t\tbox-sizing: border-box;\n\t}",
      "line": {
        "start": 5,
        "end": 200
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\global\\_global.scss",
      "name": "_global.scss"
    }
  },
  {
    "description": "Grid mixins\n",
    "commentRange": {
      "start": 4,
      "end": 4
    },
    "context": {
      "type": "mixin",
      "name": "grid-2",
      "code": "\n\t@include break(sm) {\n\t\tgrid-template-columns: repeat(2, 1fr);\n\t\t\n\t\t& > :last-child:nth-child(odd) {\n\t\t\t#{class(card)} {\n\t\t\t\tgrid-column: span 2;\n\t\t\t\twidth: 50%;\n\t\t\t\tmargin-left: auto;\n\t\t\t\tmargin-right: auto;\n\t\t\t}\n\t\t}\n\t}\n",
      "line": {
        "start": 5,
        "end": 18
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "break"
      },
      {
        "type": "function",
        "name": "class"
      }
    ],
    "file": {
      "path": "imports\\global\\_grid.scss",
      "name": "_grid.scss"
    }
  },
  {
    "description": "Grid styles\n",
    "commentRange": {
      "start": 116,
      "end": 116
    },
    "context": {
      "type": "css",
      "name": "#{class(grid)}",
      "value": "display: grid;\n\tgrid-template-columns: 1fr;\n\tgap: $grid-gap;\n\twidth: 100%;\n\tmargin-top: $grid-gap;\n\tmargin-bottom: $grid-gap;\n\n\t&#{class('2')} {\n\t\t@include grid-2;\n\t}\n\n\t&#{class('3')} {\n\t\t@include grid-2;\n\t\t@include grid-3;\n\t}\n\n\t&#{class('4')} {\n\t\t@include grid-2;\n\t\t@include grid-3;\n\t\t@include grid-4;\n\t}\n\n\t#{class(portrait)} {\n\t\tgrid-row: span 2;\n\t}",
      "line": {
        "start": 117,
        "end": 145
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\global\\_grid.scss",
      "name": "_grid.scss"
    }
  },
  {
    "description": "Icon styles\n",
    "commentRange": {
      "start": 1,
      "end": 1
    },
    "context": {
      "type": "css",
      "name": "i",
      "value": "&.fa-envelope {\n        transform: translateY(5%);\n    }",
      "line": {
        "start": 2,
        "end": 7
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\global\\_icons.scss",
      "name": "_icons.scss"
    }
  },
  {
    "description": "Input Styles\n",
    "commentRange": {
      "start": 10,
      "end": 10
    },
    "context": {
      "type": "css",
      "name": "input,\ntextarea,\nselect",
      "value": "width: 100%;\n\tpadding: 0.5rem;\n\tborder: 2px solid #ccc;\n\tborder-radius: $border-radius;",
      "line": {
        "start": 13,
        "end": 135
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\global\\_inputs.scss",
      "name": "_inputs.scss"
    }
  },
  {
    "description": "Checkbox Styles\n",
    "commentRange": {
      "start": 30,
      "end": 30
    },
    "context": {
      "type": "css",
      "name": "#{class(toggle)}",
      "value": "display: flex;\n\talign-items: center;\n\tgap: 1rem;\n\t\n\tdiv {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\tgap: 0.5rem;\n\n\t\t@include break(xs) {\n\t\t\tflex-direction: row;\n\t\t}\n\t}",
      "line": {
        "start": 31,
        "end": 135
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\global\\_inputs.scss",
      "name": "_inputs.scss"
    }
  },
  {
    "description": "Dropdown Styles\n",
    "commentRange": {
      "start": 99,
      "end": 99
    },
    "context": {
      "type": "css",
      "name": "#{class(dropdown)}",
      "value": "display: flex;\n\talign-items: center;\n\tflex-wrap: wrap;\n\t\n\t@include break(xs) {\n\t\tgap: 1rem;\n\t}",
      "line": {
        "start": 100,
        "end": 135
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\global\\_inputs.scss",
      "name": "_inputs.scss"
    }
  },
  {
    "description": "Label Styles\n",
    "commentRange": {
      "start": 110,
      "end": 110
    },
    "context": {
      "type": "css",
      "name": "#{class(error)}",
      "value": "line-height: 0;\n\tfilter: opacity(0);\n\ttransition: filter 0.3s;\n\n\t&#{class(show)} {\n\t\tfilter: opacity(1);\n\t}",
      "line": {
        "start": 111,
        "end": 135
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\global\\_inputs.scss",
      "name": "_inputs.scss"
    }
  },
  {
    "description": "Array Input Styles\n",
    "commentRange": {
      "start": 121,
      "end": 121
    },
    "context": {
      "type": "css",
      "name": "#{class(array-item)}",
      "value": "display: flex;\n\talign-items: center;\n\tjustify-content: flex-end;\n\tgap: 0.5rem;\n\n\t:first-child {\n\t\tflex-grow: 1;\n\t}\n\n\t:last-child {\n\t\tflex-shrink: 0;\n\t}",
      "line": {
        "start": 122,
        "end": 135
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\global\\_inputs.scss",
      "name": "_inputs.scss"
    }
  },
  {
    "description": "Structure styles\n",
    "commentRange": {
      "start": 5,
      "end": 5
    },
    "context": {
      "type": "css",
      "name": "#{class(pad)}",
      "value": "@include box-util(padding, 1rem);\n\t@include break-util(padding, 0.5rem, 0);\n\n\t@include break(xs) {\n\t\t@include break-util(padding, 1rem, 0);\n\t}",
      "line": {
        "start": 6,
        "end": 75
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\global\\_structure.scss",
      "name": "_structure.scss"
    }
  },
  {
    "description": "Text Styles\n",
    "commentRange": {
      "start": 10,
      "end": 10
    },
    "context": {
      "type": "css",
      "name": "html, body",
      "value": "font-family: $font-primary, $font-backups;\n    font-size: 1rem;\n\n    @include break(md) {\n        font-size: 1.125rem;\n    }",
      "line": {
        "start": 11,
        "end": 63
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\global\\_text.scss",
      "name": "_text.scss"
    }
  },
  {
    "description": "Texture Mixin\n",
    "commentRange": {
      "start": 11,
      "end": 11
    },
    "context": {
      "type": "mixin",
      "name": "mint-texture",
      "code": "\n    position: relative;\n    \n    &::before, &::after {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        pointer-events: none;\n    }\n\n    &::before {\n        opacity: $texture-opacity;\n        background-image: url($texture-bg);\n        background-size: $texture-bg-size;\n        background-position: $texture-bg-position;\n        @if ($texture-blend) {\n            mix-blend-mode: $texture-blend;\n        }\n        @if ($texture-filter) {\n            filter: $texture-filter;\n        }\n    }\n\n    &::after {\n        opacity: $texture-alt-opacity;\n        background-size: $texture-alt-bg-size;\n        background-position: $texture-alt-bg-position;\n        mask-image: $texture-alt-mask;\n        @if ($texture-alt-blend) {\n            mix-blend-mode: $texture-alt-blend;\n        }\n        z-index: 1;\n    }\n\n    & > * {\n        position: relative;\n        z-index: 10;\n    }\n",
      "line": {
        "start": 12,
        "end": 53
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "imports\\global\\_texture.scss",
      "name": "_texture.scss"
    }
  },
  {
    "description": "Border Mixin\n",
    "commentRange": {
      "start": 55,
      "end": 55
    },
    "context": {
      "type": "mixin",
      "name": "mint-border",
      "code": "\n\tpadding: math.div($texture-padding, 2) + $texture-border-width;\n\tborder-image-source: url($texture-border-image);\n\tborder-image-slice: $texture-border-slice;\n\tborder-image-repeat: #{$texture-border-repeat};\n\tborder-image-width: $texture-border-width;\n\tborder-style: $texture-border-type;\n\n    @include break(sm) {\n        padding: $texture-padding + $texture-border-width;\n    }\n",
      "line": {
        "start": 56,
        "end": 67
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "break"
      },
      {
        "type": "variable",
        "name": "texture-padding"
      },
      {
        "type": "variable",
        "name": "texture-padding"
      }
    ],
    "file": {
      "path": "imports\\global\\_texture.scss",
      "name": "_texture.scss"
    }
  },
  {
    "description": "Texture Styles\n",
    "commentRange": {
      "start": 69,
      "end": 69
    },
    "context": {
      "type": "css",
      "name": "#{class(texture)}",
      "value": "@if $texture-bg {\n        @include mint-texture();\n    }",
      "line": {
        "start": 70,
        "end": 113
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\global\\_texture.scss",
      "name": "_texture.scss"
    }
  },
  {
    "description": "Border Styles\n",
    "commentRange": {
      "start": 76,
      "end": 76
    },
    "context": {
      "type": "css",
      "name": "#{class(border)}",
      "value": "@extend #{class(texture)};\n    @if $texture-border-image {\n        @include mint-border();\n    } @else if $texture-border-color {\n        border: $texture-border-width $texture-border-type css-var($texture-border-color);\n    }",
      "line": {
        "start": 77,
        "end": 113
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\global\\_texture.scss",
      "name": "_texture.scss"
    }
  },
  {
    "description": "Global theme\n",
    "commentRange": {
      "start": 10,
      "end": 10
    },
    "context": {
      "type": "css",
      "name": ":root",
      "value": "/// Global Colors\n\t/// Brands\n\t@include css-var(bitcoin, $bitcoin);\n\t@include css-var(ethereum, $ethereum);\n\t@include css-var(venmo, $venmo);\n\t@include css-var(facebook, $facebook);\n\t@include css-var(twitter, $twitter);\n\t@include css-var(youtube, $youtube);\n\t@include css-var(apple, $apple);\n\t@include css-var(apple-music, $apple-music);\n\t@include css-var(spotify, $spotify);\n\t@include css-var(soundcloud, $soundcloud);\n\t@include css-var(bandcamp, $bandcamp);\n\t@include css-var(amazon-0, $amazon-0);\n\t@include css-var(amazon-1, $amazon-1);\n\t@include css-var(napster-0, $napster-0);\n\t@include css-var(napster-1, $napster-1);\n\t@include css-var(google-play-0, $google-play-0);\n\t@include css-var(google-play-1, $google-play-1);\n\t@include css-var(google-play-2, $google-play-2);\n\t@include css-var(instagram-0, $instagram-0);\n\t@include css-var(instagram-1, $instagram-1);\n\t@include css-var(instagram-2, $instagram-2);\n\t@include css-var(instagram-3, $instagram-3);\n\t@include css-var(instagram-4, $instagram-4);\n\t@include css-var(instagram-5, $instagram-5);\n\t@include css-var(instagram-6, $instagram-6);\n\n\t/// Application Colors\n\t@include shades('black', $black, lighten);\n\t@include shades('white', $white, darken);\n\t@include shades(glow, $trans-light, darken, 7, 10%, true);\n\t@include shades(shadow, $trans-dark, darken, 7, 10%, true);\n\n\t@include shades(brand, $brand);\n\t@include shades(accent, $accent);\n\t@include shades(success, $success);\n\t@include shades(danger, $danger);\n\t@include shades(warning, $warning);\n\t@include shades(info, $info);",
      "line": {
        "start": 11,
        "end": 174
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\global\\_themes.scss",
      "name": "_themes.scss"
    }
  },
  {
    "description": "Light theme\n",
    "commentRange": {
      "start": 54,
      "end": 54
    },
    "context": {
      "type": "mixin",
      "name": "light-theme",
      "code": "\n\t@include css-var(fore, $fore);\n\t@include css-var(back, $back);\n",
      "line": {
        "start": 55,
        "end": 58
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      }
    ],
    "file": {
      "path": "imports\\global\\_themes.scss",
      "name": "_themes.scss"
    }
  },
  {
    "description": "Dark theme\n",
    "commentRange": {
      "start": 60,
      "end": 60
    },
    "context": {
      "type": "mixin",
      "name": "dark-theme",
      "code": "\n\t@include css-var(fore, $back);\n\t@include css-var(back, $fore);\n",
      "line": {
        "start": 61,
        "end": 64
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      }
    ],
    "file": {
      "path": "imports\\global\\_themes.scss",
      "name": "_themes.scss"
    }
  },
  {
    "description": "Apply themes\n",
    "commentRange": {
      "start": 66,
      "end": 66
    },
    "context": {
      "type": "css",
      "name": ":root",
      "value": "@if ($theme-default ==light) {\n\t\t@include light-theme;\n\t}\n\n\t@else {\n\t\t@include dark-theme;\n\t}",
      "line": {
        "start": 67,
        "end": 174
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\global\\_themes.scss",
      "name": "_themes.scss"
    }
  },
  {
    "description": "https://codepen.io/thomasrye/pen/VaRoYv\n",
    "commentRange": {
      "start": 114,
      "end": 114
    },
    "context": {
      "type": "css",
      "name": "background: radial-gradient(circle at 30% 107%, #fdf497 0%, #fdf497 5%, #fd5949 45%, #d6249f 60%, #285AEB 90%);\n\t\t\t}\n\t\t}\n\t}\n\n\t@include states(hover, focus, active)",
      "value": "color: css-var($link-color-hover);\n\n\t\t.fa-facebook,\n\t\t.fa-square-facebook {\n\t\t\tcolor: css-var(facebook);\n\t\t}\n\n\t\t.fa-instagram {\n\t\t\t&::after {\n\t\t\t\topacity: 1;\n\t\t\t}\n\t\t}\n\n\t\t.fa-twitter {\n\t\t\tcolor: css-var(twitter);\n\t\t}\n\n\t\t.fa-youtube {\n\t\t\tcolor: css-var(youtube);\n\t\t}\n\n\t\t.fa-spotify {\n\t\t\tcolor: css-var(spotify);\n\t\t}\n\n\t\t.fa-apple {\n\t\t\tcolor: css-var(apple-music);\n\t\t}\n\n\t\t.fa-soundcloud {\n\t\t\tcolor: css-var(soundcloud);\n\t\t}\n\n\t\t.fa-bandcamp {\n\t\t\tcolor: css-var(bandcamp);\n\t\t}\n\n\t\t.fa-github {\n\t\t\tcolor: css-var(white-1);\n\t\t}\n\n\t\t.fa-bitcoin {\n\t\t\tcolor: css-var(bitcoin);\n\t\t}\n\n\t\t.fa-ethereum {\n\t\t\tcolor: css-var(ethereum);\n\t\t}\n\n\t\t.fa-vimeo {\n\t\t\tcolor: css-var(venmo);\n\t\t}",
      "line": {
        "start": 120,
        "end": 174
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\global\\_themes.scss",
      "name": "_themes.scss"
    }
  },
  {
    "description": "Amplify Styles\n",
    "commentRange": {
      "start": 12,
      "end": 12
    },
    "context": {
      "type": "css",
      "name": ":root:root",
      "value": "@include css-var-ref(--amplify-colors-background-error, $amp-background-error);\n\t@include css-var-ref(--amplify-colors-border-primary, $amp-border-primary);\n\t@include css-var-ref(--amplify-colors-border-focus, $amp-border-focus);\n\t@include css-var-ref(--amplify-colors-font-hover, $amp-font-hover);\n\t@include css-var-ref(--amplify-colors-font-interactive, $amp-font-interactive);\n\t@include css-var-ref(--amplify-colors-font-primary, $amp-font-primary);\n\t@include css-var-ref(--amplify-components-fieldcontrol-color, --amplify-colors-font-primary);\n\t@include css-var-ref(--amplify-colors-font-secondary, $amp-font-secondary);\n\t@include css-var-ref(--amplify-colors-font-error, $amp-font-error);\n\t@include css-var-ref(--amplify-colors-font-warning, $amp-font-warning);\n\t@include css-var-ref(--amplify-colors-font-success, $amp-font-success);\n\t@include css-var-ref(--amplify-colors-font-info, $amp-font-info);\n\n\t@include css-var(--amplify-border-widths-small, $amp-border-width);\n\n\t[data-amplify-authenticator] {\n\t\t[data-amplify-container] {\n\t\t\t@extend #{class(card)};\n\t\n\t\t\t[data-amplify-router] {\n\t\t\t\t@extend #{class(content)};\n\t\t\t\tborder: none;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t[amplify-button] {\n\t\t@extend #{class(btn)};\n\t\tmargin: auto;\n\t}\n\t\n\t.amplify-icon {\n\t\tdisplay: block;\n\t}",
      "line": {
        "start": 13,
        "end": 49
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\overrides\\_amplify.scss",
      "name": "_amplify.scss"
    }
  },
  {
    "description": "FullCalendar Styles\n",
    "commentRange": {
      "start": 10,
      "end": 10
    },
    "context": {
      "type": "css",
      "name": ".fc",
      "value": "--fc-page-bg-color: #{css-var(brand-6)};\n\t.fc-toolbar {\n\t\tflex-wrap: wrap;\n\t\tjustify-content: space-around;\n\t\tgap: 1rem;\n\n\t\t&-title {\n\t\t\t@include break-max(sm) {\n\t\t\t\tfont-size: 1.25rem;\n\t\t\t}\n\t\t}\n\t}\n\t.fc-timegrid {\n\t\t&-divider {\n\t\t\tpadding: 0;\n\t\t}\n\t\t&-slot-minor {\n\t\t\tborder-top-style: groove;\n\t\t}\n\t}\n\t.fc-list-table {\n\t\t--fc-list-event-hover-bg-color: #{css-var(brand-4)};\n\n\t\t@include break-max(sm) {\n\t\t\tword-break: normal;\n\t\t}\n\n\t\t.fc-list-event-time {\n\t\t\t@include break-max(xs) {\n\t\t\t\twhite-space: normal;\n\n\t\t\t}\n\t\t}\n\t}",
      "line": {
        "start": 11,
        "end": 47
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\overrides\\_full-calendar.scss",
      "name": "_full-calendar.scss"
    }
  },
  {
    "description": "Material Styles\n",
    "commentRange": {
      "start": 10,
      "end": 10
    },
    "context": {
      "type": "css",
      "name": ":root:root",
      "value": "@include css-var(--mat-table-background-color, $mat-table-bg);\n\t@include css-var(--mat-paginator-container-background-color, $mat-table-bg);\n\t@include css-var(--mat-table-row-item-label-text-color, $mat-table-fore);\n\t@include css-var(--mat-table-header-headline-color, $mat-table-fore);\n\t@include css-var(--mat-table-header-subheadline-color, $mat-table-fore);\n\t@include css-var(--mat-paginator-container-text-color, $mat-table-fore);",
      "line": {
        "start": 11,
        "end": 25
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\overrides\\_material.scss",
      "name": "_material.scss"
    }
  },
  {
    "description": "Variables\n",
    "commentRange": {
      "start": 10,
      "end": 10
    },
    "context": {
      "type": "variable",
      "name": "arrows-offset",
      "value": "1rem",
      "scope": "private",
      "line": {
        "start": 11,
        "end": 11
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\overrides\\_swiper.scss",
      "name": "_swiper.scss"
    }
  },
  {
    "description": "Swiper Styles\n",
    "commentRange": {
      "start": 14,
      "end": 14
    },
    "context": {
      "type": "css",
      "name": ":root",
      "value": "@include css-var-ref(--swiper-navigation-color, fore);\n\t@include css-var-ref(--swiper-pagination-color, brand);\n\t@include css-var(--swiper-navigation-size, $arrows-size);\n\n\t.swiper {\n\t\tmax-width: 100%;\n\n\t\t@include break(xs) {\n\t\t\t@include css-var(--swiper-navigation-sides-offset, $arrows-offset);\n\t\t}\n\n\t\t&-slide {\n\t\t\t@include break(xs) {\n\t\t\t\tpadding: $arrows-offset + $arrows-size;\n\t\t\t}\n\t\t}\n\t\n\t\t&-button {\n\t\t\t&-prev,\n\t\t\t&-next {\n\t\t\t\t&::after {\n\t\t\t\t\tfont-family: \"Font Awesome 6 Pro\";\n\t\t\t\t\tfont-weight: 900;\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t&-prev {\n\t\t\t\t&::after {\n\t\t\t\t\tcontent: '\\f053';\n\t\t\t\t}\n\t\t\t}\n\t\n\t\t\t&-next {\n\t\t\t\t&::after {\n\t\t\t\t\tcontent: '\\f054';\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}",
      "line": {
        "start": 15,
        "end": 56
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\overrides\\_swiper.scss",
      "name": "_swiper.scss"
    }
  },
  {
    "description": "TODO: Document this\n",
    "commentRange": {
      "start": 877,
      "end": 877
    },
    "context": {
      "type": "mixin",
      "name": "states",
      "code": "\n\t@each $state in $states {\n\t\t@if (type-of($state) != 'string') {\n\t\t\t@error 'The states mixin requires a string for each state argument.';\n\t\t}\n\t}\n\n\t@if (index($states, 'hover') != null) {\n\t\t&:hover {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'focus') != null) {\n\t\t&:focus-visible {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'active') != null) {\n\n\t\t&:active,\n\t\t&#{class(active)} {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'visited') != null) {\n\t\t&:visited {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'disabled') != null) {\n\t\t&:disabled {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'expanded') != null) {\n\t\t&#{expanded(true)} {\n\t\t\t@content;\n\t\t}\n\t}\n",
      "line": {
        "start": 878,
        "end": 922
      }
    },
    "access": "public",
    "content": "",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "function",
        "name": "expanded"
      }
    ],
    "throw": [
      "The states mixin requires a string for each state argument."
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Mixins\nRegister an animation\n",
    "commentRange": {
      "start": 1003,
      "end": 1004
    },
    "context": {
      "type": "mixin",
      "name": "animation",
      "code": "\n\t$animations: map-merge($animations, (&: map-merge(map.get($animations, &), $animation)));\n\t$this: map.get($animations, &);\n\t$animation: '';\n\n\t& {\n\t\t@each $item in $this {\n\t\t\t@if (list.index($this, $item) != 1) {\n\t\t\t\t$animation: #{$animation},\n\t\t\t\t;\n\t\t\t}\n\n\t\t\t$animation: #{$animation}#{$item};\n\t\t}\n\n\t\tanimation: $animation;\n\n\t\t@each $name,\n\t\t$items in $animations {\n\t\t\t&#{class($name)} {\n\t\t\t\tanimation: $animation;\n\t\t\t}\n\t\t}\n\t}\n",
      "line": {
        "start": 1005,
        "end": 1029
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "function",
        "name": "class"
      }
    ],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Register a transition\n",
    "commentRange": {
      "start": 1031,
      "end": 1031
    },
    "context": {
      "type": "mixin",
      "name": "transition",
      "code": "\n\t$transitions: map-merge($transitions, ($name: $transition));\n",
      "line": {
        "start": 1032,
        "end": 1034
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Global Colors\n",
    "commentRange": {
      "start": 7,
      "end": 7
    },
    "context": {
      "type": "variable",
      "name": "bitcoin",
      "value": "#FF9900",
      "scope": "private",
      "line": {
        "start": 8,
        "end": 8
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Application Colors\n",
    "commentRange": {
      "start": 34,
      "end": 34
    },
    "context": {
      "type": "variable",
      "name": "black",
      "value": "#000",
      "scope": "default",
      "line": {
        "start": 35,
        "end": 35
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Fonts\n",
    "commentRange": {
      "start": 51,
      "end": 51
    },
    "context": {
      "type": "variable",
      "name": "font-primary",
      "value": "sans-serif",
      "scope": "default",
      "line": {
        "start": 52,
        "end": 52
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Font Sizes\n",
    "commentRange": {
      "start": 58,
      "end": 58
    },
    "context": {
      "type": "variable",
      "name": "font-size-tiny",
      "value": "(\n    h1: 15vw,\n    h2: 12vw,\n    h3: 10vw,\n    h4: 8vw,\n    h5: 7vw,\n    h6: 6vw,\n    p: 1rem,\n)",
      "scope": "default",
      "line": {
        "start": 59,
        "end": 67
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Structure\n",
    "commentRange": {
      "start": 87,
      "end": 87
    },
    "context": {
      "type": "variable",
      "name": "grid-gap",
      "value": "2rem",
      "scope": "default",
      "line": {
        "start": 88,
        "end": 88
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Outline width\n",
    "commentRange": {
      "start": 90,
      "end": 90
    },
    "context": {
      "type": "variable",
      "name": "border-width",
      "value": "0.125rem",
      "scope": "default",
      "line": {
        "start": 91,
        "end": 91
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Root\n",
    "commentRange": {
      "start": 94,
      "end": 94
    },
    "context": {
      "type": "variable",
      "name": "root-bg-image",
      "value": "null",
      "scope": "default",
      "line": {
        "start": 95,
        "end": 95
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Header\n",
    "commentRange": {
      "start": 98,
      "end": 98
    },
    "context": {
      "type": "variable",
      "name": "header-height",
      "value": "4rem",
      "scope": "default",
      "line": {
        "start": 99,
        "end": 99
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Footer\n",
    "commentRange": {
      "start": 103,
      "end": 103
    },
    "context": {
      "type": "variable",
      "name": "footer-back",
      "value": "back",
      "scope": "default",
      "line": {
        "start": 104,
        "end": 104
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Default Shadows\n",
    "commentRange": {
      "start": 108,
      "end": 108
    },
    "context": {
      "type": "variable",
      "name": "shadow-color",
      "value": "glow-2",
      "scope": "default",
      "line": {
        "start": 109,
        "end": 109
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Images\n",
    "commentRange": {
      "start": 112,
      "end": 112
    },
    "context": {
      "type": "variable",
      "name": "image-shadow-size",
      "value": "0.5rem",
      "scope": "default",
      "line": {
        "start": 113,
        "end": 113
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Buttons\n",
    "commentRange": {
      "start": 115,
      "end": 115
    },
    "context": {
      "type": "variable",
      "name": "link-color",
      "value": "brand-4",
      "scope": "default",
      "line": {
        "start": 116,
        "end": 116
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Cards\n",
    "commentRange": {
      "start": 142,
      "end": 142
    },
    "context": {
      "type": "variable",
      "name": "card-bg-color",
      "value": "back",
      "scope": "default",
      "line": {
        "start": 143,
        "end": 143
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Texture\n",
    "commentRange": {
      "start": 150,
      "end": 150
    },
    "context": {
      "type": "variable",
      "name": "texture-padding",
      "value": "1rem",
      "scope": "default",
      "line": {
        "start": 151,
        "end": 151
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    },
    "usedBy": [
      {
        "description": "Border Mixin\n",
        "context": {
          "type": "mixin",
          "name": "mint-border",
          "code": "\n\tpadding: math.div($texture-padding, 2) + $texture-border-width;\n\tborder-image-source: url($texture-border-image);\n\tborder-image-slice: $texture-border-slice;\n\tborder-image-repeat: #{$texture-border-repeat};\n\tborder-image-width: $texture-border-width;\n\tborder-style: $texture-border-type;\n\n    @include break(sm) {\n        padding: $texture-padding + $texture-border-width;\n    }\n",
          "line": {
            "start": 56,
            "end": 67
          }
        }
      },
      {
        "description": "Border Mixin\n",
        "context": {
          "type": "mixin",
          "name": "mint-border",
          "code": "\n\tpadding: math.div($texture-padding, 2) + $texture-border-width;\n\tborder-image-source: url($texture-border-image);\n\tborder-image-slice: $texture-border-slice;\n\tborder-image-repeat: #{$texture-border-repeat};\n\tborder-image-width: $texture-border-width;\n\tborder-style: $texture-border-type;\n\n    @include break(sm) {\n        padding: $texture-padding + $texture-border-width;\n    }\n",
          "line": {
            "start": 56,
            "end": 67
          }
        }
      }
    ]
  },
  {
    "description": "Backgrounds\n",
    "commentRange": {
      "start": 175,
      "end": 175
    },
    "context": {
      "type": "variable",
      "name": "back-bg-blur",
      "value": "0.15vw",
      "scope": "default",
      "line": {
        "start": 176,
        "end": 176
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Material\n",
    "commentRange": {
      "start": 178,
      "end": 178
    },
    "context": {
      "type": "variable",
      "name": "mat-table-bg",
      "value": "back",
      "scope": "default",
      "line": {
        "start": 179,
        "end": 179
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Amplify\n",
    "commentRange": {
      "start": 183,
      "end": 183
    },
    "context": {
      "type": "variable",
      "name": "amp-font-primary",
      "value": "fore",
      "scope": "default",
      "line": {
        "start": 184,
        "end": 184
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Themes\n",
    "commentRange": {
      "start": 192,
      "end": 192
    },
    "context": {
      "type": "variable",
      "name": "theme-default",
      "value": "light",
      "scope": "default",
      "line": {
        "start": 193,
        "end": 193
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Default Theme (light)\nButtons\n",
    "commentRange": {
      "start": 195,
      "end": 196
    },
    "context": {
      "type": "variable",
      "name": "btn-back-default",
      "value": "brand-2",
      "scope": "private",
      "line": {
        "start": 197,
        "end": 197
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Header\n",
    "commentRange": {
      "start": 203,
      "end": 203
    },
    "context": {
      "type": "variable",
      "name": "header-back-default",
      "value": "brand-2",
      "scope": "private",
      "line": {
        "start": 204,
        "end": 204
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Footer\n",
    "commentRange": {
      "start": 219,
      "end": 219
    },
    "context": {
      "type": "variable",
      "name": "footer-heel-fore-default",
      "value": "back",
      "scope": "private",
      "line": {
        "start": 220,
        "end": 220
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Amplify\n",
    "commentRange": {
      "start": 223,
      "end": 223
    },
    "context": {
      "type": "variable",
      "name": "amp-border-primary-default",
      "value": "brand-5",
      "scope": "private",
      "line": {
        "start": 224,
        "end": 224
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Buttons\n",
    "commentRange": {
      "start": 241,
      "end": 241
    },
    "context": {
      "type": "variable",
      "name": "btn-back",
      "value": "if($btn-back != $btn-back-default, $btn-back, brand-5)",
      "scope": "private",
      "line": {
        "start": 242,
        "end": 242
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Header\n",
    "commentRange": {
      "start": 245,
      "end": 245
    },
    "context": {
      "type": "variable",
      "name": "header-back",
      "value": "if($header-back != $header-back-default, $header-back, brand-4)",
      "scope": "private",
      "line": {
        "start": 246,
        "end": 246
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Footer\n",
    "commentRange": {
      "start": 250,
      "end": 250
    },
    "context": {
      "type": "variable",
      "name": "footer-heel-fore",
      "value": "if($footer-heel-fore != $footer-heel-fore-default, $footer-heel-fore, fore)",
      "scope": "private",
      "line": {
        "start": 251,
        "end": 251
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Amplify\n",
    "commentRange": {
      "start": 253,
      "end": 253
    },
    "context": {
      "type": "variable",
      "name": "amp-border-primary",
      "value": "if($amp-border-primary != $amp-border-primary-default, $amp-border-primary, brand-1)",
      "scope": "private",
      "line": {
        "start": 254,
        "end": 254
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports\\util\\_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "_util.scss - Variables, Functions, and Mixins to import elsewhere\n",
    "commentRange": {
      "start": 1,
      "end": 4
    },
    "context": {
      "type": "css",
      "name": "/// Imports\n@use 'sass:color';\n@use 'sass:math';\n@use 'sass:string';\n\n/// Library name\n/// @group Variables\n/// @type String\n$lib: mint !default;\n\n/// Dash - variable name separator\n/// @group Variables\n/// @type String\n$dash: #{'-'};\n\n/// Prefix added to selectors\n/// @group Variables\n/// @type String\n$pre: #{$lib}#{$dash};\n\n/// Dot - added to classes\n/// @group Variables\n/// @type String\n$dot: #{'.'};\n\n/// Hash - added to ids\n/// @group Variables\n/// @type String\n$hash: #{'#'};\n\n/// CSS-selector for disabled elements\n/// @group Variables\n/// @type String\n$disabled: #{'[disabled]'};\n\n/// CSS-selector for elements with an aria-controls attribute\n/// @group Variables\n/// @type String\n$has-controls: #{'[aria-controls]'};\n\n/// CSS-selector for elements with an aria-expanded attribute\n/// @group Variables\n/// @type String\n$has-expanded: #{'[aria-expanded]'};\n\n/// CSS-selector for elements with an aria-hidden attribute\n/// @group Variables\n/// @type String\n$has-hidden: #{'[aria-hidden]'};\n\n/// CSS-selector for elements with an href attribute\n/// @group Variables\n/// @type String\n$has-link: #{'[href]'};\n\n/// CSS-selector for elements with a routerLink attribute\n/// @group Variables\n/// @type String\n$has-router-link: #{'[routerLink]'};\n\n/// CSS-selector for elements with an id attribute\n/// @group Variables\n/// @type String\n$has-id: #{'[id]'};\n\n/// CSS-selector for elements that aren't tabbable (i.e. tabindex is negative)\n/// @group Variables\n/// @type String\n$not-tabbable: #{'[tabindex^=\"-\"]'};\n\n/// CSS-selector for elements that are tabbable (i.e. tabindex isn't negative)\n/// @group Variables\n/// @type String\n$tabbable: #{'[tabindex]'}#{neg($not-tabbable)};\n\n/// CSS-selector for submenu buttons\n/// @group Variables\n/// @type String\n$sub-menu-buttons: #{'button'}#{$has-controls};\n\n/// CSS-selector for submenus\n/// @group Variables\n/// @type String\n$sub-menu: #{$sub-menu-buttons}#{' + ul'}#{$has-id};\n\n/// Value added to all delay variables\n/// @group Variables\n/// @type Number\n$delay-base: 0 !default;\n\n/// Value added to all delay variables\n/// @group Variables\n/// @type Number\n$delay-step: 100 !default;\n\n/// Delay variables\n/// @group Maps\n/// @prop",
      "value": "Number",
      "line": {
        "start": 103,
        "end": 1035
      }
    },
    "author": [
      "App Art Mint LLC"
    ],
    "group": [
      "util"
    ],
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Library name\n",
    "commentRange": {
      "start": 11,
      "end": 13
    },
    "context": {
      "type": "variable",
      "name": "lib",
      "value": "mint",
      "scope": "default",
      "line": {
        "start": 14,
        "end": 14
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Dash - variable name separator\n",
    "commentRange": {
      "start": 16,
      "end": 18
    },
    "context": {
      "type": "variable",
      "name": "dash",
      "value": "#{'-'}",
      "scope": "private",
      "line": {
        "start": 19,
        "end": 19
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Prefixes the provided string with two dashes and the library name if it isn't already\n",
        "context": {
          "type": "function",
          "name": "css-prefix",
          "code": "\n\t@if (type-of($base) != 'string') {\n\t\t@error 'The css-prefix function requires a string value.';\n\t}\n\n\t@while (string.index($base, $dash) == 1) {\n\t\t$base: string.slice($base, 2);\n\t}\n\n\t@return #{$dash}#{$dash}#{prefix($base)};\n",
          "line": {
            "start": 178,
            "end": 188
          }
        }
      },
      {
        "description": "Prefixes the provided string with two dashes and the library name if it isn't already\n",
        "context": {
          "type": "function",
          "name": "css-prefix",
          "code": "\n\t@if (type-of($base) != 'string') {\n\t\t@error 'The css-prefix function requires a string value.';\n\t}\n\n\t@while (string.index($base, $dash) == 1) {\n\t\t$base: string.slice($base, 2);\n\t}\n\n\t@return #{$dash}#{$dash}#{prefix($base)};\n",
          "line": {
            "start": 178,
            "end": 188
          }
        }
      },
      {
        "description": "Prefixes the provided string with two dashes and the library name if it isn't already\n",
        "context": {
          "type": "function",
          "name": "css-prefix",
          "code": "\n\t@if (type-of($base) != 'string') {\n\t\t@error 'The css-prefix function requires a string value.';\n\t}\n\n\t@while (string.index($base, $dash) == 1) {\n\t\t$base: string.slice($base, 2);\n\t}\n\n\t@return #{$dash}#{$dash}#{prefix($base)};\n",
          "line": {
            "start": 178,
            "end": 188
          }
        }
      }
    ]
  },
  {
    "description": "Prefix added to selectors\n",
    "commentRange": {
      "start": 21,
      "end": 23
    },
    "context": {
      "type": "variable",
      "name": "pre",
      "value": "#{$lib}#{$dash}",
      "scope": "private",
      "line": {
        "start": 24,
        "end": 24
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Prefixes the provided string with the library name if it isn't already\n",
        "context": {
          "type": "function",
          "name": "prefix",
          "code": "\n\t@if (type-of($base) != 'string') {\n\t\t@error 'The prefix function requires a string value.';\n\t}\n\n\t$base: string.to-lower-case($base);\n\n\t@if (string.index($base, $pre) != 1) {\n\t\t$base: #{$pre}#{$base};\n\t}\n\n\t@return $base;\n",
          "line": {
            "start": 156,
            "end": 168
          }
        }
      },
      {
        "description": "Prefixes the provided string with the library name if it isn't already\n",
        "context": {
          "type": "function",
          "name": "prefix",
          "code": "\n\t@if (type-of($base) != 'string') {\n\t\t@error 'The prefix function requires a string value.';\n\t}\n\n\t$base: string.to-lower-case($base);\n\n\t@if (string.index($base, $pre) != 1) {\n\t\t$base: #{$pre}#{$base};\n\t}\n\n\t@return $base;\n",
          "line": {
            "start": 156,
            "end": 168
          }
        }
      }
    ]
  },
  {
    "description": "Dot - added to classes\n",
    "commentRange": {
      "start": 26,
      "end": 28
    },
    "context": {
      "type": "variable",
      "name": "dot",
      "value": "#{'.'}",
      "scope": "private",
      "line": {
        "start": 29,
        "end": 29
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Creates a class selector with the library prefix\n",
        "context": {
          "type": "function",
          "name": "class",
          "code": "\n\t@if (type-of($base) != 'string') {\n\t\t@error 'The class function requires a string value.';\n\t}\n\n\t@return #{$dot}#{prefix($base)};\n",
          "line": {
            "start": 234,
            "end": 240
          }
        }
      }
    ]
  },
  {
    "description": "Hash - added to ids\n",
    "commentRange": {
      "start": 31,
      "end": 33
    },
    "context": {
      "type": "variable",
      "name": "hash",
      "value": "#{'#'}",
      "scope": "private",
      "line": {
        "start": 34,
        "end": 34
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Creates an id selector with the library prefix\n",
        "context": {
          "type": "function",
          "name": "id",
          "code": "\n\t@if (type-of($base) != 'string') {\n\t\t@error 'The id function requires a string value.';\n\t}\n\n\t@if (type-of($op) != 'string') {\n\t\t@error 'The controls function requires a string value for param 2.';\n\t}\n\n\t@if not($op == '=' or $op == '~=' or $op == '|=' or $op == '^=' or $op == '$=' or $op == '*=') {\n\t\t@error 'The controls function requires a valid attribute comparison operator for param 2.';\n\t}\n\n\t@if ($op == '=') {\n\t\t@return #{$hash}#{prefix($base)};\n\t}\n\n\t@return '[id#{$op}#{prefix($base)}]';\n",
          "line": {
            "start": 251,
            "end": 269
          }
        }
      }
    ]
  },
  {
    "description": "CSS-selector for disabled elements\n",
    "commentRange": {
      "start": 36,
      "end": 38
    },
    "context": {
      "type": "variable",
      "name": "disabled",
      "value": "#{'[disabled]'}",
      "scope": "private",
      "line": {
        "start": 39,
        "end": 39
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for elements with an aria-controls attribute\n",
    "commentRange": {
      "start": 41,
      "end": 43
    },
    "context": {
      "type": "variable",
      "name": "has-controls",
      "value": "#{'[aria-controls]'}",
      "scope": "private",
      "line": {
        "start": 44,
        "end": 44
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for elements with an aria-expanded attribute\n",
    "commentRange": {
      "start": 46,
      "end": 48
    },
    "context": {
      "type": "variable",
      "name": "has-expanded",
      "value": "#{'[aria-expanded]'}",
      "scope": "private",
      "line": {
        "start": 49,
        "end": 49
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for elements with an aria-hidden attribute\n",
    "commentRange": {
      "start": 51,
      "end": 53
    },
    "context": {
      "type": "variable",
      "name": "has-hidden",
      "value": "#{'[aria-hidden]'}",
      "scope": "private",
      "line": {
        "start": 54,
        "end": 54
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for elements with an href attribute\n",
    "commentRange": {
      "start": 56,
      "end": 58
    },
    "context": {
      "type": "variable",
      "name": "has-link",
      "value": "#{'[href]'}",
      "scope": "private",
      "line": {
        "start": 59,
        "end": 59
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for elements with a routerLink attribute\n",
    "commentRange": {
      "start": 61,
      "end": 63
    },
    "context": {
      "type": "variable",
      "name": "has-router-link",
      "value": "#{'[routerLink]'}",
      "scope": "private",
      "line": {
        "start": 64,
        "end": 64
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for elements with an id attribute\n",
    "commentRange": {
      "start": 66,
      "end": 68
    },
    "context": {
      "type": "variable",
      "name": "has-id",
      "value": "#{'[id]'}",
      "scope": "private",
      "line": {
        "start": 69,
        "end": 69
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for elements that aren't tabbable (i.e. tabindex is negative)\n",
    "commentRange": {
      "start": 71,
      "end": 73
    },
    "context": {
      "type": "variable",
      "name": "not-tabbable",
      "value": "#{'[tabindex^=\"-\"]'}",
      "scope": "private",
      "line": {
        "start": 74,
        "end": 74
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for elements that are tabbable (i.e. tabindex isn't negative)\n",
    "commentRange": {
      "start": 76,
      "end": 78
    },
    "context": {
      "type": "variable",
      "name": "tabbable",
      "value": "#{'[tabindex]'}#{neg($not-tabbable)}",
      "scope": "private",
      "line": {
        "start": 79,
        "end": 79
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for submenu buttons\n",
    "commentRange": {
      "start": 81,
      "end": 83
    },
    "context": {
      "type": "variable",
      "name": "sub-menu-buttons",
      "value": "#{'button'}#{$has-controls}",
      "scope": "private",
      "line": {
        "start": 84,
        "end": 84
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for submenus\n",
    "commentRange": {
      "start": 86,
      "end": 88
    },
    "context": {
      "type": "variable",
      "name": "sub-menu",
      "value": "#{$sub-menu-buttons}#{' + ul'}#{$has-id}",
      "scope": "private",
      "line": {
        "start": 89,
        "end": 89
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Value added to all delay variables\n",
    "commentRange": {
      "start": 91,
      "end": 93
    },
    "context": {
      "type": "variable",
      "name": "delay-base",
      "value": "0",
      "scope": "default",
      "line": {
        "start": 94,
        "end": 94
      }
    },
    "group": [
      "variables"
    ],
    "type": "Number",
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Value added to all delay variables\n",
    "commentRange": {
      "start": 96,
      "end": 98
    },
    "context": {
      "type": "variable",
      "name": "delay-step",
      "value": "100",
      "scope": "default",
      "line": {
        "start": 99,
        "end": 99
      }
    },
    "group": [
      "variables"
    ],
    "type": "Number",
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "True if Bootstrap5 is used in the project\n",
    "commentRange": {
      "start": 133,
      "end": 135
    },
    "context": {
      "type": "variable",
      "name": "bootstrap5",
      "value": "false",
      "scope": "default",
      "line": {
        "start": 136,
        "end": 136
      }
    },
    "group": [
      "variables"
    ],
    "type": "Boolean",
    "access": "public",
    "file": {
      "path": "imports\\util\\_util.scss",
      "name": "_util.scss"
    }
  }
]
