[
  {
    "description": "Prefixes the provided string with the library name if it isn't already\n",
    "commentRange": {
      "start": 144,
      "end": 151
    },
    "context": {
      "type": "function",
      "name": "prefix",
      "code": "\n\t@if (type-of($base) !='string') {\n\t\t@error 'The prefix function requires a string value.';\n\t}\n\n\t$base: string.to-lower-case($base\n\t);\n\n@if (string.index($base, $pre) !=1) {\n\t$base: $pre +$base;\n}\n\n@return $base;\n",
      "line": {
        "start": 152,
        "end": 165
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "prefix(header) // -> sun-header",
        "description": "prefix function"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "base",
        "description": "the string to be prefixed"
      }
    ],
    "return": {
      "type": "String",
      "description": "a prefixed string"
    },
    "access": "public",
    "require": [
      {
        "type": "variable",
        "name": "pre"
      },
      {
        "type": "variable",
        "name": "pre"
      }
    ],
    "throw": [
      "The prefix function requires a string value."
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Prefixes the provided string with two dashes and the library name if it isn't already\n",
        "context": {
          "type": "function",
          "name": "css-prefix",
          "code": "\n\t@if (type-of($base) !='string') {\n\t\t@error 'The css-prefix function requires a string value.';\n\t}\n\n\t@while (string.index($base, $dash)==1) {\n\t\t$base: string.slice($base, 2);\n\t}\n\n\t@return $dash +$dash +prefix($base);\n",
          "line": {
            "start": 175,
            "end": 185
          }
        }
      },
      {
        "description": "Creates a class selector with the library prefix\n",
        "context": {
          "type": "function",
          "name": "class",
          "code": "\n\t@if (type-of($base) !='string') {\n\t\t@error 'The class function requires a string value.';\n\t}\n\n\t@return $dot +prefix($base);\n",
          "line": {
            "start": 227,
            "end": 233
          }
        }
      },
      {
        "description": "Creates an id selector with the library prefix\n",
        "context": {
          "type": "function",
          "name": "id",
          "code": "\n\t@if (type-of($base) !='string') {\n\t\t@error 'The id function requires a string value.';\n\t}\n\n\t@if (type-of($op) !='string') {\n\t\t@error 'The controls function requires a string value for param 2.';\n\t}\n\n\t@if not($op =='=' or $op =='~=' or $op =='|=' or $op =='^=' or $op =='$=' or $op =='*=') {\n\t\t@error 'The controls function requires a valid attribute comparison operator for param 2.';\n\t}\n\n\t@if ($op =='=') {\n\t\t@return $hash +prefix($base);\n\t}\n\n\t@return '[id'+$op +prefix($base)+']';\n",
          "line": {
            "start": 244,
            "end": 262
          }
        }
      },
      {
        "description": "Creates an id selector with the library prefix\n",
        "context": {
          "type": "function",
          "name": "id",
          "code": "\n\t@if (type-of($base) !='string') {\n\t\t@error 'The id function requires a string value.';\n\t}\n\n\t@if (type-of($op) !='string') {\n\t\t@error 'The controls function requires a string value for param 2.';\n\t}\n\n\t@if not($op =='=' or $op =='~=' or $op =='|=' or $op =='^=' or $op =='$=' or $op =='*=') {\n\t\t@error 'The controls function requires a valid attribute comparison operator for param 2.';\n\t}\n\n\t@if ($op =='=') {\n\t\t@return $hash +prefix($base);\n\t}\n\n\t@return '[id'+$op +prefix($base)+']';\n",
          "line": {
            "start": 244,
            "end": 262
          }
        }
      },
      {
        "description": "Creates an aria-controls selector with the library prefix\n",
        "context": {
          "type": "function",
          "name": "controls",
          "code": "\n\t@if (type-of($id) !='string') {\n\t\t@error 'The controls function requires a string value for param 1.';\n\t}\n\n\t@if (type-of($op) !='string') {\n\t\t@error 'The controls function requires a string value for param 2.';\n\t}\n\n\t@if not($op =='=' or $op =='~=' or $op =='|=' or $op =='^=' or $op =='$=' or $op =='*=') {\n\t\t@error 'The controls function requires a valid attribute comparison operator for param 2.';\n\t}\n\n\t@return '[aria-controls'+$op +prefix($id)+']';\n",
          "line": {
            "start": 273,
            "end": 287
          }
        }
      }
    ]
  },
  {
    "description": "Prefixes the provided string with two dashes and the library name if it isn't already\n",
    "commentRange": {
      "start": 167,
      "end": 174
    },
    "context": {
      "type": "function",
      "name": "css-prefix",
      "code": "\n\t@if (type-of($base) !='string') {\n\t\t@error 'The css-prefix function requires a string value.';\n\t}\n\n\t@while (string.index($base, $dash)==1) {\n\t\t$base: string.slice($base, 2);\n\t}\n\n\t@return $dash +$dash +prefix($base);\n",
      "line": {
        "start": 175,
        "end": 185
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "css-prefix(background) // -> --sun-background",
        "description": "css-prefix function"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "base",
        "description": "the string to be prefixed"
      }
    ],
    "return": {
      "type": "String",
      "description": "a prefixed string"
    },
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "prefix"
      },
      {
        "type": "variable",
        "name": "dash"
      },
      {
        "type": "variable",
        "name": "dash"
      },
      {
        "type": "variable",
        "name": "dash"
      }
    ],
    "throw": [
      "The css-prefix function requires a string value."
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Creates a CSS-var call for the prefixed `$base`\n",
        "context": {
          "type": "function",
          "name": "css-var",
          "code": "\n\t@if (type-of($base) !='string') {\n\t\t@error 'The css-var function requires a string value.';\n\t}\n\n\t@return var(css-prefix($base));\n",
          "line": {
            "start": 195,
            "end": 201
          }
        }
      },
      {
        "description": "Creates a prefixed CSS var definition\n",
        "context": {
          "type": "mixin",
          "name": "css-var",
          "code": "\n\t#{css-prefix($key)}: #{$val};\n",
          "line": {
            "start": 453,
            "end": 455
          }
        }
      }
    ]
  },
  {
    "description": "Creates a CSS-var call for the prefixed `$base`\n",
    "commentRange": {
      "start": 187,
      "end": 194
    },
    "context": {
      "type": "function",
      "name": "css-var",
      "code": "\n\t@if (type-of($base) !='string') {\n\t\t@error 'The css-var function requires a string value.';\n\t}\n\n\t@return var(css-prefix($base));\n",
      "line": {
        "start": 195,
        "end": 201
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "css-var(background) // -> var(--sun-background)",
        "description": "css-var function"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "base",
        "description": "the CSS-var to create a call for"
      }
    ],
    "return": {
      "type": "String",
      "description": "a CSS-var call"
    },
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "css-prefix"
      }
    ],
    "throw": [
      "The css-var function requires a string value."
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Creates a prefixed CSS var reference\n",
        "context": {
          "type": "mixin",
          "name": "css-var-ref",
          "code": "\n\t@include css-var($key1, css-var($key2));\n",
          "line": {
            "start": 466,
            "end": 468
          }
        }
      }
    ]
  },
  {
    "description": "Negates a provided CSS-selector\n",
    "commentRange": {
      "start": 203,
      "end": 210
    },
    "context": {
      "type": "function",
      "name": "neg",
      "code": "\n\t@if (type-of($base) !='string') {\n\t\t@error 'The neg function requires a string value.';\n\t}\n\n\t@return ':not('+$base +')';\n",
      "line": {
        "start": 211,
        "end": 217
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "neg(.sun-open) // -> :not(.sun-open)",
        "description": "neg function"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "base",
        "description": "the CSS-selector to negate"
      }
    ],
    "return": {
      "type": "String",
      "description": "a negated CSS-selector"
    },
    "access": "public",
    "require": [],
    "throw": [
      "The neg function requires a string value."
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Creates a class selector with the library prefix\n",
    "commentRange": {
      "start": 219,
      "end": 226
    },
    "context": {
      "type": "function",
      "name": "class",
      "code": "\n\t@if (type-of($base) !='string') {\n\t\t@error 'The class function requires a string value.';\n\t}\n\n\t@return $dot +prefix($base);\n",
      "line": {
        "start": 227,
        "end": 233
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "class(open) // -> .sun-open",
        "description": "class function"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "base",
        "description": "the name of the class"
      }
    ],
    "return": {
      "type": "String",
      "description": "a class selector"
    },
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "prefix"
      },
      {
        "type": "variable",
        "name": "dot"
      }
    ],
    "throw": [
      "The class function requires a string value."
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Generates flex utility classes\n",
        "context": {
          "type": "mixin",
          "name": "flex-util",
          "code": "\n\t& {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: flex-start;\n\t\tflex-wrap: wrap;\n\n\t\t&#{class(center)} {\n\t\t\tjustify-content: center;\n\t\t}\n\n\t\t&#{class(end)} {\n\t\t\tjustify-content: flex-end;\n\t\t}\n\n\t\t&#{class(between)} {\n\t\t\tjustify-content: space-between;\n\t\t}\n\n\t\t&#{class(around)} {\n\t\t\tjustify-content: space-around;\n\t\t}\n\n\t\t&#{class(even)} {\n\t\t\tjustify-content: space-evenly;\n\t\t}\n\t}\n",
          "line": {
            "start": 765,
            "end": 792
          }
        }
      },
      {
        "description": "Generates flex utility classes\n",
        "context": {
          "type": "mixin",
          "name": "flex-util",
          "code": "\n\t& {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: flex-start;\n\t\tflex-wrap: wrap;\n\n\t\t&#{class(center)} {\n\t\t\tjustify-content: center;\n\t\t}\n\n\t\t&#{class(end)} {\n\t\t\tjustify-content: flex-end;\n\t\t}\n\n\t\t&#{class(between)} {\n\t\t\tjustify-content: space-between;\n\t\t}\n\n\t\t&#{class(around)} {\n\t\t\tjustify-content: space-around;\n\t\t}\n\n\t\t&#{class(even)} {\n\t\t\tjustify-content: space-evenly;\n\t\t}\n\t}\n",
          "line": {
            "start": 765,
            "end": 792
          }
        }
      },
      {
        "description": "Generates flex utility classes\n",
        "context": {
          "type": "mixin",
          "name": "flex-util",
          "code": "\n\t& {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: flex-start;\n\t\tflex-wrap: wrap;\n\n\t\t&#{class(center)} {\n\t\t\tjustify-content: center;\n\t\t}\n\n\t\t&#{class(end)} {\n\t\t\tjustify-content: flex-end;\n\t\t}\n\n\t\t&#{class(between)} {\n\t\t\tjustify-content: space-between;\n\t\t}\n\n\t\t&#{class(around)} {\n\t\t\tjustify-content: space-around;\n\t\t}\n\n\t\t&#{class(even)} {\n\t\t\tjustify-content: space-evenly;\n\t\t}\n\t}\n",
          "line": {
            "start": 765,
            "end": 792
          }
        }
      },
      {
        "description": "Generates flex utility classes\n",
        "context": {
          "type": "mixin",
          "name": "flex-util",
          "code": "\n\t& {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: flex-start;\n\t\tflex-wrap: wrap;\n\n\t\t&#{class(center)} {\n\t\t\tjustify-content: center;\n\t\t}\n\n\t\t&#{class(end)} {\n\t\t\tjustify-content: flex-end;\n\t\t}\n\n\t\t&#{class(between)} {\n\t\t\tjustify-content: space-between;\n\t\t}\n\n\t\t&#{class(around)} {\n\t\t\tjustify-content: space-around;\n\t\t}\n\n\t\t&#{class(even)} {\n\t\t\tjustify-content: space-evenly;\n\t\t}\n\t}\n",
          "line": {
            "start": 765,
            "end": 792
          }
        }
      },
      {
        "description": "Generates flex utility classes\n",
        "context": {
          "type": "mixin",
          "name": "flex-util",
          "code": "\n\t& {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: flex-start;\n\t\tflex-wrap: wrap;\n\n\t\t&#{class(center)} {\n\t\t\tjustify-content: center;\n\t\t}\n\n\t\t&#{class(end)} {\n\t\t\tjustify-content: flex-end;\n\t\t}\n\n\t\t&#{class(between)} {\n\t\t\tjustify-content: space-between;\n\t\t}\n\n\t\t&#{class(around)} {\n\t\t\tjustify-content: space-around;\n\t\t}\n\n\t\t&#{class(even)} {\n\t\t\tjustify-content: space-evenly;\n\t\t}\n\t}\n",
          "line": {
            "start": 765,
            "end": 792
          }
        }
      },
      {
        "description": "Selector for all headers\n",
        "context": {
          "type": "mixin",
          "name": "headers",
          "code": "\n\t@for $i from 1 through 6 {\n\t\th#{$i},\n\t\t#{class(h#{$i})\n\t}\n\n\t\t{\n\t\t@content;\n\t}\n}\n",
          "line": {
            "start": 798,
            "end": 808
          }
        }
      },
      {
        "description": "TODO: Document this\n",
        "context": {
          "type": "mixin",
          "name": "states",
          "code": "\n\t@each $state in $states {\n\t\t@if (type-of($state) !='string') {\n\t\t\t@error 'The states mixin requires a string for each state argument.';\n\t\t}\n\n\t\t@if not($state =='hover' or $state =='focus' or $state =='active' or $state =='visited' or $state =='disabled') {\n\t\t\t@error 'The states mixin requires a string of \"hover\", \"focus\", \"active\", \"visited\", or \"disabled\" for each state argument.';\n\t\t}\n\t}\n\n\t@if (index($states, 'hover') !=null) {\n\t\t&:hover {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'focus') !=null) {\n\t\t&:focus {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'active') !=null) {\n\n\t\t&:active,\n\t\t&#{class(active)} {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'visited') !=null) {\n\t\t&:visited {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'disabled') !=null) {\n\t\t&:disabled {\n\t\t\t@content;\n\t\t}\n\t}\n",
          "line": {
            "start": 717,
            "end": 759
          }
        }
      },
      {
        "description": "Mixins\nRegister an animation\n",
        "context": {
          "type": "mixin",
          "name": "animation",
          "code": "\n\t$animations: map-merge($animations, (&: map-merge(map.get($animations, &), $animation)));\n\t$this: map.get($animations, &);\n\t$animation: '';\n\n\t& {\n\t\t@each $item in $this {\n\t\t\t@if (list.index($this, $item) !=1) {\n\t\t\t\t$animation: #{$animation},\n\t\t\t\t;\n\t\t\t}\n\n\t\t\t$animation: #{$animation}#{$item};\n\t\t}\n\n\t\tanimation: $animation;\n\n\t\t@each $name,\n\t\t$items in $animations {\n\t\t\t&#{class($name)} {\n\t\t\t\tanimation: $animation;\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 842,
            "end": 866
          }
        }
      }
    ]
  },
  {
    "description": "Creates an id selector with the library prefix\n",
    "commentRange": {
      "start": 235,
      "end": 243
    },
    "context": {
      "type": "function",
      "name": "id",
      "code": "\n\t@if (type-of($base) !='string') {\n\t\t@error 'The id function requires a string value.';\n\t}\n\n\t@if (type-of($op) !='string') {\n\t\t@error 'The controls function requires a string value for param 2.';\n\t}\n\n\t@if not($op =='=' or $op =='~=' or $op =='|=' or $op =='^=' or $op =='$=' or $op =='*=') {\n\t\t@error 'The controls function requires a valid attribute comparison operator for param 2.';\n\t}\n\n\t@if ($op =='=') {\n\t\t@return $hash +prefix($base);\n\t}\n\n\t@return '[id'+$op +prefix($base)+']';\n",
      "line": {
        "start": 244,
        "end": 262
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "id(header) // -> #sun-header",
        "description": "id function"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "base",
        "description": "the name of the id"
      },
      {
        "type": "String",
        "name": "op",
        "description": "the comparison operator"
      }
    ],
    "return": {
      "type": "String",
      "description": "an id selector"
    },
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "prefix"
      },
      {
        "type": "function",
        "name": "prefix"
      },
      {
        "type": "variable",
        "name": "hash"
      }
    ],
    "throw": [
      "The id function requires a string value.",
      "The controls function requires a string value for param 2.",
      "The controls function requires a valid attribute comparison operator for param 2."
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Creates an aria-controls selector with the library prefix\n",
    "commentRange": {
      "start": 264,
      "end": 272
    },
    "context": {
      "type": "function",
      "name": "controls",
      "code": "\n\t@if (type-of($id) !='string') {\n\t\t@error 'The controls function requires a string value for param 1.';\n\t}\n\n\t@if (type-of($op) !='string') {\n\t\t@error 'The controls function requires a string value for param 2.';\n\t}\n\n\t@if not($op =='=' or $op =='~=' or $op =='|=' or $op =='^=' or $op =='$=' or $op =='*=') {\n\t\t@error 'The controls function requires a valid attribute comparison operator for param 2.';\n\t}\n\n\t@return '[aria-controls'+$op +prefix($id)+']';\n",
      "line": {
        "start": 273,
        "end": 287
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "controls(header) // -> [aria-controls=sun-header]",
        "description": "controls function"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "id",
        "description": "the id of the controlled element"
      },
      {
        "type": "String",
        "name": "op",
        "description": "the comparison operator"
      }
    ],
    "return": {
      "type": "String",
      "description": "an aria-controls selector"
    },
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "prefix"
      }
    ],
    "throw": [
      "The controls function requires a string value for param 1.",
      "The controls function requires a string value for param 2.",
      "The controls function requires a valid attribute comparison operator for param 2."
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Creates an aria-expanded selector\n",
    "commentRange": {
      "start": 289,
      "end": 296
    },
    "context": {
      "type": "function",
      "name": "expanded",
      "code": "\n\t@if (type-of($bool)=='string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool =='true' or $bool =='false') {\n\t\t\t@error 'The expanded function requires a boolean value.';\n\t\t}\n\t}\n\n\t@else if (type-of($bool) !='bool') {\n\t\t@error 'The expanded function requires a boolean value.';\n\t}\n\n\t@return '[aria-expanded='+$bool +']';\n",
      "line": {
        "start": 297,
        "end": 311
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "expanded(true) // -> [aria-expanded=true]",
        "description": "expanded function"
      }
    ],
    "parameter": [
      {
        "type": "Bool",
        "name": "bool",
        "description": "the value of the selector"
      }
    ],
    "return": {
      "type": "String",
      "description": "an aria-expanded selector"
    },
    "access": "public",
    "require": [],
    "throw": [
      "The expanded function requires a boolean value."
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Creates an aria-hidden selector\n",
    "commentRange": {
      "start": 313,
      "end": 320
    },
    "context": {
      "type": "function",
      "name": "hidden",
      "code": "\n\t@if (type-of($bool)=='string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool =='true' or $bool =='false') {\n\t\t\t@error 'The hidden function requires a boolean value. Received: '+$bool;\n\t\t}\n\t}\n\n\t@else if (type-of($bool) !='bool') {\n\t\t@error 'The hidden function requires a boolean value. Received: '+$bool;\n\t}\n\n\t@return '[aria-hidden='+$bool +']';\n",
      "line": {
        "start": 321,
        "end": 335
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "hidden(true) // -> [aria-hidden=true]",
        "description": "hidden function"
      }
    ],
    "parameter": [
      {
        "type": "Bool",
        "name": "bool",
        "description": "the value of the selector"
      }
    ],
    "return": {
      "type": "String",
      "description": "an aria-hidden selector"
    },
    "access": "public",
    "require": [],
    "throw": [
      "The hidden function requires a boolean value. Received: "
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Converts a number to ms\n",
    "commentRange": {
      "start": 337,
      "end": 344
    },
    "context": {
      "type": "function",
      "name": "ms",
      "code": "\n\t@if (type-of($val) !='number') {\n\t\t@error 'The ms function requires a number value.';\n\t}\n\n\t@return $val * 1ms;\n",
      "line": {
        "start": 345,
        "end": 351
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "ms(100) // -> 100ms",
        "description": "ms function"
      }
    ],
    "parameter": [
      {
        "type": "Number",
        "name": "val",
        "description": "the number of ms to return"
      }
    ],
    "return": {
      "type": "Number",
      "description": "the number as ms"
    },
    "access": "public",
    "require": [],
    "throw": [
      "The ms function requires a number value."
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Returns the requested delay value as ms\n",
        "context": {
          "type": "function",
          "name": "delay",
          "code": "\n\t@if not(map-has-key($delay, $key)) {\n\t\t@error 'The delay function requires one of the following values: #{map-keys($delay)}';\n\t}\n\n\t@return ms(map-get($delay, $key));\n",
          "line": {
            "start": 420,
            "end": 426
          }
        }
      }
    ]
  },
  {
    "description": "Converts a number to px\n",
    "commentRange": {
      "start": 353,
      "end": 360
    },
    "context": {
      "type": "function",
      "name": "px",
      "code": "\n\t@if (type-of($val) !='number') {\n\t\t@error 'The px function requires a number value.';\n\t}\n\n\t@return $val * 1px;\n",
      "line": {
        "start": 361,
        "end": 367
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "px(100) // -> 100px",
        "description": "px function"
      }
    ],
    "parameter": [
      {
        "type": "Number",
        "name": "val",
        "description": "the number of px to return"
      }
    ],
    "return": {
      "type": "Number",
      "description": "the number as px"
    },
    "access": "public",
    "require": [],
    "throw": [
      "The px function requires a number value."
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Returns the requested breakpoint value as px\n",
        "context": {
          "type": "function",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $key)) {\n\t\t@error 'The break function requires one of the following values: #{map-keys($break)}';\n\t}\n\n\t@return px(map-get($break, $key));\n",
          "line": {
            "start": 436,
            "end": 442
          }
        }
      }
    ]
  },
  {
    "description": "Removes the unit from the given value\n",
    "commentRange": {
      "start": 369,
      "end": 376
    },
    "context": {
      "type": "function",
      "name": "strip-unit",
      "code": "\n\t@if (type-of($val) !='number') {\n\t\t@error 'The strip-unit function requires a number value.';\n\t}\n\n\t@return math.div($val, $val * 0 + 1);\n",
      "line": {
        "start": 377,
        "end": 383
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "strip-unit(100px) // -> 100",
        "description": "strip-unit function"
      }
    ],
    "parameter": [
      {
        "type": "Number",
        "name": "val",
        "description": "the value to strip"
      }
    ],
    "return": {
      "type": "Number",
      "description": "the number without units"
    },
    "access": "public",
    "require": [],
    "throw": [
      "The strip-unit function requires a number value."
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Returns the percentage of the given values\n",
        "context": {
          "type": "function",
          "name": "percent",
          "code": "\n\t@if (type-of($dividend) !='number' or type-of($divisor) !='number' or type-of($padding) !='number') {\n\t\t@error 'The percent function requires number parameters.';\n\t}\n\n\t@if ($divisor ==0) {\n\t\t@error 'The percent function requires a non-zero value for param 2.';\n\t}\n\n\t@if (strip-unit($padding) !=0) {\n\t\t@return calc((($dividend * 100%) - $padding) / $divisor)+'%';\n\t}\n\n\t@return math.div($dividend * 100%, $divisor);\n",
          "line": {
            "start": 396,
            "end": 410
          }
        }
      },
      {
        "description": "Generates a property with a fluid value between specified screen sizes\n",
        "context": {
          "type": "mixin",
          "name": "fluid",
          "code": "\n\t$u1: unit($min-vw);\n\t$u2: unit($max-vw);\n\t$u3: unit($min-size);\n\t$u4: unit($max-size);\n\n\t@if (type-of($prop) !='string') {\n\t\t@error 'The fluid mixin requires a string for the $prop argument.';\n\t}\n\n\t@if not(type-of($u1)=='string' and type-of($u2)=='string' and type-of($u3)=='string' and type-of($u4)=='string') {\n\t\t@error 'The fluid mixin requires numbers for the width and size arguments.';\n\t}\n\n\t@if not($u1 ==$u2 and $u1 ==$u3 and $u1 ==$u4) {\n\t\t@error 'The fluid mixin requires width and size arguments with the same units.';\n\t}\n\n\t// See if you can get rid of this wrapping & selector\n\t& {\n\t\t#{$prop}: $min-size;\n\n\t\t@media (min-width: $min-vw) {\n\t\t\t#{$prop}: calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));\n\t\t}\n\n\t\t@media (min-width: $max-vw) {\n\t\t\t#{$prop}: $max-size;\n\t\t}\n\t}\n",
          "line": {
            "start": 586,
            "end": 616
          }
        }
      },
      {
        "description": "Generates a property with a fluid value between specified screen sizes\n",
        "context": {
          "type": "mixin",
          "name": "fluid",
          "code": "\n\t$u1: unit($min-vw);\n\t$u2: unit($max-vw);\n\t$u3: unit($min-size);\n\t$u4: unit($max-size);\n\n\t@if (type-of($prop) !='string') {\n\t\t@error 'The fluid mixin requires a string for the $prop argument.';\n\t}\n\n\t@if not(type-of($u1)=='string' and type-of($u2)=='string' and type-of($u3)=='string' and type-of($u4)=='string') {\n\t\t@error 'The fluid mixin requires numbers for the width and size arguments.';\n\t}\n\n\t@if not($u1 ==$u2 and $u1 ==$u3 and $u1 ==$u4) {\n\t\t@error 'The fluid mixin requires width and size arguments with the same units.';\n\t}\n\n\t// See if you can get rid of this wrapping & selector\n\t& {\n\t\t#{$prop}: $min-size;\n\n\t\t@media (min-width: $min-vw) {\n\t\t\t#{$prop}: calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));\n\t\t}\n\n\t\t@media (min-width: $max-vw) {\n\t\t\t#{$prop}: $max-size;\n\t\t}\n\t}\n",
          "line": {
            "start": 586,
            "end": 616
          }
        }
      }
    ]
  },
  {
    "description": "Returns the percentage of the given values\n",
    "commentRange": {
      "start": 385,
      "end": 395
    },
    "context": {
      "type": "function",
      "name": "percent",
      "code": "\n\t@if (type-of($dividend) !='number' or type-of($divisor) !='number' or type-of($padding) !='number') {\n\t\t@error 'The percent function requires number parameters.';\n\t}\n\n\t@if ($divisor ==0) {\n\t\t@error 'The percent function requires a non-zero value for param 2.';\n\t}\n\n\t@if (strip-unit($padding) !=0) {\n\t\t@return calc((($dividend * 100%) - $padding) / $divisor)+'%';\n\t}\n\n\t@return math.div($dividend * 100%, $divisor);\n",
      "line": {
        "start": 396,
        "end": 410
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "percent(100, 200) // -> 50%",
        "description": "percent function"
      }
    ],
    "parameter": [
      {
        "type": "Number",
        "name": "dividend",
        "description": "the value that will be devided"
      },
      {
        "type": "Number",
        "name": "divisor",
        "description": "the value that will devided by"
      }
    ],
    "return": {
      "type": "Number",
      "description": "the percentage of the given values"
    },
    "throw": [
      "The percent function requires number parameters.",
      "The percent function requires a non-zero value for param 2."
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "strip-unit"
      }
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Returns the requested delay value as ms\n",
    "commentRange": {
      "start": 412,
      "end": 419
    },
    "context": {
      "type": "function",
      "name": "delay",
      "code": "\n\t@if not(map-has-key($delay, $key)) {\n\t\t@error 'The delay function requires one of the following values: #{map-keys($delay)}';\n\t}\n\n\t@return ms(map-get($delay, $key));\n",
      "line": {
        "start": 420,
        "end": 426
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "delay(default) // -> 300ms",
        "description": "delay function"
      }
    ],
    "parameter": [
      {
        "type": "Number",
        "name": "key",
        "description": "the key of the delay to use"
      }
    ],
    "return": {
      "type": "Number",
      "description": "the delay value as ms"
    },
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "ms"
      },
      {
        "type": "variable",
        "name": "delay"
      },
      {
        "type": "variable",
        "name": "delay"
      },
      {
        "type": "variable",
        "name": "delay"
      }
    ],
    "throw": [
      "The delay function requires one of the following values: #{map-keys($delay)}"
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Returns the requested breakpoint value as px\n",
    "commentRange": {
      "start": 428,
      "end": 435
    },
    "context": {
      "type": "function",
      "name": "break",
      "code": "\n\t@if not(map-has-key($break, $key)) {\n\t\t@error 'The break function requires one of the following values: #{map-keys($break)}';\n\t}\n\n\t@return px(map-get($break, $key));\n",
      "line": {
        "start": 436,
        "end": 442
      }
    },
    "group": [
      "functions"
    ],
    "example": [
      {
        "type": "scss",
        "code": "break(md) // -> 1024px",
        "description": "break function"
      }
    ],
    "parameter": [
      {
        "type": "Number",
        "name": "key",
        "description": "the key of the breakpoint to use"
      }
    ],
    "return": {
      "type": "Number",
      "description": "the breakpoint value as px"
    },
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "px"
      },
      {
        "type": "variable",
        "name": "break"
      },
      {
        "type": "variable",
        "name": "break"
      },
      {
        "type": "variable",
        "name": "break"
      }
    ],
    "throw": [
      "The break function requires one of the following values: #{map-keys($break)}"
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Wraps the provided content in a media query\n",
        "context": {
          "type": "mixin",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $min) and (type-of($max)=='null' or map-has-key($break, $max))) {\n\t\t@error 'The break mixin requires one or two of the following values: #{map-keys($break)}';\n\t}\n\n\t@if (map-has-key($break, $max)) {\n\t\t@media (min-width: break($min)) and (max-width: break($max)) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else {\n\t\t@media (min-width: break($min)) {\n\t\t\t@content;\n\t\t}\n\t}\n",
          "line": {
            "start": 481,
            "end": 497
          }
        }
      },
      {
        "description": "Wraps the provided content in a media query\n",
        "context": {
          "type": "mixin",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $min) and (type-of($max)=='null' or map-has-key($break, $max))) {\n\t\t@error 'The break mixin requires one or two of the following values: #{map-keys($break)}';\n\t}\n\n\t@if (map-has-key($break, $max)) {\n\t\t@media (min-width: break($min)) and (max-width: break($max)) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else {\n\t\t@media (min-width: break($min)) {\n\t\t\t@content;\n\t\t}\n\t}\n",
          "line": {
            "start": 481,
            "end": 497
          }
        }
      },
      {
        "description": "Wraps the provided content in a media query\n",
        "context": {
          "type": "mixin",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $min) and (type-of($max)=='null' or map-has-key($break, $max))) {\n\t\t@error 'The break mixin requires one or two of the following values: #{map-keys($break)}';\n\t}\n\n\t@if (map-has-key($break, $max)) {\n\t\t@media (min-width: break($min)) and (max-width: break($max)) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else {\n\t\t@media (min-width: break($min)) {\n\t\t\t@content;\n\t\t}\n\t}\n",
          "line": {
            "start": 481,
            "end": 497
          }
        }
      }
    ]
  },
  {
    "description": "Delay variables\n",
    "commentRange": {
      "start": 101,
      "end": 108
    },
    "context": {
      "type": "variable",
      "name": "delay",
      "value": "(\n\tinstant: $delay-base + $delay-step * 0,\n\tfast: $delay-base + $delay-step * 1,\n\tmed-fast: $delay-base + $delay-step * 2,\n\tdefault: $delay-base + $delay-step * 3,\n\tmed-slow: $delay-base + $delay-step * 4,\n\tslow: $delay-base + $delay-step * 5)",
      "scope": "default",
      "line": {
        "start": 109,
        "end": 115
      }
    },
    "group": [
      "maps"
    ],
    "property": [
      {
        "type": "Number",
        "name": "$delay.instant",
        "default": "0",
        "description": "Instant: the quickest delay; close or equal to 0"
      },
      {
        "type": "Number",
        "name": "$delay.fast",
        "default": "100",
        "description": "Fast: delays that happen quickly"
      },
      {
        "type": "Number",
        "name": "$delay.med-fast",
        "default": "200",
        "description": "Med-Fast: delays that happen faster"
      },
      {
        "type": "Number",
        "name": "$delay.default",
        "default": "300",
        "description": "Default: delays that are average"
      },
      {
        "type": "Number",
        "name": "$delay.med-slow",
        "default": "400",
        "description": "Med-Slow: delays that happen slower"
      },
      {
        "type": "Number",
        "name": "$delay.slow",
        "default": "500",
        "description": "Slow: delays that happen slowly"
      }
    ],
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Returns the requested delay value as ms\n",
        "context": {
          "type": "function",
          "name": "delay",
          "code": "\n\t@if not(map-has-key($delay, $key)) {\n\t\t@error 'The delay function requires one of the following values: #{map-keys($delay)}';\n\t}\n\n\t@return ms(map-get($delay, $key));\n",
          "line": {
            "start": 420,
            "end": 426
          }
        }
      },
      {
        "description": "Returns the requested delay value as ms\n",
        "context": {
          "type": "function",
          "name": "delay",
          "code": "\n\t@if not(map-has-key($delay, $key)) {\n\t\t@error 'The delay function requires one of the following values: #{map-keys($delay)}';\n\t}\n\n\t@return ms(map-get($delay, $key));\n",
          "line": {
            "start": 420,
            "end": 426
          }
        }
      },
      {
        "description": "Returns the requested delay value as ms\n",
        "context": {
          "type": "function",
          "name": "delay",
          "code": "\n\t@if not(map-has-key($delay, $key)) {\n\t\t@error 'The delay function requires one of the following values: #{map-keys($delay)}';\n\t}\n\n\t@return ms(map-get($delay, $key));\n",
          "line": {
            "start": 420,
            "end": 426
          }
        }
      }
    ]
  },
  {
    "description": "Breakpoint variables\n",
    "commentRange": {
      "start": 117,
      "end": 123
    },
    "context": {
      "type": "variable",
      "name": "break",
      "value": "(\n\txs: 480,\n\tsm: 768,\n\tmd: 1024,\n\tlg: 1200,\n\txl: 1440)",
      "scope": "default",
      "line": {
        "start": 124,
        "end": 129
      }
    },
    "group": [
      "maps"
    ],
    "property": [
      {
        "type": "Number",
        "name": "$break.xs",
        "default": "480",
        "description": "Extra-Small: mobile devices"
      },
      {
        "type": "Number",
        "name": "$break.sm",
        "default": "768",
        "description": "Small: small tablets, landscape mobiles"
      },
      {
        "type": "Number",
        "name": "$break.md",
        "default": "1024",
        "description": "Medium: small desktops, large tablets"
      },
      {
        "type": "Number",
        "name": "$break.lg",
        "default": "1200",
        "description": "Large: large desktops, landscape tablets"
      },
      {
        "type": "Number",
        "name": "$break.xl",
        "default": "1440",
        "description": "Extra-Large: larger desktops"
      }
    ],
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Returns the requested breakpoint value as px\n",
        "context": {
          "type": "function",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $key)) {\n\t\t@error 'The break function requires one of the following values: #{map-keys($break)}';\n\t}\n\n\t@return px(map-get($break, $key));\n",
          "line": {
            "start": 436,
            "end": 442
          }
        }
      },
      {
        "description": "Returns the requested breakpoint value as px\n",
        "context": {
          "type": "function",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $key)) {\n\t\t@error 'The break function requires one of the following values: #{map-keys($break)}';\n\t}\n\n\t@return px(map-get($break, $key));\n",
          "line": {
            "start": 436,
            "end": 442
          }
        }
      },
      {
        "description": "Returns the requested breakpoint value as px\n",
        "context": {
          "type": "function",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $key)) {\n\t\t@error 'The break function requires one of the following values: #{map-keys($break)}';\n\t}\n\n\t@return px(map-get($break, $key));\n",
          "line": {
            "start": 436,
            "end": 442
          }
        }
      },
      {
        "description": "Wraps the provided content in a media query\n",
        "context": {
          "type": "mixin",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $min) and (type-of($max)=='null' or map-has-key($break, $max))) {\n\t\t@error 'The break mixin requires one or two of the following values: #{map-keys($break)}';\n\t}\n\n\t@if (map-has-key($break, $max)) {\n\t\t@media (min-width: break($min)) and (max-width: break($max)) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else {\n\t\t@media (min-width: break($min)) {\n\t\t\t@content;\n\t\t}\n\t}\n",
          "line": {
            "start": 481,
            "end": 497
          }
        }
      },
      {
        "description": "Wraps the provided content in a media query\n",
        "context": {
          "type": "mixin",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $min) and (type-of($max)=='null' or map-has-key($break, $max))) {\n\t\t@error 'The break mixin requires one or two of the following values: #{map-keys($break)}';\n\t}\n\n\t@if (map-has-key($break, $max)) {\n\t\t@media (min-width: break($min)) and (max-width: break($max)) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else {\n\t\t@media (min-width: break($min)) {\n\t\t\t@content;\n\t\t}\n\t}\n",
          "line": {
            "start": 481,
            "end": 497
          }
        }
      },
      {
        "description": "Wraps the provided content in a media query\n",
        "context": {
          "type": "mixin",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $min) and (type-of($max)=='null' or map-has-key($break, $max))) {\n\t\t@error 'The break mixin requires one or two of the following values: #{map-keys($break)}';\n\t}\n\n\t@if (map-has-key($break, $max)) {\n\t\t@media (min-width: break($min)) and (max-width: break($max)) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else {\n\t\t@media (min-width: break($min)) {\n\t\t\t@content;\n\t\t}\n\t}\n",
          "line": {
            "start": 481,
            "end": 497
          }
        }
      },
      {
        "description": "Wraps the provided content in a media query\n",
        "context": {
          "type": "mixin",
          "name": "break",
          "code": "\n\t@if not(map-has-key($break, $min) and (type-of($max)=='null' or map-has-key($break, $max))) {\n\t\t@error 'The break mixin requires one or two of the following values: #{map-keys($break)}';\n\t}\n\n\t@if (map-has-key($break, $max)) {\n\t\t@media (min-width: break($min)) and (max-width: break($max)) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else {\n\t\t@media (min-width: break($min)) {\n\t\t\t@content;\n\t\t}\n\t}\n",
          "line": {
            "start": 481,
            "end": 497
          }
        }
      },
      {
        "description": "Creates utility selectors for a given property at each breakpoint\n",
        "context": {
          "type": "mixin",
          "name": "break-util",
          "code": "\n\t@if (type-of($prop) !='string') {\n\t\t@error 'The break-util mixin requires a string for the $prop argument.';\n\t}\n\n\t& {\n\t\t#{$prop}: #{$val};\n\n\t\t@each $key,\n\t\t$width in $break {\n\t\t\t&-#{$key} {\n\t\t\t\t#{$prop}: #{$none};\n\n\t\t\t\t@include break($key) {\n\t\t\t\t\t#{$prop}: #{$val};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t&-to-#{$key} {\n\t\t\t\t#{$prop}: #{$val};\n\n\t\t\t\t@include break($key) {\n\t\t\t\t\t#{$prop}: #{$none};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 537,
            "end": 564
          }
        }
      }
    ]
  },
  {
    "description": "Creates a prefixed CSS var definition\n",
    "commentRange": {
      "start": 444,
      "end": 452
    },
    "context": {
      "type": "mixin",
      "name": "css-var",
      "code": "\n\t#{css-prefix($key)}: #{$val};\n",
      "line": {
        "start": 453,
        "end": 455
      }
    },
    "group": [
      "mixins"
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include css-var(bg, black) // -> --sun-bg: black;",
        "description": "css-var mixin"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "key",
        "description": "the key of the CSS var"
      },
      {
        "type": "Any",
        "name": "val",
        "description": "the value of the CSS var"
      }
    ],
    "output": "a prefixed CSS var definition",
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "css-prefix"
      }
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Creates a prefixed CSS var reference\n",
        "context": {
          "type": "mixin",
          "name": "css-var-ref",
          "code": "\n\t@include css-var($key1, css-var($key2));\n",
          "line": {
            "start": 466,
            "end": 468
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) !='string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) !='color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type ==lighten or $type ==darken or $type ==both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) !='number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha)=='string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool =='true' or $bool =='false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) !='bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 628,
            "end": 714
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) !='string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) !='color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type ==lighten or $type ==darken or $type ==both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) !='number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha)=='string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool =='true' or $bool =='false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) !='bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 628,
            "end": 714
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) !='string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) !='color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type ==lighten or $type ==darken or $type ==both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) !='number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha)=='string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool =='true' or $bool =='false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) !='bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 628,
            "end": 714
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) !='string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) !='color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type ==lighten or $type ==darken or $type ==both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) !='number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha)=='string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool =='true' or $bool =='false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) !='bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 628,
            "end": 714
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) !='string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) !='color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type ==lighten or $type ==darken or $type ==both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) !='number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha)=='string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool =='true' or $bool =='false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) !='bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 628,
            "end": 714
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) !='string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) !='color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type ==lighten or $type ==darken or $type ==both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) !='number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha)=='string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool =='true' or $bool =='false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) !='bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 628,
            "end": 714
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) !='string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) !='color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type ==lighten or $type ==darken or $type ==both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) !='number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha)=='string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool =='true' or $bool =='false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) !='bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 628,
            "end": 714
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) !='string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) !='color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type ==lighten or $type ==darken or $type ==both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) !='number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha)=='string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool =='true' or $bool =='false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) !='bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 628,
            "end": 714
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) !='string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) !='color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type ==lighten or $type ==darken or $type ==both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) !='number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha)=='string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool =='true' or $bool =='false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) !='bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 628,
            "end": 714
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) !='string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) !='color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type ==lighten or $type ==darken or $type ==both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) !='number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha)=='string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool =='true' or $bool =='false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) !='bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 628,
            "end": 714
          }
        }
      },
      {
        "description": "Generates css varibles for lighter, darker, or both variations\n",
        "context": {
          "type": "mixin",
          "name": "shades",
          "code": "\n\t@if (type-of($name) !='string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) !='color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type ==lighten or $type ==darken or $type ==both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) !='number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha)=='string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool =='true' or $bool =='false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) !='bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 628,
            "end": 714
          }
        }
      },
      {
        "description": "Light theme\n",
        "context": {
          "type": "mixin",
          "name": "light-theme",
          "code": "\n    @include css-var(fore, $fore);\n    @include css-var(back, $back);\n",
          "line": {
            "start": 54,
            "end": 57
          }
        }
      },
      {
        "description": "Light theme\n",
        "context": {
          "type": "mixin",
          "name": "light-theme",
          "code": "\n    @include css-var(fore, $fore);\n    @include css-var(back, $back);\n",
          "line": {
            "start": 54,
            "end": 57
          }
        }
      },
      {
        "description": "Dark theme\n",
        "context": {
          "type": "mixin",
          "name": "dark-theme",
          "code": "\n    @include css-var(fore, $back);\n    @include css-var(back, $fore);\n",
          "line": {
            "start": 60,
            "end": 63
          }
        }
      },
      {
        "description": "Dark theme\n",
        "context": {
          "type": "mixin",
          "name": "dark-theme",
          "code": "\n    @include css-var(fore, $back);\n    @include css-var(back, $fore);\n",
          "line": {
            "start": 60,
            "end": 63
          }
        }
      }
    ]
  },
  {
    "description": "Creates a prefixed CSS var reference\n",
    "commentRange": {
      "start": 457,
      "end": 465
    },
    "context": {
      "type": "mixin",
      "name": "css-var-ref",
      "code": "\n\t@include css-var($key1, css-var($key2));\n",
      "line": {
        "start": 466,
        "end": 468
      }
    },
    "group": [
      "mixins"
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include css-var-ref(fill, bg) // -> --sun-fill: var(--sun-bg);",
        "description": "css-var-ref mixin"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "key1",
        "description": "the key of the new CSS var to define"
      },
      {
        "type": "String",
        "name": "key2",
        "description": "the key of the referenced CSS var"
      }
    ],
    "output": "a prefixed CSS var reference",
    "access": "public",
    "require": [
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "function",
        "name": "css-var"
      }
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Wraps the provided content in a media query\n",
    "commentRange": {
      "start": 470,
      "end": 480
    },
    "context": {
      "type": "mixin",
      "name": "break",
      "code": "\n\t@if not(map-has-key($break, $min) and (type-of($max)=='null' or map-has-key($break, $max))) {\n\t\t@error 'The break mixin requires one or two of the following values: #{map-keys($break)}';\n\t}\n\n\t@if (map-has-key($break, $max)) {\n\t\t@media (min-width: break($min)) and (max-width: break($max)) {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@else {\n\t\t@media (min-width: break($min)) {\n\t\t\t@content;\n\t\t}\n\t}\n",
      "line": {
        "start": 481,
        "end": 497
      }
    },
    "group": [
      "mixins"
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include break(md) {    // ->   @media (min-width: 1024px) {\n    display: none;      //          display: none;\n}                       //      }",
        "description": "break mixin"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "min",
        "description": "the key of the breakpoint to use with min-width"
      },
      {
        "type": "String",
        "name": "max",
        "description": "the key of the breakpoint to use with max-width"
      }
    ],
    "output": "the provided content wrapped in a media query",
    "access": "public",
    "content": "",
    "require": [
      {
        "type": "function",
        "name": "break"
      },
      {
        "type": "function",
        "name": "break"
      },
      {
        "type": "function",
        "name": "break"
      },
      {
        "type": "variable",
        "name": "break"
      },
      {
        "type": "variable",
        "name": "break"
      },
      {
        "type": "variable",
        "name": "break"
      },
      {
        "type": "variable",
        "name": "break"
      }
    ],
    "throw": [
      "The break mixin requires one or two of the following values: #{map-keys($break)}"
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Creates utility selectors for a given property at each breakpoint\n",
        "context": {
          "type": "mixin",
          "name": "break-util",
          "code": "\n\t@if (type-of($prop) !='string') {\n\t\t@error 'The break-util mixin requires a string for the $prop argument.';\n\t}\n\n\t& {\n\t\t#{$prop}: #{$val};\n\n\t\t@each $key,\n\t\t$width in $break {\n\t\t\t&-#{$key} {\n\t\t\t\t#{$prop}: #{$none};\n\n\t\t\t\t@include break($key) {\n\t\t\t\t\t#{$prop}: #{$val};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t&-to-#{$key} {\n\t\t\t\t#{$prop}: #{$val};\n\n\t\t\t\t@include break($key) {\n\t\t\t\t\t#{$prop}: #{$none};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 537,
            "end": 564
          }
        }
      },
      {
        "description": "Creates utility selectors for a given property at each breakpoint\n",
        "context": {
          "type": "mixin",
          "name": "break-util",
          "code": "\n\t@if (type-of($prop) !='string') {\n\t\t@error 'The break-util mixin requires a string for the $prop argument.';\n\t}\n\n\t& {\n\t\t#{$prop}: #{$val};\n\n\t\t@each $key,\n\t\t$width in $break {\n\t\t\t&-#{$key} {\n\t\t\t\t#{$prop}: #{$none};\n\n\t\t\t\t@include break($key) {\n\t\t\t\t\t#{$prop}: #{$val};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t&-to-#{$key} {\n\t\t\t\t#{$prop}: #{$val};\n\n\t\t\t\t@include break($key) {\n\t\t\t\t\t#{$prop}: #{$none};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n",
          "line": {
            "start": 537,
            "end": 564
          }
        }
      }
    ]
  },
  {
    "description": "Creates utility selectors for a given property at each breakpoint\n",
    "commentRange": {
      "start": 499,
      "end": 536
    },
    "context": {
      "type": "mixin",
      "name": "break-util",
      "code": "\n\t@if (type-of($prop) !='string') {\n\t\t@error 'The break-util mixin requires a string for the $prop argument.';\n\t}\n\n\t& {\n\t\t#{$prop}: #{$val};\n\n\t\t@each $key,\n\t\t$width in $break {\n\t\t\t&-#{$key} {\n\t\t\t\t#{$prop}: #{$none};\n\n\t\t\t\t@include break($key) {\n\t\t\t\t\t#{$prop}: #{$val};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t&-to-#{$key} {\n\t\t\t\t#{$prop}: #{$val};\n\n\t\t\t\t@include break($key) {\n\t\t\t\t\t#{$prop}: #{$none};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n",
      "line": {
        "start": 537,
        "end": 564
      }
    },
    "group": [
      "mixins"
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include break-util(display, flex);     // ->   & {\n                                        //          display: flex;\n                                        //\n                                        //          &-xs {\n                                        //              display: none;\n                                        //              @include break(xs) {\n                                        //                  display: flex;\n                                        //              }\n                                        //          }\n                                        //          &-to-xs {\n                                        //              display: flex;\n                                        //              @include break(xs) {\n                                        //                  display: none;\n                                        //              }\n                                        //          }\n                                        //          ...\n                                        //          &-xl {\n                                        //              display: none;\n                                        //              @include break(xl) {\n                                        //                  display: flex;\n                                        //              }\n                                        //          }\n                                        //          &-to-xl {\n                                        //              display: flex;\n                                        //              @include break(xl) {\n                                        //                  display: none;\n                                        //              }\n                                        //          }\n                                        //      }",
        "description": "break-util mixin"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "prop",
        "description": "the property to toggle"
      },
      {
        "type": "Any",
        "name": "val",
        "description": "the active value of the property"
      },
      {
        "type": "Any",
        "name": "none",
        "description": "the inactive value of the property"
      }
    ],
    "output": "utility selectors for the given property at each breakpoint",
    "access": "public",
    "require": [
      {
        "type": "mixin",
        "name": "break"
      },
      {
        "type": "mixin",
        "name": "break"
      },
      {
        "type": "variable",
        "name": "break"
      }
    ],
    "throw": [
      "The break-util mixin requires a string for the $prop argument."
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Generates a property with a fluid value between specified screen sizes\n",
    "commentRange": {
      "start": 566,
      "end": 585
    },
    "context": {
      "type": "mixin",
      "name": "fluid",
      "code": "\n\t$u1: unit($min-vw);\n\t$u2: unit($max-vw);\n\t$u3: unit($min-size);\n\t$u4: unit($max-size);\n\n\t@if (type-of($prop) !='string') {\n\t\t@error 'The fluid mixin requires a string for the $prop argument.';\n\t}\n\n\t@if not(type-of($u1)=='string' and type-of($u2)=='string' and type-of($u3)=='string' and type-of($u4)=='string') {\n\t\t@error 'The fluid mixin requires numbers for the width and size arguments.';\n\t}\n\n\t@if not($u1 ==$u2 and $u1 ==$u3 and $u1 ==$u4) {\n\t\t@error 'The fluid mixin requires width and size arguments with the same units.';\n\t}\n\n\t// See if you can get rid of this wrapping & selector\n\t& {\n\t\t#{$prop}: $min-size;\n\n\t\t@media (min-width: $min-vw) {\n\t\t\t#{$prop}: calc(#{$min-size} + #{strip-unit($max-size - $min-size)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));\n\t\t}\n\n\t\t@media (min-width: $max-vw) {\n\t\t\t#{$prop}: $max-size;\n\t\t}\n\t}\n",
      "line": {
        "start": 586,
        "end": 616
      }
    },
    "group": [
      "mixins"
    ],
    "example": [
      {
        "type": "scss",
        "code": "@include fluid(font-size, 480px, 1024px, 18px, 16px);   // ->   & {\n                                                        //          font-size: 16px;\n                                                        //          @media (min-width: 480px) {\n                                                        //              font-size: calc(16px + 2 * ((100vw - 480px) / 544));\n                                                        //          }\n                                                        //          @media (min-width: 1024px) {\n                                                        //              font-size: 18px;\n                                                        //          }\n                                                        //      }",
        "description": "fluid mixin"
      }
    ],
    "parameter": [
      {
        "type": "String",
        "name": "prop",
        "description": "the property whose value will be fluid"
      },
      {
        "type": "String",
        "name": "min-vw",
        "description": "the minimum screen width of the fluid property"
      },
      {
        "type": "String",
        "name": "max-vw",
        "description": "the maximum screen width of the fluid property"
      },
      {
        "type": "String",
        "name": "min-size",
        "description": "the minimum value of the fluid property"
      },
      {
        "type": "String",
        "name": "max-size",
        "description": "the maximum value of the fluid property"
      }
    ],
    "output": "the definitions for the property at different screen sizes",
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "strip-unit"
      },
      {
        "type": "function",
        "name": "strip-unit"
      }
    ],
    "throw": [
      "The fluid mixin requires a string for the $prop argument.",
      "The fluid mixin requires numbers for the width and size arguments.",
      "The fluid mixin requires width and size arguments with the same units."
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Generates css varibles for lighter, darker, or both variations\n",
    "commentRange": {
      "start": 618,
      "end": 627
    },
    "context": {
      "type": "mixin",
      "name": "shades",
      "code": "\n\t@if (type-of($name) !='string') {\n\t\t@error 'The shades mixin requires a string for the $name argument.';\n\t}\n\n\t@if (type-of($color) !='color') {\n\t\t@error 'The shades mixin requires a color for the $color argument.';\n\t}\n\n\t@if not($type ==lighten or $type ==darken or $type ==both) {\n\t\t@error 'The shades mixin requires a string of \"lighten\", \"darken\", or \"both\" for the $type argument.';\n\t}\n\n\t@if (type-of($number) !='number') {\n\t\t@error 'The shades mixin requires a number for the $number argument.';\n\t}\n\n\t@if (type-of($alpha)=='string') {\n\t\t$bool: string.to-lower-case($bool);\n\n\t\t@if not($bool =='true' or $bool =='false') {\n\t\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t\t}\n\t}\n\n\t@else if (type-of($alpha) !='bool') {\n\t\t@error 'The shades mixin requires a boolean value for the $alpha argument. Received: '+$bool;\n\t}\n\n\t@include css-var(#{$name}, $color);\n\n\t@if ($alpha) {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: $i * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: -$i * math.div($amount, 100%)));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, color.adjust($color, $alpha: ($num-light - $i) * math.div($amount, 100%)));\n\t\t\t}\n\t\t}\n\t}\n\n\t@else {\n\t\t@if ($type ==lighten) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==darken) {\n\t\t\t@for $i from 0 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, $i * $amount));\n\t\t\t}\n\t\t}\n\n\t\t@else if ($type ==both) {\n\t\t\t$num-light: floor(math.div($number, 2));\n\n\t\t\t@for $i from 0 through $num-light - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, lighten($color, ($num-light - $i) * $amount));\n\t\t\t}\n\n\t\t\t@include css-var(#{$name}-#{$num-light}, $color);\n\n\t\t\t@for $i from $num-light +1 through $number - 1 {\n\t\t\t\t@include css-var(#{$name}-#{$i}, darken($color, ($i - $num-light) * $amount));\n\t\t\t}\n\t\t}\n\t}\n",
      "line": {
        "start": 628,
        "end": 714
      }
    },
    "group": [
      "mixins"
    ],
    "parameter": [
      {
        "type": "String",
        "name": "name",
        "description": "the name of the color"
      },
      {
        "type": "Color",
        "name": "color",
        "description": "the color to generate variations for"
      },
      {
        "type": "String",
        "name": "type",
        "description": "the type of variation to generate"
      },
      {
        "type": "Number",
        "name": "number",
        "description": "the number of variations to generate"
      },
      {
        "type": "String",
        "name": "amount",
        "description": "the amount to vary the color by"
      },
      {
        "type": "Boolean",
        "name": "alpha",
        "description": "whether to generate alpha variations"
      }
    ],
    "output": "css variables for different shades of the source color",
    "access": "public",
    "require": [
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      }
    ],
    "throw": [
      "The shades mixin requires a string for the $name argument.",
      "The shades mixin requires a color for the $color argument.",
      "The shades mixin requires a string of ",
      "The shades mixin requires a number for the $number argument.",
      "The shades mixin requires a boolean value for the $alpha argument. Received: "
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Generates flex utility classes\n",
    "commentRange": {
      "start": 761,
      "end": 764
    },
    "context": {
      "type": "mixin",
      "name": "flex-util",
      "code": "\n\t& {\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: flex-start;\n\t\tflex-wrap: wrap;\n\n\t\t&#{class(center)} {\n\t\t\tjustify-content: center;\n\t\t}\n\n\t\t&#{class(end)} {\n\t\t\tjustify-content: flex-end;\n\t\t}\n\n\t\t&#{class(between)} {\n\t\t\tjustify-content: space-between;\n\t\t}\n\n\t\t&#{class(around)} {\n\t\t\tjustify-content: space-around;\n\t\t}\n\n\t\t&#{class(even)} {\n\t\t\tjustify-content: space-evenly;\n\t\t}\n\t}\n",
      "line": {
        "start": 765,
        "end": 792
      }
    },
    "group": [
      "mixins"
    ],
    "access": "public",
    "require": [
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "function",
        "name": "class"
      },
      {
        "type": "function",
        "name": "class"
      }
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Selector for all headers\n",
    "commentRange": {
      "start": 794,
      "end": 797
    },
    "context": {
      "type": "mixin",
      "name": "headers",
      "code": "\n\t@for $i from 1 through 6 {\n\t\th#{$i},\n\t\t#{class(h#{$i})\n\t}\n\n\t\t{\n\t\t@content;\n\t}\n}\n",
      "line": {
        "start": 798,
        "end": 808
      }
    },
    "group": [
      "mixins"
    ],
    "access": "public",
    "content": "",
    "require": [
      {
        "type": "function",
        "name": "class"
      }
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Background clip text\n",
    "commentRange": {
      "start": 811,
      "end": 814
    },
    "context": {
      "type": "mixin",
      "name": "background-clip",
      "code": "\n\tcolor: $color;\n\n\t@supports (-webkit-background-clip: text) and (-webkit-text-fill-color: transparent) {\n\t\tbackground: $color;\n\t\t@content;\n\t\tbackground-clip: text;\n\t\t-webkit-background-clip: text;\n\t\t-webkit-text-fill-color: transparent;\n\t}\n",
      "line": {
        "start": 815,
        "end": 825
      }
    },
    "group": [
      "mixins"
    ],
    "access": "public",
    "content": "",
    "require": [],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Background Styles\n",
    "commentRange": {
      "start": 10,
      "end": 10
    },
    "context": {
      "type": "css",
      "name": "#{class(bg)}",
      "value": "display: block;\n    opacity: 0;\n    height: 0;\n    width: 0;\n    z-index: -1;",
      "line": {
        "start": 11,
        "end": 18
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/components/_backgrounds.scss",
      "name": "_backgrounds.scss"
    }
  },
  {
    "description": "All buttons\n",
    "commentRange": {
      "start": 10,
      "end": 10
    },
    "context": {
      "type": "css",
      "name": "#{class(btn)},\n#{class(pill)},\n#{class(btn-icon)}",
      "value": "text-decoration: none;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow: hidden;\n    transition: color css-var(delay-default),\n                background-color css-var(delay-default),\n                border-color css-var(delay-default);",
      "line": {
        "start": 13,
        "end": 127
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/components/_buttons.scss",
      "name": "_buttons.scss"
    }
  },
  {
    "description": "Regular buttons\n",
    "commentRange": {
      "start": 23,
      "end": 23
    },
    "context": {
      "type": "css",
      "name": "#{class(btn)},\n#{class(pill)}",
      "value": "display: inline-block;\n    border-radius: $pill-radius;\n    color: css-var($btn-fore);\n    background: css-var($btn-back);\n    border: $border-width solid css-var($btn-border);\n    text-align: center;\n\n    @include break(xs) {\n        width: auto;\n    }\n\n    @include states(hover, focus, active) {\n        color: css-var($btn-fore-hover);\n        background: css-var($btn-border);\n\n\t\ti {\n\t\t\tcolor: inherit !important;\n\t\t}\n    }\n\n    &#{class(alt)} {\n        color: css-var($btn-border);\n        background: css-var($btn-back-alt);\n\n        @include states(hover, focus, active) {\n            color: css-var($btn-fore-alt-hover);\n            background: css-var($btn-back-alt-hover);\n            border-color: css-var($btn-back-alt-hover);\n        }\n    }",
      "line": {
        "start": 25,
        "end": 127
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/components/_buttons.scss",
      "name": "_buttons.scss"
    }
  },
  {
    "description": "Default buttons\n",
    "commentRange": {
      "start": 58,
      "end": 58
    },
    "context": {
      "type": "css",
      "name": "#{class(btn)}",
      "value": "padding: $btn-padding-v $btn-padding-h + $btn-padding-adjust;\n\n\t&-icon {\n\t\tdisplay: block;\n\t\ttext-align: center;\n\n\t\t@include states(hover, focus, active) {\n\t\t\ti {\n\t\t\t\tcolor: css-var($btn-back-alt-hover);\n\t\t\t}\n\t\t}\n\n\t\t@include break(xs) {\n\t\t\tdisplay: inline-block;\n\t\t}\n\n\t\ti {\n\t\t\tmargin: 0 !important;\n\t\t\tcolor: css-var($btn-border);\n\t\t\tfont-size: 4rem;\n\n\t\t\t&::before {\n\t\t\t\ttransition: color css-var(delay-default);\n\t\t\t}\n\t\t}\n\t}",
      "line": {
        "start": 59,
        "end": 127
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/components/_buttons.scss",
      "name": "_buttons.scss"
    }
  },
  {
    "description": "Pill buttons\n",
    "commentRange": {
      "start": 88,
      "end": 88
    },
    "context": {
      "type": "css",
      "name": "#{class(pill)}",
      "value": "min-width: 5rem;\n    padding: 0 $btn-padding-adjust;\n    line-height: 2;",
      "line": {
        "start": 89,
        "end": 127
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/components/_buttons.scss",
      "name": "_buttons.scss"
    }
  },
  {
    "description": "A list of buttons\n",
    "commentRange": {
      "start": 95,
      "end": 95
    },
    "context": {
      "type": "css",
      "name": "#{class(buttons)}",
      "value": "@include flex-util();\n\n    & > * {\n        width: 100%;\n        margin: 0.5rem 0;\n\n        #{class(btn)}, #{class(pill)} {\n            display: block;\n        }\n\n        @include break(xs) {\n            width: auto;\n            margin: 0.5rem;\n        }\n    }\n\n    #{class(buttons)} {\n        #{class(pill)} {\n            width: 100%;\n        }\n    }",
      "line": {
        "start": 96,
        "end": 127
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/components/_buttons.scss",
      "name": "_buttons.scss"
    }
  },
  {
    "description": "Buttons within a paragraph\n",
    "commentRange": {
      "start": 120,
      "end": 120
    },
    "context": {
      "type": "css",
      "name": "p",
      "value": "#{class(pill)} {\n        line-height: 1.5rem;\n        vertical-align: middle;\n    }",
      "line": {
        "start": 121,
        "end": 127
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/components/_buttons.scss",
      "name": "_buttons.scss"
    }
  },
  {
    "description": "Card Styles\n",
    "commentRange": {
      "start": 10,
      "end": 10
    },
    "context": {
      "type": "css",
      "name": "#{class(card)}",
      "value": "display: flex;\n\tflex-direction: column;\n\theight: 100%;\n\tmargin: 0;\n\tborder-radius: $card-radius;\n\tbox-shadow: $card-shadow-size #{css-var($card-shadow-color)};\n\toverflow: hidden;\n\n\t@include break(sm) {\n\t\tflex-direction: row;\n\n\t\t&#{class(reverse)} {\n\t\t\tflex-direction: row-reverse;\n\t\t}\n\t}\n\n\t&#{class(center)} {\n\t\t#{class(content)} {\n\t\t\t& > * {\n\t\t\t\ttext-align: center;\n\t\t\t}\n\t\t}\n\t}\n\n\t&#{class(stagger)} {\n\t\tposition: relative;\n\n\t\t@include break(sm) {\n\t\t\tflex-direction: row-reverse;\n\t\t\tborder-radius: 0;\n\t\t\tbox-shadow: none;\n\t\t\toverflow: visible;\n\n\t\t\t&>#{class(image)},\n\t\t\t&>mint-image #{class(image)} {\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: 0;\n\t\t\t\tleft: 0;\n\t\t\t\twidth: 50%;\n\t\t\t\theight: calc(100% - 3rem);\n\t\t\t\tborder-radius: $card-radius;\n\t\t\t\tbox-shadow: $card-shadow-size #{css-var($card-shadow-color)};\n\n\t\t\t\timg {\n\t\t\t\t\theight: 100%;\n\t\t\t\t\tobject-fit: cover;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t&>#{class(content)} {\n\t\t\t\twidth: calc(50% + $card-padding * 2);\n\t\t\t\tmargin-top: $card-padding * 2;\n\t\t\t\tborder-radius: $card-radius;\n\t\t\t\tbox-shadow: $card-shadow-size #{css-var($card-shadow-color)};\n\t\t\t}\n\t\t}\n\n\t\t&#{class(reverse)} {\n\t\t\t@include break(sm) {\n\t\t\t\tflex-direction: row;\n\n\t\t\t\t&>#{class(image)},\n\t\t\t\t&>mint-image #{class(image)} {\n\t\t\t\t\tleft: auto;\n\t\t\t\t\tright: 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t&>#{class(image)}:only-child,\n\t&>mint-image:only-child #{class(image)} {\n\t\twidth: 100%;\n\t}\n\n\t&>#{class(image)},\n\t&>mint-image #{class(image)} {\n\t\toverflow: hidden;\n\n\t\t@include break(sm) {\n\t\t\twidth: 50%;\n\t\t}\n\n\t\t&+#{class(content)} {\n\t\t\t@include break(sm) {\n\t\t\t\twidth: 50%;\n\t\t\t}\n\t\t}\n\t}\n\n\t#{class(content)} {\n\t\tdisplay: grid;\n\t\tgap: $grid-gap / 2;\n\t\tpadding: $card-padding;\n\t\tbackground: css-var(black-2);\n\t\twidth: 100%;\n\n\t\t&> :first-child {\n\t\t\tmargin-top: 0;\n\t\t}\n\n\t\t&> :last-child {\n\t\t\tmargin-bottom: 0;\n\t\t}\n\t}\n\n\t#{class(title)} {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\tjustify-content: flex-start;\n\t\theight: fit-content;\n\t\tgap: $card-padding;\n\n\t\t@include break(xs) {\n\t\t\tflex-direction: row;\n\t\t}\n\n\t\t&:only-child {\n\t\t\theight: 100%;\n\t\t}\n\n\t\t&>#{class(image)},\n\t\t&>mint-image {\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tmax-width: $card-logo-size;\n\t\t\tmax-height: $card-logo-size;\n\n\t\t\timg {\n\t\t\t\tdisplay: block;\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 100%;\n\t\t\t}\n\t\t}\n\n\t\ti {\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\t\t\tmin-width: $card-logo-size;\n\t\t\tmax-width: $card-logo-size;\n\t\t\tfont-size: calc($card-logo-size - 1rem);\n\t\t}\n\n\t\t&>div {\n\t\t\twidth: 100%;\n\n\t\t\t&>* {\n\t\t\t\tmargin: 0;\n\t\t\t}\n\t\t}\n\t}",
      "line": {
        "start": 11,
        "end": 166
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/components/_cards.scss",
      "name": "_cards.scss"
    }
  },
  {
    "description": "Footer Styles\n",
    "commentRange": {
      "start": 7,
      "end": 7
    },
    "context": {
      "type": "css",
      "name": "app-footer",
      "value": "display: flex;\n    flex-direction: column;\n\n    &::before {\n        content: '';\n        display: flex;\n        flex-grow: 1;\n        height: 100%;\n        background: css-var(trans);\n    }",
      "line": {
        "start": 8,
        "end": 20
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/components/_footer.scss",
      "name": "_footer.scss"
    }
  },
  {
    "description": "CSS Variables\n",
    "commentRange": {
      "start": 11,
      "end": 11
    },
    "context": {
      "type": "css",
      "name": ":root",
      "value": "@include css-var(header-height, $header-height);\n    @include css-var-ref(header-bg, $header-bg);\n    @include css-var-ref(header-fg, $header-fg);",
      "line": {
        "start": 12,
        "end": 244
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/components/_header.scss",
      "name": "_header.scss"
    }
  },
  {
    "description": "Header Styles\n",
    "commentRange": {
      "start": 18,
      "end": 18
    },
    "context": {
      "type": "css",
      "name": "#{id(header)}",
      "value": "display: flex;\n    flex-direction: column;\n    position: relative;\n    width: 100%;\n    color: css-var(header-fg);\n    background-color: css-var(header-bg);\n    z-index: 10000;\n\n    &#{class(js)} {\n        align-items: center;\n        flex-direction: row;\n        height: css-var(header-height);\n        //padding: 0 calc(css-var(header-height) / 2);\n\n        #{controls(wrapper)} {\n            display: inline-block;\n        }\n\n        #{$has-controls + neg(controls(wrapper))} {\n            & + ul {\n                display: flex;\n                flex-direction: column;\n                height: 0;\n                overflow: hidden;\n                transition: height css-var(delay-default), margin css-var(delay-default);\n            }\n\n            &#{$has-expanded + neg(expanded(true))} {\n                & + ul {\n                    margin: 0;\n                }\n            }\n        }\n\n        &#{class(fixed)} {\n            position: fixed;\n            top: 0;\n            left: 0;\n        }\n\n        #{id(wrapper)} {\n            background: css-var(bg);\n            transition-duration: css-var(delay-default);\n            transition-property: top, right, bottom, left;\n            overflow: auto;\n        }\n    }\n\n    &.mint-right {\n        #{id(wrapper)} {\n            top: css-var(header-height);\n            right: -100%;\n            left: unset;\n\n            &#{class(open)} {\n                right: 0;\n            }\n        }\n    }\n\n    &.mint-bottom {\n        #{id(wrapper)} {\n            top: unset;\n            bottom: -100%;\n\n            &#{class(open)} {\n                bottom: 0;\n            }\n        }\n    }\n\n    &.mint-left {\n        #{id(wrapper)} {\n            top: css-var(header-height);\n            left: -100%;\n\n            &#{class(open)} {\n                left: 0;\n            }\n        }\n    }\n\n    &::before {\n        content: '';\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: css-var(header-height);\n        background: css-var(header-bg);\n        z-index: -1;\n    }\n\n    nav {\n        & > ul {\n            display: flex;\n            flex-direction: column;\n        }\n    }\n\n    ul {\n        list-style: none;\n        margin-top: 0;\n        margin-bottom: 1rem;\n        padding-left: 0;\n    }\n\n    a, button {\n        display: flex;\n        align-items: center;\n        width: 100%;\n        margin: 0;\n        border: 0;\n        color: css-var(header-fg);\n        background: css-var(trans);\n    }\n\n    h1 {\n        display: flex;\n        white-space: nowrap;\n        margin: 0;\n    }\n\n    #{class(logo)} {\n        text-decoration: none;\n\t\twidth: auto;\n\n        img {\n            max-width: css-var(header-height);\n        }\n    }\n\n    #{controls(wrapper)} {\n        display: none;\n        position: relative;\n        padding: $menu-btn-padding;\n        width: $menu-bar-width + $menu-btn-padding * 2;\n        height: $menu-btn-height + $menu-btn-padding * 2;\n        margin-left: auto;\n        border-radius: $border-radius;\n        background: css-var($menu-btn-color);\n        box-shadow: $menu-btn-shadow-size css-var($menu-btn-shadow-color);\n\n        #{class(menu-icon)} {\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n\n            &, &::before, &::after {\n                content: '';\n                display: block;\n                position: absolute;\n                left: 50%;\n                height: $menu-bar-height;\n                width: $menu-bar-width;\n                background-color: css-var($menu-bar-color);\n                transition: delay(default);\n            }\n\n            &::before {\n                transform: translate(-50%, -200%);\n            }\n\n            &::after {\n                transform: translate(-50%, 200%);\n            }\n        }\n\n        &#{expanded(true)} {\n            #{class(menu-icon)} {\n                background: transparent;\n                &::before {\n                    transform: translate(-50%, 0) rotate(45deg);\n                }\n\n                &::after {\n                    transform: translate(-50%, 0) rotate(-45deg);\n                }\n            }\n        }\n    }\n\n    #{id(wrapper)} {\n        display: flex;\n        flex-direction: column;\n        position: fixed;\n        top: -100%;\n        left: 0;\n        width: 100%;\n        height: calc(100vh - css-var(header-height));\n        transition: none;\n        z-index: -2;\n\n        &#{class(open)} {\n            top: css-var(header-height);\n        }\n    }\n\n    #{id(widgets)} {\n        position: absolute;\n        top: 0;\n        right: 0;\n        height: css-var(header-height);\n    }\n\n    #{class(dropdown)} {\n        background: css-var(header-bg);\n\n        button {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            min-width: css-var(header-height);\n            height: css-var(header-height);\n            padding: calc(css-var(header-height) / 2);\n        }\n\n        li {\n            padding: calc(css-var(header-height) / 2);\n            line-height: 1;\n            cursor: pointer;\n        }\n    }",
      "line": {
        "start": 19,
        "end": 244
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/components/_header.scss",
      "name": "_header.scss"
    }
  },
  {
    "description": "A basic image\n",
    "commentRange": {
      "start": 10,
      "end": 10
    },
    "context": {
      "type": "css",
      "name": "#{class(image)}",
      "value": "/// A placeholder image warning\n    &#{class(error)} {\n        &::after {\n            content: '❌ Image failed to load. This is a placeholder.';\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            width: 100%;\n            padding: 0 $image-shadow-size $image-shadow-size $image-shadow-size;\n            background: css-var($shadow-color);\n            box-shadow: 0 0 $image-shadow-size $image-shadow-size css-var($shadow-color);\n            text-align: center;\n        }\n    }\n\n    img {\n        display: block;\n    }",
      "line": {
        "start": 11,
        "end": 38
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/components/_image.scss",
      "name": "_image.scss"
    }
  },
  {
    "description": "A placeholder image warning\n",
    "commentRange": {
      "start": 13,
      "end": 13
    },
    "context": {
      "type": "css",
      "name": "&#{class(error)}",
      "value": "&::after {\n            content: '❌ Image failed to load. This is a placeholder.';\n            position: absolute;\n            bottom: 0;\n            left: 0;\n            width: 100%;\n            padding: 0 $image-shadow-size $image-shadow-size $image-shadow-size;\n            background: css-var($shadow-color);\n            box-shadow: 0 0 $image-shadow-size $image-shadow-size css-var($shadow-color);\n            text-align: center;\n        }",
      "line": {
        "start": 14,
        "end": 38
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/components/_image.scss",
      "name": "_image.scss"
    }
  },
  {
    "description": "Banner images\n",
    "commentRange": {
      "start": 33,
      "end": 33
    },
    "context": {
      "type": "css",
      "name": "#{class(banner)}",
      "value": "position: relative;\n\twidth: 100%;",
      "line": {
        "start": 34,
        "end": 38
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/components/_image.scss",
      "name": "_image.scss"
    }
  },
  {
    "description": "CSS variables\n",
    "commentRange": {
      "start": 24,
      "end": 24
    },
    "context": {
      "type": "css",
      "name": ":root",
      "value": "@include css-var(delay-instant, delay(instant));\n    @include css-var(delay-fast, delay(fast));\n    @include css-var(delay-med-fast, delay(med-fast));\n    @include css-var(delay-default, delay(default));\n    @include css-var(delay-med-slow, delay(med-slow));\n    @include css-var(delay-slow, delay(slow));",
      "line": {
        "start": 25,
        "end": 78
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/global/_animations.scss",
      "name": "_animations.scss"
    }
  },
  {
    "description": "Global styles\n",
    "commentRange": {
      "start": 4,
      "end": 4
    },
    "context": {
      "type": "css",
      "name": "*",
      "value": "&, &::before, &::after {\n        box-sizing: border-box;\n    }",
      "line": {
        "start": 5,
        "end": 108
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/global/_global.scss",
      "name": "_global.scss"
    }
  },
  {
    "description": "Icon styles\n",
    "commentRange": {
      "start": 1,
      "end": 1
    },
    "context": {
      "type": "css",
      "name": "i",
      "value": "&.fa-envelope {\n        transform: translateY(5%);\n    }",
      "line": {
        "start": 2,
        "end": 7
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/global/_icons.scss",
      "name": "_icons.scss"
    }
  },
  {
    "description": "Structure styles\n",
    "commentRange": {
      "start": 4,
      "end": 4
    },
    "context": {
      "type": "css",
      "name": "#{class(pad)}",
      "value": "@include break-util(padding, 1rem, 0);",
      "line": {
        "start": 5,
        "end": 134
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/global/_structure.scss",
      "name": "_structure.scss"
    }
  },
  {
    "description": "Text Styles\n",
    "commentRange": {
      "start": 10,
      "end": 10
    },
    "context": {
      "type": "css",
      "name": "html, body",
      "value": "font-family: $font-primary, $font-backups;\n    font-size: 1rem;\n\n    @include break(md) {\n        font-size: 1.125rem;\n    }",
      "line": {
        "start": 11,
        "end": 39
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/global/_text.scss",
      "name": "_text.scss"
    }
  },
  {
    "description": "Global theme\n",
    "commentRange": {
      "start": 10,
      "end": 10
    },
    "context": {
      "type": "css",
      "name": ":root",
      "value": "/// Global Colors\n    /// Brands\n    @include css-var(bitcoin, $bitcoin);\n    @include css-var(ethereum, $ethereum);\n    @include css-var(venmo, $venmo);\n    @include css-var(facebook, $facebook);\n\t@include css-var(twitter, $twitter);\n    @include css-var(youtube, $youtube);\n    @include css-var(apple, $apple);\n    @include css-var(spotify, $spotify);\n\t@include css-var(soundcloud, $soundcloud);\n\t@include css-var(bandcamp, $bandcamp);\n    @include css-var(amazon-0, $amazon-0);\n    @include css-var(amazon-1, $amazon-1);\n    @include css-var(napster-0, $napster-0);\n    @include css-var(napster-1, $napster-1);\n    @include css-var(google-play-0, $google-play-0);\n    @include css-var(google-play-1, $google-play-1);\n    @include css-var(google-play-2, $google-play-2);\n    @include css-var(instagram-0, $instagram-0);\n    @include css-var(instagram-1, $instagram-1);\n    @include css-var(instagram-2, $instagram-2);\n    @include css-var(instagram-3, $instagram-3);\n    @include css-var(instagram-4, $instagram-4);\n    @include css-var(instagram-5, $instagram-5);\n    @include css-var(instagram-6, $instagram-6);\n\n    /// Application Colors\n    @include shades('black', $black, lighten);\n    @include shades('white', $white, darken);\n    @include shades(glow, $trans-light, darken, 7, 10%, true);\n    @include shades(shadow, $trans-dark, darken, 7, 10%, true);\n\n    @include shades(brand, $brand);\n    @include shades(accent, $accent);\n    @include shades(success, $success);\n    @include shades(danger, $danger);\n    @include shades(warning, $warning);\n    @include shades(info, $info);",
      "line": {
        "start": 11,
        "end": 159
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/global/_themes.scss",
      "name": "_themes.scss"
    }
  },
  {
    "description": "Light theme\n",
    "commentRange": {
      "start": 53,
      "end": 53
    },
    "context": {
      "type": "mixin",
      "name": "light-theme",
      "code": "\n    @include css-var(fore, $fore);\n    @include css-var(back, $back);\n",
      "line": {
        "start": 54,
        "end": 57
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      }
    ],
    "file": {
      "path": "imports/global/_themes.scss",
      "name": "_themes.scss"
    }
  },
  {
    "description": "Dark theme\n",
    "commentRange": {
      "start": 59,
      "end": 59
    },
    "context": {
      "type": "mixin",
      "name": "dark-theme",
      "code": "\n    @include css-var(fore, $back);\n    @include css-var(back, $fore);\n",
      "line": {
        "start": 60,
        "end": 63
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "mixin",
        "name": "css-var"
      },
      {
        "type": "mixin",
        "name": "css-var"
      }
    ],
    "file": {
      "path": "imports/global/_themes.scss",
      "name": "_themes.scss"
    }
  },
  {
    "description": "Apply themes\n",
    "commentRange": {
      "start": 65,
      "end": 65
    },
    "context": {
      "type": "css",
      "name": ":root",
      "value": "@if ($theme-default == light) {\n        @include light-theme;\n    } @else {\n        @include dark-theme;\n    }",
      "line": {
        "start": 66,
        "end": 159
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/global/_themes.scss",
      "name": "_themes.scss"
    }
  },
  {
    "description": "https://codepen.io/thomasrye/pen/VaRoYv\n",
    "commentRange": {
      "start": 99,
      "end": 99
    },
    "context": {
      "type": "css",
      "name": "background: radial-gradient(circle at 30% 107%, #fdf497 0%, #fdf497 5%, #fd5949 45%, #d6249f 60%, #285AEB 90%);\n\t\t\t}\n\t\t}\n\t}\n\n    @include states(hover, focus, active)",
      "value": "color: css-var(accent-0);\n\n\t\t.fa-facebook, .fa-square-facebook {\n\t\t\tcolor: css-var(facebook);\n\t\t}\n\n        .fa-instagram {\n\t\t\t&::after {\n\t\t\t\topacity: 1;\n\t\t\t}\n\t\t}\n\n\t\t.fa-twitter {\n\t\t\tcolor: css-var(twitter);\n\t\t}\n\n\t\t.fa-youtube {\n            color: css-var(youtube);\n        }\n\n\t\t.fa-spotify {\n\t\t\tcolor: css-var(spotify);\n\t\t}\n\n\t\t.fa-apple {\n\t\t\tcolor: css-var(apple);\n\t\t}\n\n\t\t.fa-soundcloud {\n\t\t\tcolor: css-var(soundcloud);\n\t\t}\n\n\t\t.fa-bandcamp {\n\t\t\tcolor: css-var(bandcamp);\n\t\t}\n\n\t\t.fa-github {\n            color: css-var(white-1);\n        }\n\n        .fa-bitcoin {\n            color: css-var(bitcoin);\n        }\n\n        .fa-ethereum {\n            color: css-var(ethereum);\n        }\n\n        .fa-vimeo {\n            color: css-var(venmo);\n        }",
      "line": {
        "start": 105,
        "end": 159
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/global/_themes.scss",
      "name": "_themes.scss"
    }
  },
  {
    "description": "TODO: Document this\n",
    "commentRange": {
      "start": 716,
      "end": 716
    },
    "context": {
      "type": "mixin",
      "name": "states",
      "code": "\n\t@each $state in $states {\n\t\t@if (type-of($state) !='string') {\n\t\t\t@error 'The states mixin requires a string for each state argument.';\n\t\t}\n\n\t\t@if not($state =='hover' or $state =='focus' or $state =='active' or $state =='visited' or $state =='disabled') {\n\t\t\t@error 'The states mixin requires a string of \"hover\", \"focus\", \"active\", \"visited\", or \"disabled\" for each state argument.';\n\t\t}\n\t}\n\n\t@if (index($states, 'hover') !=null) {\n\t\t&:hover {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'focus') !=null) {\n\t\t&:focus {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'active') !=null) {\n\n\t\t&:active,\n\t\t&#{class(active)} {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'visited') !=null) {\n\t\t&:visited {\n\t\t\t@content;\n\t\t}\n\t}\n\n\t@if (index($states, 'disabled') !=null) {\n\t\t&:disabled {\n\t\t\t@content;\n\t\t}\n\t}\n",
      "line": {
        "start": 717,
        "end": 759
      }
    },
    "access": "public",
    "content": "",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "function",
        "name": "class"
      }
    ],
    "throw": [
      "The states mixin requires a string for each state argument.",
      "The states mixin requires a string of "
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Mixins\nRegister an animation\n",
    "commentRange": {
      "start": 840,
      "end": 841
    },
    "context": {
      "type": "mixin",
      "name": "animation",
      "code": "\n\t$animations: map-merge($animations, (&: map-merge(map.get($animations, &), $animation)));\n\t$this: map.get($animations, &);\n\t$animation: '';\n\n\t& {\n\t\t@each $item in $this {\n\t\t\t@if (list.index($this, $item) !=1) {\n\t\t\t\t$animation: #{$animation},\n\t\t\t\t;\n\t\t\t}\n\n\t\t\t$animation: #{$animation}#{$item};\n\t\t}\n\n\t\tanimation: $animation;\n\n\t\t@each $name,\n\t\t$items in $animations {\n\t\t\t&#{class($name)} {\n\t\t\t\tanimation: $animation;\n\t\t\t}\n\t\t}\n\t}\n",
      "line": {
        "start": 842,
        "end": 866
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [
      {
        "type": "function",
        "name": "class"
      }
    ],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Register a transition\n",
    "commentRange": {
      "start": 868,
      "end": 868
    },
    "context": {
      "type": "mixin",
      "name": "transition",
      "code": "\n\t$transitions: map-merge($transitions, ($name: $transition));\n",
      "line": {
        "start": 869,
        "end": 871
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "require": [],
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Global Colors\n",
    "commentRange": {
      "start": 7,
      "end": 7
    },
    "context": {
      "type": "variable",
      "name": "bitcoin",
      "value": "#FF9900",
      "scope": "private",
      "line": {
        "start": 8,
        "end": 8
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/util/_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Application Colors\n",
    "commentRange": {
      "start": 33,
      "end": 33
    },
    "context": {
      "type": "variable",
      "name": "black",
      "value": "#000",
      "scope": "default",
      "line": {
        "start": 34,
        "end": 34
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/util/_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Fonts\n",
    "commentRange": {
      "start": 53,
      "end": 53
    },
    "context": {
      "type": "variable",
      "name": "font-primary",
      "value": "sans-serif",
      "scope": "default",
      "line": {
        "start": 54,
        "end": 54
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/util/_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Font Sizes\n",
    "commentRange": {
      "start": 59,
      "end": 59
    },
    "context": {
      "type": "variable",
      "name": "font-size-mobile",
      "value": "(\n    h1: 2.5rem,\n    h2: 2rem,\n    h3: 1.75rem,\n    h4: 1.5rem,\n    h5: 1.25rem,\n    h6: 1.125rem,\n    p: 1rem,\n)",
      "scope": "default",
      "line": {
        "start": 60,
        "end": 68
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/util/_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Structure\n",
    "commentRange": {
      "start": 79,
      "end": 79
    },
    "context": {
      "type": "variable",
      "name": "grid-gap",
      "value": "2rem",
      "scope": "default",
      "line": {
        "start": 80,
        "end": 80
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/util/_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Default theme\n",
    "commentRange": {
      "start": 82,
      "end": 82
    },
    "context": {
      "type": "variable",
      "name": "theme-default",
      "value": "light",
      "scope": "default",
      "line": {
        "start": 83,
        "end": 83
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/util/_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Outline width\n",
    "commentRange": {
      "start": 85,
      "end": 85
    },
    "context": {
      "type": "variable",
      "name": "border-width",
      "value": "0.125rem",
      "scope": "default",
      "line": {
        "start": 86,
        "end": 86
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/util/_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Header\n",
    "commentRange": {
      "start": 89,
      "end": 89
    },
    "context": {
      "type": "variable",
      "name": "header-height",
      "value": "4rem",
      "scope": "default",
      "line": {
        "start": 90,
        "end": 90
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/util/_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Default Shadows\n",
    "commentRange": {
      "start": 92,
      "end": 92
    },
    "context": {
      "type": "variable",
      "name": "shadow-color",
      "value": "glow-2",
      "scope": "default",
      "line": {
        "start": 93,
        "end": 93
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/util/_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Images\n",
    "commentRange": {
      "start": 96,
      "end": 96
    },
    "context": {
      "type": "variable",
      "name": "image-shadow-size",
      "value": "0.5rem",
      "scope": "default",
      "line": {
        "start": 97,
        "end": 97
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/util/_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Buttons\n",
    "commentRange": {
      "start": 99,
      "end": 99
    },
    "context": {
      "type": "variable",
      "name": "menu-bar-height",
      "value": "0.4rem",
      "scope": "default",
      "line": {
        "start": 100,
        "end": 100
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/util/_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "Cards\n",
    "commentRange": {
      "start": 124,
      "end": 124
    },
    "context": {
      "type": "variable",
      "name": "card-padding",
      "value": "1.5rem",
      "scope": "default",
      "line": {
        "start": 125,
        "end": 125
      }
    },
    "access": "public",
    "group": [
      "undefined"
    ],
    "file": {
      "path": "imports/util/_vars.scss",
      "name": "_vars.scss"
    }
  },
  {
    "description": "util.scss - Variables, Functions, and Mixins to import elsewhere\n",
    "commentRange": {
      "start": 1,
      "end": 4
    },
    "context": {
      "type": "css",
      "name": "/// Imports\n@use 'sass:color';\n@use 'sass:math';\n@use 'sass:string';\n\n/// Library name\n/// @group Variables\n/// @type String\n$lib: mint !default;\n\n/// Dash - variable name separator\n/// @group Variables\n/// @type String\n$dash: #{'-'};\n\n/// Prefix added to selectors\n/// @group Variables\n/// @type String\n$pre: #{$lib}#{$dash};\n\n/// Dot - added to classes\n/// @group Variables\n/// @type String\n$dot: #{'.'};\n\n/// Hash - added to ids\n/// @group Variables\n/// @type String\n$hash: #{'#'};\n\n/// CSS-selector for disabled elements\n/// @group Variables\n/// @type String\n$disabled: #{'[disabled]'};\n\n/// CSS-selector for elements with an aria-controls attribute\n/// @group Variables\n/// @type String\n$has-controls: #{'[aria-controls]'};\n\n/// CSS-selector for elements with an aria-expanded attribute\n/// @group Variables\n/// @type String\n$has-expanded: #{'[aria-expanded]'};\n\n/// CSS-selector for elements with an aria-hidden attribute\n/// @group Variables\n/// @type String\n$has-hidden: #{'[aria-hidden]'};\n\n/// CSS-selector for elements with an href attribute\n/// @group Variables\n/// @type String\n$has-link: #{'[href]'};\n\n/// CSS-selector for elements with a routerLink attribute\n/// @group Variables\n/// @type String\n$has-router-link: #{'[routerLink]'};\n\n/// CSS-selector for elements with an id attribute\n/// @group Variables\n/// @type String\n$has-id: #{'[id]'};\n\n/// CSS-selector for elements that aren't tabbable (i.e. tabindex is negative)\n/// @group Variables\n/// @type String\n$not-tabbable: #{'[tabindex^=\"-\"]'};\n\n/// CSS-selector for elements that are tabbable (i.e. tabindex isn't negative)\n/// @group Variables\n/// @type String\n$tabbable: #{'[tabindex]'}#{neg($not-tabbable)};\n\n/// CSS-selector for submenu buttons\n/// @group Variables\n/// @type String\n$sub-menu-buttons: #{'button'}#{$has-controls};\n\n/// CSS-selector for submenus\n/// @group Variables\n/// @type String\n$sub-menu: #{$sub-menu-buttons}#{' + ul'}#{$has-id};\n\n/// Value added to all delay variables\n/// @group Variables\n/// @type Number\n$delay-base: 0 !default;\n\n/// Value added to all delay variables\n/// @group Variables\n/// @type Number\n$delay-step: 100 !default;\n\n/// Delay variables\n/// @group Maps\n/// @prop",
      "value": "Number",
      "line": {
        "start": 103,
        "end": 872
      }
    },
    "author": [
      "App/Art Mint"
    ],
    "group": [
      "util"
    ],
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Library name\n",
    "commentRange": {
      "start": 11,
      "end": 13
    },
    "context": {
      "type": "variable",
      "name": "lib",
      "value": "mint",
      "scope": "default",
      "line": {
        "start": 14,
        "end": 14
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Dash - variable name separator\n",
    "commentRange": {
      "start": 16,
      "end": 18
    },
    "context": {
      "type": "variable",
      "name": "dash",
      "value": "#{'-'}",
      "scope": "private",
      "line": {
        "start": 19,
        "end": 19
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Prefixes the provided string with two dashes and the library name if it isn't already\n",
        "context": {
          "type": "function",
          "name": "css-prefix",
          "code": "\n\t@if (type-of($base) !='string') {\n\t\t@error 'The css-prefix function requires a string value.';\n\t}\n\n\t@while (string.index($base, $dash)==1) {\n\t\t$base: string.slice($base, 2);\n\t}\n\n\t@return $dash +$dash +prefix($base);\n",
          "line": {
            "start": 175,
            "end": 185
          }
        }
      },
      {
        "description": "Prefixes the provided string with two dashes and the library name if it isn't already\n",
        "context": {
          "type": "function",
          "name": "css-prefix",
          "code": "\n\t@if (type-of($base) !='string') {\n\t\t@error 'The css-prefix function requires a string value.';\n\t}\n\n\t@while (string.index($base, $dash)==1) {\n\t\t$base: string.slice($base, 2);\n\t}\n\n\t@return $dash +$dash +prefix($base);\n",
          "line": {
            "start": 175,
            "end": 185
          }
        }
      },
      {
        "description": "Prefixes the provided string with two dashes and the library name if it isn't already\n",
        "context": {
          "type": "function",
          "name": "css-prefix",
          "code": "\n\t@if (type-of($base) !='string') {\n\t\t@error 'The css-prefix function requires a string value.';\n\t}\n\n\t@while (string.index($base, $dash)==1) {\n\t\t$base: string.slice($base, 2);\n\t}\n\n\t@return $dash +$dash +prefix($base);\n",
          "line": {
            "start": 175,
            "end": 185
          }
        }
      }
    ]
  },
  {
    "description": "Prefix added to selectors\n",
    "commentRange": {
      "start": 21,
      "end": 23
    },
    "context": {
      "type": "variable",
      "name": "pre",
      "value": "#{$lib}#{$dash}",
      "scope": "private",
      "line": {
        "start": 24,
        "end": 24
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Prefixes the provided string with the library name if it isn't already\n",
        "context": {
          "type": "function",
          "name": "prefix",
          "code": "\n\t@if (type-of($base) !='string') {\n\t\t@error 'The prefix function requires a string value.';\n\t}\n\n\t$base: string.to-lower-case($base\n\t);\n\n@if (string.index($base, $pre) !=1) {\n\t$base: $pre +$base;\n}\n\n@return $base;\n",
          "line": {
            "start": 152,
            "end": 165
          }
        }
      },
      {
        "description": "Prefixes the provided string with the library name if it isn't already\n",
        "context": {
          "type": "function",
          "name": "prefix",
          "code": "\n\t@if (type-of($base) !='string') {\n\t\t@error 'The prefix function requires a string value.';\n\t}\n\n\t$base: string.to-lower-case($base\n\t);\n\n@if (string.index($base, $pre) !=1) {\n\t$base: $pre +$base;\n}\n\n@return $base;\n",
          "line": {
            "start": 152,
            "end": 165
          }
        }
      }
    ]
  },
  {
    "description": "Dot - added to classes\n",
    "commentRange": {
      "start": 26,
      "end": 28
    },
    "context": {
      "type": "variable",
      "name": "dot",
      "value": "#{'.'}",
      "scope": "private",
      "line": {
        "start": 29,
        "end": 29
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Creates a class selector with the library prefix\n",
        "context": {
          "type": "function",
          "name": "class",
          "code": "\n\t@if (type-of($base) !='string') {\n\t\t@error 'The class function requires a string value.';\n\t}\n\n\t@return $dot +prefix($base);\n",
          "line": {
            "start": 227,
            "end": 233
          }
        }
      }
    ]
  },
  {
    "description": "Hash - added to ids\n",
    "commentRange": {
      "start": 31,
      "end": 33
    },
    "context": {
      "type": "variable",
      "name": "hash",
      "value": "#{'#'}",
      "scope": "private",
      "line": {
        "start": 34,
        "end": 34
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    },
    "usedBy": [
      {
        "description": "Creates an id selector with the library prefix\n",
        "context": {
          "type": "function",
          "name": "id",
          "code": "\n\t@if (type-of($base) !='string') {\n\t\t@error 'The id function requires a string value.';\n\t}\n\n\t@if (type-of($op) !='string') {\n\t\t@error 'The controls function requires a string value for param 2.';\n\t}\n\n\t@if not($op =='=' or $op =='~=' or $op =='|=' or $op =='^=' or $op =='$=' or $op =='*=') {\n\t\t@error 'The controls function requires a valid attribute comparison operator for param 2.';\n\t}\n\n\t@if ($op =='=') {\n\t\t@return $hash +prefix($base);\n\t}\n\n\t@return '[id'+$op +prefix($base)+']';\n",
          "line": {
            "start": 244,
            "end": 262
          }
        }
      }
    ]
  },
  {
    "description": "CSS-selector for disabled elements\n",
    "commentRange": {
      "start": 36,
      "end": 38
    },
    "context": {
      "type": "variable",
      "name": "disabled",
      "value": "#{'[disabled]'}",
      "scope": "private",
      "line": {
        "start": 39,
        "end": 39
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for elements with an aria-controls attribute\n",
    "commentRange": {
      "start": 41,
      "end": 43
    },
    "context": {
      "type": "variable",
      "name": "has-controls",
      "value": "#{'[aria-controls]'}",
      "scope": "private",
      "line": {
        "start": 44,
        "end": 44
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for elements with an aria-expanded attribute\n",
    "commentRange": {
      "start": 46,
      "end": 48
    },
    "context": {
      "type": "variable",
      "name": "has-expanded",
      "value": "#{'[aria-expanded]'}",
      "scope": "private",
      "line": {
        "start": 49,
        "end": 49
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for elements with an aria-hidden attribute\n",
    "commentRange": {
      "start": 51,
      "end": 53
    },
    "context": {
      "type": "variable",
      "name": "has-hidden",
      "value": "#{'[aria-hidden]'}",
      "scope": "private",
      "line": {
        "start": 54,
        "end": 54
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for elements with an href attribute\n",
    "commentRange": {
      "start": 56,
      "end": 58
    },
    "context": {
      "type": "variable",
      "name": "has-link",
      "value": "#{'[href]'}",
      "scope": "private",
      "line": {
        "start": 59,
        "end": 59
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for elements with a routerLink attribute\n",
    "commentRange": {
      "start": 61,
      "end": 63
    },
    "context": {
      "type": "variable",
      "name": "has-router-link",
      "value": "#{'[routerLink]'}",
      "scope": "private",
      "line": {
        "start": 64,
        "end": 64
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for elements with an id attribute\n",
    "commentRange": {
      "start": 66,
      "end": 68
    },
    "context": {
      "type": "variable",
      "name": "has-id",
      "value": "#{'[id]'}",
      "scope": "private",
      "line": {
        "start": 69,
        "end": 69
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for elements that aren't tabbable (i.e. tabindex is negative)\n",
    "commentRange": {
      "start": 71,
      "end": 73
    },
    "context": {
      "type": "variable",
      "name": "not-tabbable",
      "value": "#{'[tabindex^=\"-\"]'}",
      "scope": "private",
      "line": {
        "start": 74,
        "end": 74
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for elements that are tabbable (i.e. tabindex isn't negative)\n",
    "commentRange": {
      "start": 76,
      "end": 78
    },
    "context": {
      "type": "variable",
      "name": "tabbable",
      "value": "#{'[tabindex]'}#{neg($not-tabbable)}",
      "scope": "private",
      "line": {
        "start": 79,
        "end": 79
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for submenu buttons\n",
    "commentRange": {
      "start": 81,
      "end": 83
    },
    "context": {
      "type": "variable",
      "name": "sub-menu-buttons",
      "value": "#{'button'}#{$has-controls}",
      "scope": "private",
      "line": {
        "start": 84,
        "end": 84
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "CSS-selector for submenus\n",
    "commentRange": {
      "start": 86,
      "end": 88
    },
    "context": {
      "type": "variable",
      "name": "sub-menu",
      "value": "#{$sub-menu-buttons}#{' + ul'}#{$has-id}",
      "scope": "private",
      "line": {
        "start": 89,
        "end": 89
      }
    },
    "group": [
      "variables"
    ],
    "type": "String",
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Value added to all delay variables\n",
    "commentRange": {
      "start": 91,
      "end": 93
    },
    "context": {
      "type": "variable",
      "name": "delay-base",
      "value": "0",
      "scope": "default",
      "line": {
        "start": 94,
        "end": 94
      }
    },
    "group": [
      "variables"
    ],
    "type": "Number",
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "Value added to all delay variables\n",
    "commentRange": {
      "start": 96,
      "end": 98
    },
    "context": {
      "type": "variable",
      "name": "delay-step",
      "value": "100",
      "scope": "default",
      "line": {
        "start": 99,
        "end": 99
      }
    },
    "group": [
      "variables"
    ],
    "type": "Number",
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  },
  {
    "description": "True if Bootstrap5 is used in the project\n",
    "commentRange": {
      "start": 131,
      "end": 133
    },
    "context": {
      "type": "variable",
      "name": "bootstrap5",
      "value": "false",
      "scope": "default",
      "line": {
        "start": 134,
        "end": 134
      }
    },
    "group": [
      "variables"
    ],
    "type": "Boolean",
    "access": "public",
    "file": {
      "path": "imports/util/_util.scss",
      "name": "_util.scss"
    }
  }
]
