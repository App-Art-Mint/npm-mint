/// animations.scss - Global animations
/// @author App/Art Mint
/// 
/// @group Animations
@charset 'utf-8';

/// Imports
@use 'sass:math';
@use 'sass:map';
@use 'sass:list';
@use '../util' as *;

/// Variables
$animations: (());
$transitions: (());

/// Mixins
/// Register an animation
@mixin animation($animation) {
    $animations: map-merge($animations, (&: map-merge(map.get($animations, &), $animation)));
    $this: map.get($animations, &);
    $animation: '';

    & {
        @each $item in $this {
            @if (list.index($this, $item) != 1) {
                $animation: #{$animation},;
            }
            $animation: #{$animation}#{$item};
        }
        animation: $animation;

        @each $name, $items in $animations {
            &#{class($name)} {
                animation: $animation;
            }
        }
    }
}

/// Register a transition
@mixin transition($transition) {
    $transitions: map-merge($transitions, ($name: $transition));
}

/// Animations
/// Cycle through instagram colors
@keyframes instafade {
    @for $i from 0 through 6 {
        $percent: percentage(math.div($i, 6));
        #{$percent} {
            color: css-var(instagram-#{$i});
        }
    }
}

/// CSS variables
:root {
    @include css-var(delay-instant, delay(instant));
    @include css-var(delay-fast, delay(fast));
    @include css-var(delay-med-fast, delay(med-fast));
    @include css-var(delay-default, delay(default));
    @include css-var(delay-med-slow, delay(med-slow));
    @include css-var(delay-slow, delay(slow));
}

#{class(fall-in)} {
    opacity: 0;
    transform: translateY(-100px);
    transition: all delay(slow) ease-out, box-shadow delay(slow) delay(med-slow) ease-out !important;
    pointer-events: none;

    &#{class(show)}#{neg(class(loading))} {
        opacity: 1;
        transform: translateY(0%);
        pointer-events: auto;
    }

    &#{neg(class(show))}, &#{class(loading)} {
        box-shadow: 0 0 0 0 transparent !important;
    }

    &#{class(fast)} {
        transition: all delay(fast), box-shadow delay(fast) delay(fast) !important;
    }
}

#{class(shine)} {
    position: relative;
    overflow: hidden;

    @include states(hover, focus, active) {
        &::after {
            transition-duration: delay(default);
            transform: translate(100%, -100%);
        }
    }

    &::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        transform: translate(-100%, 100%);
        background: linear-gradient(45deg, rgba(255,255,255,0) 0%, rgba(255,255,255,0.15) 50%, rgba(255,255,255,0) 100%);
        transition: transform delay(med-fast) ease-out;
    }
}
